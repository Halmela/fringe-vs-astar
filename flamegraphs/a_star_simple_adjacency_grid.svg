<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2560" height="726" onload="init(evt)" viewBox="0 0 2560 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2550" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2550" y="709.00"> </text><svg id="frames" x="10" width="2540" total_samples="838"><g><title>[fringe-vs-astar] (3 samples, 0.36%)</title><rect x="0.0000%" y="645" width="0.3580%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.1172%" y="655.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (3 samples, 0.36%)</title><rect x="0.0000%" y="629" width="0.3580%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.1172%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.36%)</title><rect x="0.0000%" y="613" width="0.3580%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.1172%" y="623.50"></text></g><g><title>&lt;fringe_vs_astar::graph::AdjacencyGridGraph as fringe_vs_astar::graph::Graph&gt;::neighbors (4 samples, 0.48%)</title><rect x="0.3580%" y="629" width="0.4773%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="4"/><text x="0.4752%" y="639.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (3 samples, 0.36%)</title><rect x="0.8353%" y="629" width="0.3580%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="3"/><text x="0.9525%" y="639.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (2 samples, 0.24%)</title><rect x="0.9547%" y="613" width="0.2387%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="2"/><text x="1.0718%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.12%)</title><rect x="1.1933%" y="629" width="0.1193%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="1"/><text x="1.3105%" y="639.50"></text></g><g><title>[unknown] (23 samples, 2.74%)</title><rect x="0.3580%" y="645" width="2.7446%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="23"/><text x="0.4752%" y="655.50">[unknow..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (15 samples, 1.79%)</title><rect x="1.3126%" y="629" width="1.7900%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="15"/><text x="1.4298%" y="639.50">frin..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple::_{{closure}} (8 samples, 0.95%)</title><rect x="2.1480%" y="613" width="0.9547%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="8"/><text x="2.2652%" y="623.50">f..</text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.24%)</title><rect x="13.0072%" y="485" width="0.2387%" height="15" fill="rgb(250,228,42)" fg:x="109" fg:w="2"/><text x="13.1243%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.95%)</title><rect x="13.2458%" y="485" width="0.9547%" height="15" fill="rgb(240,193,28)" fg:x="111" fg:w="8"/><text x="13.3630%" y="495.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.95%)</title><rect x="13.2458%" y="469" width="0.9547%" height="15" fill="rgb(216,20,37)" fg:x="111" fg:w="8"/><text x="13.3630%" y="479.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.95%)</title><rect x="13.2458%" y="453" width="0.9547%" height="15" fill="rgb(206,188,39)" fg:x="111" fg:w="8"/><text x="13.3630%" y="463.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.24%)</title><rect x="14.2005%" y="485" width="0.2387%" height="15" fill="rgb(217,207,13)" fg:x="119" fg:w="2"/><text x="14.3177%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.24%)</title><rect x="14.2005%" y="469" width="0.2387%" height="15" fill="rgb(231,73,38)" fg:x="119" fg:w="2"/><text x="14.3177%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.24%)</title><rect x="14.2005%" y="453" width="0.2387%" height="15" fill="rgb(225,20,46)" fg:x="119" fg:w="2"/><text x="14.3177%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.48%)</title><rect x="14.4391%" y="485" width="0.4773%" height="15" fill="rgb(210,31,41)" fg:x="121" fg:w="4"/><text x="14.5563%" y="495.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.12%)</title><rect x="14.7971%" y="469" width="0.1193%" height="15" fill="rgb(221,200,47)" fg:x="124" fg:w="1"/><text x="14.9143%" y="479.50"></text></g><g><title>&lt;fringe_vs_astar::graph::AdjacencyGridGraph as fringe_vs_astar::graph::Graph&gt;::neighbors (7 samples, 0.84%)</title><rect x="14.9165%" y="485" width="0.8353%" height="15" fill="rgb(226,26,5)" fg:x="125" fg:w="7"/><text x="15.0337%" y="495.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5 samples, 0.60%)</title><rect x="15.8711%" y="469" width="0.5967%" height="15" fill="rgb(249,33,26)" fg:x="133" fg:w="5"/><text x="15.9883%" y="479.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (19 samples, 2.27%)</title><rect x="16.5871%" y="437" width="2.2673%" height="15" fill="rgb(235,183,28)" fg:x="139" fg:w="19"/><text x="16.7043%" y="447.50">alloc:..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.12%)</title><rect x="18.7351%" y="421" width="0.1193%" height="15" fill="rgb(221,5,38)" fg:x="157" fg:w="1"/><text x="18.8523%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.12%)</title><rect x="18.7351%" y="405" width="0.1193%" height="15" fill="rgb(247,18,42)" fg:x="157" fg:w="1"/><text x="18.8523%" y="415.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.12%)</title><rect x="18.7351%" y="389" width="0.1193%" height="15" fill="rgb(241,131,45)" fg:x="157" fg:w="1"/><text x="18.8523%" y="399.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.12%)</title><rect x="18.7351%" y="373" width="0.1193%" height="15" fill="rgb(249,31,29)" fg:x="157" fg:w="1"/><text x="18.8523%" y="383.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.12%)</title><rect x="18.7351%" y="357" width="0.1193%" height="15" fill="rgb(225,111,53)" fg:x="157" fg:w="1"/><text x="18.8523%" y="367.50"></text></g><g><title>__remove_hrtimer (1 samples, 0.12%)</title><rect x="18.7351%" y="341" width="0.1193%" height="15" fill="rgb(238,160,17)" fg:x="157" fg:w="1"/><text x="18.8523%" y="351.50"></text></g><g><title>timerqueue_del (1 samples, 0.12%)</title><rect x="18.7351%" y="325" width="0.1193%" height="15" fill="rgb(214,148,48)" fg:x="157" fg:w="1"/><text x="18.8523%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (5 samples, 0.60%)</title><rect x="25.2983%" y="421" width="0.5967%" height="15" fill="rgb(232,36,49)" fg:x="212" fg:w="5"/><text x="25.4155%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (1 samples, 0.12%)</title><rect x="26.2530%" y="405" width="0.1193%" height="15" fill="rgb(209,103,24)" fg:x="220" fg:w="1"/><text x="26.3702%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.12%)</title><rect x="26.2530%" y="389" width="0.1193%" height="15" fill="rgb(229,88,8)" fg:x="220" fg:w="1"/><text x="26.3702%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.12%)</title><rect x="26.2530%" y="373" width="0.1193%" height="15" fill="rgb(213,181,19)" fg:x="220" fg:w="1"/><text x="26.3702%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.12%)</title><rect x="26.2530%" y="357" width="0.1193%" height="15" fill="rgb(254,191,54)" fg:x="220" fg:w="1"/><text x="26.3702%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (2 samples, 0.24%)</title><rect x="26.3723%" y="405" width="0.2387%" height="15" fill="rgb(241,83,37)" fg:x="221" fg:w="2"/><text x="26.4895%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.24%)</title><rect x="26.3723%" y="389" width="0.2387%" height="15" fill="rgb(233,36,39)" fg:x="221" fg:w="2"/><text x="26.4895%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (2 samples, 0.24%)</title><rect x="26.6110%" y="405" width="0.2387%" height="15" fill="rgb(226,3,54)" fg:x="223" fg:w="2"/><text x="26.7282%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::le (2 samples, 0.24%)</title><rect x="26.6110%" y="389" width="0.2387%" height="15" fill="rgb(245,192,40)" fg:x="223" fg:w="2"/><text x="26.7282%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.48%)</title><rect x="26.8496%" y="373" width="0.4773%" height="15" fill="rgb(238,167,29)" fg:x="225" fg:w="4"/><text x="26.9668%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (13 samples, 1.55%)</title><rect x="25.8950%" y="421" width="1.5513%" height="15" fill="rgb(232,182,51)" fg:x="217" fg:w="13"/><text x="26.0122%" y="431.50">all..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (5 samples, 0.60%)</title><rect x="26.8496%" y="405" width="0.5967%" height="15" fill="rgb(231,60,39)" fg:x="225" fg:w="5"/><text x="26.9668%" y="415.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.60%)</title><rect x="26.8496%" y="389" width="0.5967%" height="15" fill="rgb(208,69,12)" fg:x="225" fg:w="5"/><text x="26.9668%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.12%)</title><rect x="27.3270%" y="373" width="0.1193%" height="15" fill="rgb(235,93,37)" fg:x="229" fg:w="1"/><text x="27.4442%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.12%)</title><rect x="27.3270%" y="357" width="0.1193%" height="15" fill="rgb(213,116,39)" fg:x="229" fg:w="1"/><text x="27.4442%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.12%)</title><rect x="27.3270%" y="341" width="0.1193%" height="15" fill="rgb(222,207,29)" fg:x="229" fg:w="1"/><text x="27.4442%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (199 samples, 23.75%)</title><rect x="27.4463%" y="405" width="23.7470%" height="15" fill="rgb(206,96,30)" fg:x="230" fg:w="199"/><text x="27.5635%" y="415.50">core::intrinsics::copy_nonoverlapping</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (214 samples, 25.54%)</title><rect x="27.4463%" y="421" width="25.5370%" height="15" fill="rgb(218,138,4)" fg:x="230" fg:w="214"/><text x="27.5635%" y="431.50">alloc::collections::binary_heap::Hole&lt;T&gt;::move_to</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (15 samples, 1.79%)</title><rect x="51.1933%" y="405" width="1.7900%" height="15" fill="rgb(250,191,14)" fg:x="429" fg:w="15"/><text x="51.3105%" y="415.50">core..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (4 samples, 0.48%)</title><rect x="52.9833%" y="421" width="0.4773%" height="15" fill="rgb(239,60,40)" fg:x="444" fg:w="4"/><text x="53.1005%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (137 samples, 16.35%)</title><rect x="53.4606%" y="421" width="16.3484%" height="15" fill="rgb(206,27,48)" fg:x="448" fg:w="137"/><text x="53.5778%" y="431.50">core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;..</text></g><g><title>core::cmp::PartialOrd::le (91 samples, 10.86%)</title><rect x="58.9499%" y="405" width="10.8592%" height="15" fill="rgb(225,35,8)" fg:x="494" fg:w="91"/><text x="59.0671%" y="415.50">core::cmp::PartialOrd::le</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (438 samples, 52.27%)</title><rect x="18.8544%" y="437" width="52.2673%" height="15" fill="rgb(250,213,24)" fg:x="158" fg:w="438"/><text x="18.9716%" y="447.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom</text></g><g><title>core::mem::drop (11 samples, 1.31%)</title><rect x="69.8091%" y="421" width="1.3126%" height="15" fill="rgb(247,123,22)" fg:x="585" fg:w="11"/><text x="69.9263%" y="431.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (11 samples, 1.31%)</title><rect x="69.8091%" y="405" width="1.3126%" height="15" fill="rgb(231,138,38)" fg:x="585" fg:w="11"/><text x="69.9263%" y="415.50">co..</text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 1.31%)</title><rect x="69.8091%" y="389" width="1.3126%" height="15" fill="rgb(231,145,46)" fg:x="585" fg:w="11"/><text x="69.9263%" y="399.50">&lt;a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 1.31%)</title><rect x="69.8091%" y="373" width="1.3126%" height="15" fill="rgb(251,118,11)" fg:x="585" fg:w="11"/><text x="69.9263%" y="383.50">co..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.12%)</title><rect x="71.0024%" y="357" width="0.1193%" height="15" fill="rgb(217,147,25)" fg:x="595" fg:w="1"/><text x="71.1196%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.12%)</title><rect x="71.0024%" y="341" width="0.1193%" height="15" fill="rgb(247,81,37)" fg:x="595" fg:w="1"/><text x="71.1196%" y="351.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.12%)</title><rect x="71.0024%" y="325" width="0.1193%" height="15" fill="rgb(209,12,38)" fg:x="595" fg:w="1"/><text x="71.1196%" y="335.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.12%)</title><rect x="71.0024%" y="309" width="0.1193%" height="15" fill="rgb(227,1,9)" fg:x="595" fg:w="1"/><text x="71.1196%" y="319.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.12%)</title><rect x="71.0024%" y="293" width="0.1193%" height="15" fill="rgb(248,47,43)" fg:x="595" fg:w="1"/><text x="71.1196%" y="303.50"></text></g><g><title>tick_sched_timer (1 samples, 0.12%)</title><rect x="71.0024%" y="277" width="0.1193%" height="15" fill="rgb(221,10,30)" fg:x="595" fg:w="1"/><text x="71.1196%" y="287.50"></text></g><g><title>tick_sched_handle (1 samples, 0.12%)</title><rect x="71.0024%" y="261" width="0.1193%" height="15" fill="rgb(210,229,1)" fg:x="595" fg:w="1"/><text x="71.1196%" y="271.50"></text></g><g><title>update_process_times (1 samples, 0.12%)</title><rect x="71.0024%" y="245" width="0.1193%" height="15" fill="rgb(222,148,37)" fg:x="595" fg:w="1"/><text x="71.1196%" y="255.50"></text></g><g><title>scheduler_tick (1 samples, 0.12%)</title><rect x="71.0024%" y="229" width="0.1193%" height="15" fill="rgb(234,67,33)" fg:x="595" fg:w="1"/><text x="71.1196%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.12%)</title><rect x="71.1217%" y="373" width="0.1193%" height="15" fill="rgb(247,98,35)" fg:x="596" fg:w="1"/><text x="71.2389%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (469 samples, 55.97%)</title><rect x="15.7518%" y="485" width="55.9666%" height="15" fill="rgb(247,138,52)" fg:x="132" fg:w="469"/><text x="15.8690%" y="495.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop</text></g><g><title>core::option::Option&lt;T&gt;::map (463 samples, 55.25%)</title><rect x="16.4678%" y="469" width="55.2506%" height="15" fill="rgb(213,79,30)" fg:x="138" fg:w="463"/><text x="16.5850%" y="479.50">core::option::Option&lt;T&gt;::map</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (462 samples, 55.13%)</title><rect x="16.5871%" y="453" width="55.1313%" height="15" fill="rgb(246,177,23)" fg:x="139" fg:w="462"/><text x="16.7043%" y="463.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}}</text></g><g><title>core::mem::swap (5 samples, 0.60%)</title><rect x="71.1217%" y="437" width="0.5967%" height="15" fill="rgb(230,62,27)" fg:x="596" fg:w="5"/><text x="71.2389%" y="447.50"></text></g><g><title>core::ptr::swap_nonoverlapping (5 samples, 0.60%)</title><rect x="71.1217%" y="421" width="0.5967%" height="15" fill="rgb(216,154,8)" fg:x="596" fg:w="5"/><text x="71.2389%" y="431.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (5 samples, 0.60%)</title><rect x="71.1217%" y="405" width="0.5967%" height="15" fill="rgb(244,35,45)" fg:x="596" fg:w="5"/><text x="71.2389%" y="415.50"></text></g><g><title>core::mem::swap_simple (5 samples, 0.60%)</title><rect x="71.1217%" y="389" width="0.5967%" height="15" fill="rgb(251,115,12)" fg:x="596" fg:w="5"/><text x="71.2389%" y="399.50"></text></g><g><title>core::ptr::write (4 samples, 0.48%)</title><rect x="71.2411%" y="373" width="0.4773%" height="15" fill="rgb(240,54,50)" fg:x="597" fg:w="4"/><text x="71.3582%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::len (3 samples, 0.36%)</title><rect x="71.7184%" y="469" width="0.3580%" height="15" fill="rgb(233,84,52)" fg:x="601" fg:w="3"/><text x="71.8356%" y="479.50"></text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (3 samples, 0.36%)</title><rect x="71.7184%" y="453" width="0.3580%" height="15" fill="rgb(207,117,47)" fg:x="601" fg:w="3"/><text x="71.8356%" y="463.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (14 samples, 1.67%)</title><rect x="75.0597%" y="453" width="1.6706%" height="15" fill="rgb(249,43,39)" fg:x="629" fg:w="14"/><text x="75.1769%" y="463.50">allo..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (14 samples, 1.67%)</title><rect x="75.0597%" y="437" width="1.6706%" height="15" fill="rgb(209,38,44)" fg:x="629" fg:w="14"/><text x="75.1769%" y="447.50">core..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (14 samples, 1.67%)</title><rect x="75.0597%" y="421" width="1.6706%" height="15" fill="rgb(236,212,23)" fg:x="629" fg:w="14"/><text x="75.1769%" y="431.50">&lt;usi..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 1.67%)</title><rect x="75.0597%" y="405" width="1.6706%" height="15" fill="rgb(242,79,21)" fg:x="629" fg:w="14"/><text x="75.1769%" y="415.50">core..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (11 samples, 1.31%)</title><rect x="76.7303%" y="453" width="1.3126%" height="15" fill="rgb(211,96,35)" fg:x="643" fg:w="11"/><text x="76.8475%" y="463.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 1.31%)</title><rect x="76.7303%" y="437" width="1.3126%" height="15" fill="rgb(253,215,40)" fg:x="643" fg:w="11"/><text x="76.8475%" y="447.50">co..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (54 samples, 6.44%)</title><rect x="78.0430%" y="453" width="6.4439%" height="15" fill="rgb(211,81,21)" fg:x="654" fg:w="54"/><text x="78.1601%" y="463.50">alloc::collections::b..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (4 samples, 0.48%)</title><rect x="84.4869%" y="453" width="0.4773%" height="15" fill="rgb(208,190,38)" fg:x="708" fg:w="4"/><text x="84.6041%" y="463.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (114 samples, 13.60%)</title><rect x="72.0764%" y="469" width="13.6038%" height="15" fill="rgb(235,213,38)" fg:x="604" fg:w="114"/><text x="72.1936%" y="479.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (6 samples, 0.72%)</title><rect x="84.9642%" y="453" width="0.7160%" height="15" fill="rgb(237,122,38)" fg:x="712" fg:w="6"/><text x="85.0814%" y="463.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.72%)</title><rect x="84.9642%" y="437" width="0.7160%" height="15" fill="rgb(244,218,35)" fg:x="712" fg:w="6"/><text x="85.0814%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.72%)</title><rect x="84.9642%" y="421" width="0.7160%" height="15" fill="rgb(240,68,47)" fg:x="712" fg:w="6"/><text x="85.0814%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.12%)</title><rect x="86.0382%" y="453" width="0.1193%" height="15" fill="rgb(210,16,53)" fg:x="721" fg:w="1"/><text x="86.1554%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="86.0382%" y="437" width="0.1193%" height="15" fill="rgb(235,124,12)" fg:x="721" fg:w="1"/><text x="86.1554%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="86.0382%" y="421" width="0.1193%" height="15" fill="rgb(224,169,11)" fg:x="721" fg:w="1"/><text x="86.1554%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.12%)</title><rect x="86.0382%" y="405" width="0.1193%" height="15" fill="rgb(250,166,2)" fg:x="721" fg:w="1"/><text x="86.1554%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.12%)</title><rect x="86.0382%" y="389" width="0.1193%" height="15" fill="rgb(242,216,29)" fg:x="721" fg:w="1"/><text x="86.1554%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.12%)</title><rect x="86.0382%" y="373" width="0.1193%" height="15" fill="rgb(230,116,27)" fg:x="721" fg:w="1"/><text x="86.1554%" y="383.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.12%)</title><rect x="86.0382%" y="357" width="0.1193%" height="15" fill="rgb(228,99,48)" fg:x="721" fg:w="1"/><text x="86.1554%" y="367.50"></text></g><g><title>mremap_chunk (1 samples, 0.12%)</title><rect x="86.0382%" y="341" width="0.1193%" height="15" fill="rgb(253,11,6)" fg:x="721" fg:w="1"/><text x="86.1554%" y="351.50"></text></g><g><title>__GI___mremap (1 samples, 0.12%)</title><rect x="86.0382%" y="325" width="0.1193%" height="15" fill="rgb(247,143,39)" fg:x="721" fg:w="1"/><text x="86.1554%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.12%)</title><rect x="86.0382%" y="309" width="0.1193%" height="15" fill="rgb(236,97,10)" fg:x="721" fg:w="1"/><text x="86.1554%" y="319.50"></text></g><g><title>do_syscall_64 (1 samples, 0.12%)</title><rect x="86.0382%" y="293" width="0.1193%" height="15" fill="rgb(233,208,19)" fg:x="721" fg:w="1"/><text x="86.1554%" y="303.50"></text></g><g><title>x64_sys_call (1 samples, 0.12%)</title><rect x="86.0382%" y="277" width="0.1193%" height="15" fill="rgb(216,164,2)" fg:x="721" fg:w="1"/><text x="86.1554%" y="287.50"></text></g><g><title>__x64_sys_mremap (1 samples, 0.12%)</title><rect x="86.0382%" y="261" width="0.1193%" height="15" fill="rgb(220,129,5)" fg:x="721" fg:w="1"/><text x="86.1554%" y="271.50"></text></g><g><title>__do_sys_mremap (1 samples, 0.12%)</title><rect x="86.0382%" y="245" width="0.1193%" height="15" fill="rgb(242,17,10)" fg:x="721" fg:w="1"/><text x="86.1554%" y="255.50"></text></g><g><title>move_vma (1 samples, 0.12%)</title><rect x="86.0382%" y="229" width="0.1193%" height="15" fill="rgb(242,107,0)" fg:x="721" fg:w="1"/><text x="86.1554%" y="239.50"></text></g><g><title>move_page_tables (1 samples, 0.12%)</title><rect x="86.0382%" y="213" width="0.1193%" height="15" fill="rgb(251,28,31)" fg:x="721" fg:w="1"/><text x="86.1554%" y="223.50"></text></g><g><title>move_ptes.constprop.0 (1 samples, 0.12%)</title><rect x="86.0382%" y="197" width="0.1193%" height="15" fill="rgb(233,223,10)" fg:x="721" fg:w="1"/><text x="86.1554%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.36%)</title><rect x="86.1575%" y="453" width="0.3580%" height="15" fill="rgb(215,21,27)" fg:x="722" fg:w="3"/><text x="86.2747%" y="463.50"></text></g><g><title>__rcu_read_lock (2 samples, 0.24%)</title><rect x="87.3508%" y="389" width="0.2387%" height="15" fill="rgb(232,23,21)" fg:x="732" fg:w="2"/><text x="87.4680%" y="399.50"></text></g><g><title>__count_memcg_events (1 samples, 0.12%)</title><rect x="87.5895%" y="373" width="0.1193%" height="15" fill="rgb(244,5,23)" fg:x="734" fg:w="1"/><text x="87.7067%" y="383.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.12%)</title><rect x="87.8282%" y="309" width="0.1193%" height="15" fill="rgb(226,81,46)" fg:x="736" fg:w="1"/><text x="87.9453%" y="319.50"></text></g><g><title>__folio_throttle_swaprate (2 samples, 0.24%)</title><rect x="87.8282%" y="325" width="0.2387%" height="15" fill="rgb(247,70,30)" fg:x="736" fg:w="2"/><text x="87.9453%" y="335.50"></text></g><g><title>kthread_blkcg (1 samples, 0.12%)</title><rect x="87.9475%" y="309" width="0.1193%" height="15" fill="rgb(212,68,19)" fg:x="737" fg:w="1"/><text x="88.0647%" y="319.50"></text></g><g><title>__rcu_read_unlock (3 samples, 0.36%)</title><rect x="88.1862%" y="309" width="0.3580%" height="15" fill="rgb(240,187,13)" fg:x="739" fg:w="3"/><text x="88.3033%" y="319.50"></text></g><g><title>__count_memcg_events (2 samples, 0.24%)</title><rect x="88.6635%" y="293" width="0.2387%" height="15" fill="rgb(223,113,26)" fg:x="743" fg:w="2"/><text x="88.7807%" y="303.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.24%)</title><rect x="88.6635%" y="277" width="0.2387%" height="15" fill="rgb(206,192,2)" fg:x="743" fg:w="2"/><text x="88.7807%" y="287.50"></text></g><g><title>charge_memcg (4 samples, 0.48%)</title><rect x="88.5442%" y="309" width="0.4773%" height="15" fill="rgb(241,108,4)" fg:x="742" fg:w="4"/><text x="88.6613%" y="319.50"></text></g><g><title>try_charge_memcg (1 samples, 0.12%)</title><rect x="88.9021%" y="293" width="0.1193%" height="15" fill="rgb(247,173,49)" fg:x="745" fg:w="1"/><text x="89.0193%" y="303.50"></text></g><g><title>__mem_cgroup_charge (12 samples, 1.43%)</title><rect x="88.0668%" y="325" width="1.4320%" height="15" fill="rgb(224,114,35)" fg:x="738" fg:w="12"/><text x="88.1840%" y="335.50">__m..</text></g><g><title>get_mem_cgroup_from_mm (4 samples, 0.48%)</title><rect x="89.0215%" y="309" width="0.4773%" height="15" fill="rgb(245,159,27)" fg:x="746" fg:w="4"/><text x="89.1387%" y="319.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.12%)</title><rect x="89.4988%" y="325" width="0.1193%" height="15" fill="rgb(245,172,44)" fg:x="750" fg:w="1"/><text x="89.6160%" y="335.50"></text></g><g><title>folio_add_lru_vma (5 samples, 0.60%)</title><rect x="89.6181%" y="325" width="0.5967%" height="15" fill="rgb(236,23,11)" fg:x="751" fg:w="5"/><text x="89.7353%" y="335.50"></text></g><g><title>folio_add_lru (4 samples, 0.48%)</title><rect x="89.7375%" y="309" width="0.4773%" height="15" fill="rgb(205,117,38)" fg:x="752" fg:w="4"/><text x="89.8547%" y="319.50"></text></g><g><title>folio_batch_move_lru (4 samples, 0.48%)</title><rect x="89.7375%" y="293" width="0.4773%" height="15" fill="rgb(237,72,25)" fg:x="752" fg:w="4"/><text x="89.8547%" y="303.50"></text></g><g><title>lru_add_fn (4 samples, 0.48%)</title><rect x="89.7375%" y="277" width="0.4773%" height="15" fill="rgb(244,70,9)" fg:x="752" fg:w="4"/><text x="89.8547%" y="287.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.24%)</title><rect x="89.9761%" y="261" width="0.2387%" height="15" fill="rgb(217,125,39)" fg:x="754" fg:w="2"/><text x="90.0933%" y="271.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.24%)</title><rect x="89.9761%" y="245" width="0.2387%" height="15" fill="rgb(235,36,10)" fg:x="754" fg:w="2"/><text x="90.0933%" y="255.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.24%)</title><rect x="89.9761%" y="229" width="0.2387%" height="15" fill="rgb(251,123,47)" fg:x="754" fg:w="2"/><text x="90.0933%" y="239.50"></text></g><g><title>clear_page_erms (2 samples, 0.24%)</title><rect x="90.3341%" y="261" width="0.2387%" height="15" fill="rgb(221,13,13)" fg:x="757" fg:w="2"/><text x="90.4513%" y="271.50"></text></g><g><title>do_user_addr_fault (31 samples, 3.70%)</title><rect x="87.1122%" y="405" width="3.6993%" height="15" fill="rgb(238,131,9)" fg:x="730" fg:w="31"/><text x="87.2294%" y="415.50">do_user_add..</text></g><g><title>handle_mm_fault (27 samples, 3.22%)</title><rect x="87.5895%" y="389" width="3.2220%" height="15" fill="rgb(211,50,8)" fg:x="734" fg:w="27"/><text x="87.7067%" y="399.50">handle_mm..</text></g><g><title>__handle_mm_fault (26 samples, 3.10%)</title><rect x="87.7088%" y="373" width="3.1026%" height="15" fill="rgb(245,182,24)" fg:x="735" fg:w="26"/><text x="87.8260%" y="383.50">__handle_..</text></g><g><title>handle_pte_fault (25 samples, 2.98%)</title><rect x="87.8282%" y="357" width="2.9833%" height="15" fill="rgb(242,14,37)" fg:x="736" fg:w="25"/><text x="87.9453%" y="367.50">handle_p..</text></g><g><title>do_anonymous_page (25 samples, 2.98%)</title><rect x="87.8282%" y="341" width="2.9833%" height="15" fill="rgb(246,228,12)" fg:x="736" fg:w="25"/><text x="87.9453%" y="351.50">do_anony..</text></g><g><title>vma_alloc_folio (5 samples, 0.60%)</title><rect x="90.2148%" y="325" width="0.5967%" height="15" fill="rgb(213,55,15)" fg:x="756" fg:w="5"/><text x="90.3320%" y="335.50"></text></g><g><title>__folio_alloc (5 samples, 0.60%)</title><rect x="90.2148%" y="309" width="0.5967%" height="15" fill="rgb(209,9,3)" fg:x="756" fg:w="5"/><text x="90.3320%" y="319.50"></text></g><g><title>__alloc_pages (5 samples, 0.60%)</title><rect x="90.2148%" y="293" width="0.5967%" height="15" fill="rgb(230,59,30)" fg:x="756" fg:w="5"/><text x="90.3320%" y="303.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.48%)</title><rect x="90.3341%" y="277" width="0.4773%" height="15" fill="rgb(209,121,21)" fg:x="757" fg:w="4"/><text x="90.4513%" y="287.50"></text></g><g><title>rmqueue (2 samples, 0.24%)</title><rect x="90.5728%" y="261" width="0.2387%" height="15" fill="rgb(220,109,13)" fg:x="759" fg:w="2"/><text x="90.6900%" y="271.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.12%)</title><rect x="90.6921%" y="245" width="0.1193%" height="15" fill="rgb(232,18,1)" fg:x="760" fg:w="1"/><text x="90.8093%" y="255.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.12%)</title><rect x="90.6921%" y="229" width="0.1193%" height="15" fill="rgb(215,41,42)" fg:x="760" fg:w="1"/><text x="90.8093%" y="239.50"></text></g><g><title>asm_exc_page_fault (32 samples, 3.82%)</title><rect x="87.1122%" y="437" width="3.8186%" height="15" fill="rgb(224,123,36)" fg:x="730" fg:w="32"/><text x="87.2294%" y="447.50">asm_exc_pag..</text></g><g><title>exc_page_fault (32 samples, 3.82%)</title><rect x="87.1122%" y="421" width="3.8186%" height="15" fill="rgb(240,125,3)" fg:x="730" fg:w="32"/><text x="87.2294%" y="431.50">exc_page_fa..</text></g><g><title>irqentry_exit (1 samples, 0.12%)</title><rect x="90.8115%" y="405" width="0.1193%" height="15" fill="rgb(205,98,50)" fg:x="761" fg:w="1"/><text x="90.9286%" y="415.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.12%)</title><rect x="90.8115%" y="389" width="0.1193%" height="15" fill="rgb(205,185,37)" fg:x="761" fg:w="1"/><text x="90.9286%" y="399.50"></text></g><g><title>error_entry (1 samples, 0.12%)</title><rect x="90.9308%" y="437" width="0.1193%" height="15" fill="rgb(238,207,15)" fg:x="762" fg:w="1"/><text x="91.0480%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (50 samples, 5.97%)</title><rect x="85.6802%" y="469" width="5.9666%" height="15" fill="rgb(213,199,42)" fg:x="718" fg:w="50"/><text x="85.7974%" y="479.50">alloc::vec::Vec&lt;T,A..</text></g><g><title>core::ptr::write (43 samples, 5.13%)</title><rect x="86.5155%" y="453" width="5.1313%" height="15" fill="rgb(235,201,11)" fg:x="725" fg:w="43"/><text x="86.6327%" y="463.50">core::ptr::write</text></g><g><title>sync_regs (5 samples, 0.60%)</title><rect x="91.0501%" y="437" width="0.5967%" height="15" fill="rgb(207,46,11)" fg:x="763" fg:w="5"/><text x="91.1673%" y="447.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (179 samples, 21.36%)</title><rect x="71.7184%" y="485" width="21.3604%" height="15" fill="rgb(241,35,35)" fg:x="601" fg:w="179"/><text x="71.8356%" y="495.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (12 samples, 1.43%)</title><rect x="91.6468%" y="469" width="1.4320%" height="15" fill="rgb(243,32,47)" fg:x="768" fg:w="12"/><text x="91.7640%" y="479.50">fri..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 0.60%)</title><rect x="93.0788%" y="485" width="0.5967%" height="15" fill="rgb(247,202,23)" fg:x="780" fg:w="5"/><text x="93.1959%" y="495.50"></text></g><g><title>page_remove_rmap (2 samples, 0.24%)</title><rect x="93.7947%" y="149" width="0.2387%" height="15" fill="rgb(219,102,11)" fg:x="786" fg:w="2"/><text x="93.9119%" y="159.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.12%)</title><rect x="93.9141%" y="133" width="0.1193%" height="15" fill="rgb(243,110,44)" fg:x="787" fg:w="1"/><text x="94.0313%" y="143.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.12%)</title><rect x="93.9141%" y="117" width="0.1193%" height="15" fill="rgb(222,74,54)" fg:x="787" fg:w="1"/><text x="94.0313%" y="127.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.12%)</title><rect x="93.9141%" y="101" width="0.1193%" height="15" fill="rgb(216,99,12)" fg:x="787" fg:w="1"/><text x="94.0313%" y="111.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.12%)</title><rect x="93.9141%" y="85" width="0.1193%" height="15" fill="rgb(226,22,26)" fg:x="787" fg:w="1"/><text x="94.0313%" y="95.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.12%)</title><rect x="94.0334%" y="85" width="0.1193%" height="15" fill="rgb(217,163,10)" fg:x="788" fg:w="1"/><text x="94.1506%" y="95.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.12%)</title><rect x="94.0334%" y="69" width="0.1193%" height="15" fill="rgb(213,25,53)" fg:x="788" fg:w="1"/><text x="94.1506%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::BinaryHeap&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (5 samples, 0.60%)</title><rect x="93.6754%" y="485" width="0.5967%" height="15" fill="rgb(252,105,26)" fg:x="785" fg:w="5"/><text x="93.7926%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (5 samples, 0.60%)</title><rect x="93.6754%" y="469" width="0.5967%" height="15" fill="rgb(220,39,43)" fg:x="785" fg:w="5"/><text x="93.7926%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (5 samples, 0.60%)</title><rect x="93.6754%" y="453" width="0.5967%" height="15" fill="rgb(229,68,48)" fg:x="785" fg:w="5"/><text x="93.7926%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.60%)</title><rect x="93.6754%" y="437" width="0.5967%" height="15" fill="rgb(252,8,32)" fg:x="785" fg:w="5"/><text x="93.7926%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.60%)</title><rect x="93.6754%" y="421" width="0.5967%" height="15" fill="rgb(223,20,43)" fg:x="785" fg:w="5"/><text x="93.7926%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.60%)</title><rect x="93.6754%" y="405" width="0.5967%" height="15" fill="rgb(229,81,49)" fg:x="785" fg:w="5"/><text x="93.7926%" y="415.50"></text></g><g><title>__GI___libc_free (5 samples, 0.60%)</title><rect x="93.6754%" y="389" width="0.5967%" height="15" fill="rgb(236,28,36)" fg:x="785" fg:w="5"/><text x="93.7926%" y="399.50"></text></g><g><title>__GI___munmap (5 samples, 0.60%)</title><rect x="93.6754%" y="373" width="0.5967%" height="15" fill="rgb(249,185,26)" fg:x="785" fg:w="5"/><text x="93.7926%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.60%)</title><rect x="93.6754%" y="357" width="0.5967%" height="15" fill="rgb(249,174,33)" fg:x="785" fg:w="5"/><text x="93.7926%" y="367.50"></text></g><g><title>do_syscall_64 (5 samples, 0.60%)</title><rect x="93.6754%" y="341" width="0.5967%" height="15" fill="rgb(233,201,37)" fg:x="785" fg:w="5"/><text x="93.7926%" y="351.50"></text></g><g><title>x64_sys_call (5 samples, 0.60%)</title><rect x="93.6754%" y="325" width="0.5967%" height="15" fill="rgb(221,78,26)" fg:x="785" fg:w="5"/><text x="93.7926%" y="335.50"></text></g><g><title>__x64_sys_munmap (5 samples, 0.60%)</title><rect x="93.6754%" y="309" width="0.5967%" height="15" fill="rgb(250,127,30)" fg:x="785" fg:w="5"/><text x="93.7926%" y="319.50"></text></g><g><title>__vm_munmap (5 samples, 0.60%)</title><rect x="93.6754%" y="293" width="0.5967%" height="15" fill="rgb(230,49,44)" fg:x="785" fg:w="5"/><text x="93.7926%" y="303.50"></text></g><g><title>do_vmi_munmap (5 samples, 0.60%)</title><rect x="93.6754%" y="277" width="0.5967%" height="15" fill="rgb(229,67,23)" fg:x="785" fg:w="5"/><text x="93.7926%" y="287.50"></text></g><g><title>do_vmi_align_munmap (5 samples, 0.60%)</title><rect x="93.6754%" y="261" width="0.5967%" height="15" fill="rgb(249,83,47)" fg:x="785" fg:w="5"/><text x="93.7926%" y="271.50"></text></g><g><title>unmap_region (5 samples, 0.60%)</title><rect x="93.6754%" y="245" width="0.5967%" height="15" fill="rgb(215,43,3)" fg:x="785" fg:w="5"/><text x="93.7926%" y="255.50"></text></g><g><title>unmap_vmas (5 samples, 0.60%)</title><rect x="93.6754%" y="229" width="0.5967%" height="15" fill="rgb(238,154,13)" fg:x="785" fg:w="5"/><text x="93.7926%" y="239.50"></text></g><g><title>unmap_single_vma (5 samples, 0.60%)</title><rect x="93.6754%" y="213" width="0.5967%" height="15" fill="rgb(219,56,2)" fg:x="785" fg:w="5"/><text x="93.7926%" y="223.50"></text></g><g><title>unmap_page_range (5 samples, 0.60%)</title><rect x="93.6754%" y="197" width="0.5967%" height="15" fill="rgb(233,0,4)" fg:x="785" fg:w="5"/><text x="93.7926%" y="207.50"></text></g><g><title>zap_pmd_range.isra.0 (5 samples, 0.60%)</title><rect x="93.6754%" y="181" width="0.5967%" height="15" fill="rgb(235,30,7)" fg:x="785" fg:w="5"/><text x="93.7926%" y="191.50"></text></g><g><title>zap_pte_range (5 samples, 0.60%)</title><rect x="93.6754%" y="165" width="0.5967%" height="15" fill="rgb(250,79,13)" fg:x="785" fg:w="5"/><text x="93.7926%" y="175.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.24%)</title><rect x="94.0334%" y="149" width="0.2387%" height="15" fill="rgb(211,146,34)" fg:x="788" fg:w="2"/><text x="94.1506%" y="159.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.24%)</title><rect x="94.0334%" y="133" width="0.2387%" height="15" fill="rgb(228,22,38)" fg:x="788" fg:w="2"/><text x="94.1506%" y="143.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.24%)</title><rect x="94.0334%" y="117" width="0.2387%" height="15" fill="rgb(235,168,5)" fg:x="788" fg:w="2"/><text x="94.1506%" y="127.50"></text></g><g><title>release_pages (2 samples, 0.24%)</title><rect x="94.0334%" y="101" width="0.2387%" height="15" fill="rgb(221,155,16)" fg:x="788" fg:w="2"/><text x="94.1506%" y="111.50"></text></g><g><title>free_unref_page_list (1 samples, 0.12%)</title><rect x="94.1527%" y="85" width="0.1193%" height="15" fill="rgb(215,215,53)" fg:x="789" fg:w="1"/><text x="94.2699%" y="95.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.12%)</title><rect x="94.1527%" y="69" width="0.1193%" height="15" fill="rgb(223,4,10)" fg:x="789" fg:w="1"/><text x="94.2699%" y="79.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.12%)</title><rect x="94.1527%" y="53" width="0.1193%" height="15" fill="rgb(234,103,6)" fg:x="789" fg:w="1"/><text x="94.2699%" y="63.50"></text></g><g><title>__free_one_page (1 samples, 0.12%)</title><rect x="94.1527%" y="37" width="0.1193%" height="15" fill="rgb(227,97,0)" fg:x="789" fg:w="1"/><text x="94.2699%" y="47.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (797 samples, 95.11%)</title><rect x="3.1026%" y="565" width="95.1074%" height="15" fill="rgb(234,150,53)" fg:x="26" fg:w="797"/><text x="3.2198%" y="575.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (797 samples, 95.11%)</title><rect x="3.1026%" y="549" width="95.1074%" height="15" fill="rgb(228,201,54)" fg:x="26" fg:w="797"/><text x="3.2198%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (797 samples, 95.11%)</title><rect x="3.1026%" y="533" width="95.1074%" height="15" fill="rgb(222,22,37)" fg:x="26" fg:w="797"/><text x="3.2198%" y="543.50">core::ops::function::FnOnce::call_once</text></g><g><title>fringe_vs_astar::main (797 samples, 95.11%)</title><rect x="3.1026%" y="517" width="95.1074%" height="15" fill="rgb(237,53,32)" fg:x="26" fg:w="797"/><text x="3.2198%" y="527.50">fringe_vs_astar::main</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (797 samples, 95.11%)</title><rect x="3.1026%" y="501" width="95.1074%" height="15" fill="rgb(233,25,53)" fg:x="26" fg:w="797"/><text x="3.2198%" y="511.50">fringe_vs_astar::pathfinder::a_star_simple</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple::_{{closure}} (33 samples, 3.94%)</title><rect x="94.2721%" y="485" width="3.9379%" height="15" fill="rgb(210,40,34)" fg:x="790" fg:w="33"/><text x="94.3893%" y="495.50">fringe_vs_as..</text></g><g><title>fringe_vs_astar::pathfinder::heuristic (30 samples, 3.58%)</title><rect x="94.6301%" y="469" width="3.5800%" height="15" fill="rgb(241,220,44)" fg:x="793" fg:w="30"/><text x="94.7473%" y="479.50">fringe_vs_..</text></g><g><title>_start (798 samples, 95.23%)</title><rect x="3.1026%" y="645" width="95.2267%" height="15" fill="rgb(235,28,35)" fg:x="26" fg:w="798"/><text x="3.2198%" y="655.50">_start</text></g><g><title>__libc_start_main_impl (798 samples, 95.23%)</title><rect x="3.1026%" y="629" width="95.2267%" height="15" fill="rgb(210,56,17)" fg:x="26" fg:w="798"/><text x="3.2198%" y="639.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (798 samples, 95.23%)</title><rect x="3.1026%" y="613" width="95.2267%" height="15" fill="rgb(224,130,29)" fg:x="26" fg:w="798"/><text x="3.2198%" y="623.50">__libc_start_call_main</text></g><g><title>main (798 samples, 95.23%)</title><rect x="3.1026%" y="597" width="95.2267%" height="15" fill="rgb(235,212,8)" fg:x="26" fg:w="798"/><text x="3.2198%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (798 samples, 95.23%)</title><rect x="3.1026%" y="581" width="95.2267%" height="15" fill="rgb(223,33,50)" fg:x="26" fg:w="798"/><text x="3.2198%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.12%)</title><rect x="98.2100%" y="565" width="0.1193%" height="15" fill="rgb(219,149,13)" fg:x="823" fg:w="1"/><text x="98.3272%" y="575.50"></text></g><g><title>__GI___sysconf (1 samples, 0.12%)</title><rect x="98.2100%" y="549" width="0.1193%" height="15" fill="rgb(250,156,29)" fg:x="823" fg:w="1"/><text x="98.3272%" y="559.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.12%)</title><rect x="98.2100%" y="533" width="0.1193%" height="15" fill="rgb(216,193,19)" fg:x="823" fg:w="1"/><text x="98.3272%" y="543.50"></text></g><g><title>exc_page_fault (1 samples, 0.12%)</title><rect x="98.2100%" y="517" width="0.1193%" height="15" fill="rgb(216,135,14)" fg:x="823" fg:w="1"/><text x="98.3272%" y="527.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.12%)</title><rect x="98.2100%" y="501" width="0.1193%" height="15" fill="rgb(241,47,5)" fg:x="823" fg:w="1"/><text x="98.3272%" y="511.50"></text></g><g><title>handle_mm_fault (1 samples, 0.12%)</title><rect x="98.2100%" y="485" width="0.1193%" height="15" fill="rgb(233,42,35)" fg:x="823" fg:w="1"/><text x="98.3272%" y="495.50"></text></g><g><title>count_memcg_events.constprop.0 (1 samples, 0.12%)</title><rect x="98.2100%" y="469" width="0.1193%" height="15" fill="rgb(231,13,6)" fg:x="823" fg:w="1"/><text x="98.3272%" y="479.50"></text></g><g><title>__count_memcg_events (1 samples, 0.12%)</title><rect x="98.2100%" y="453" width="0.1193%" height="15" fill="rgb(207,181,40)" fg:x="823" fg:w="1"/><text x="98.3272%" y="463.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.95%)</title><rect x="98.3294%" y="645" width="0.9547%" height="15" fill="rgb(254,173,49)" fg:x="824" fg:w="8"/><text x="98.4465%" y="655.50">a..</text></g><g><title>fringe-vs-astar (833 samples, 99.40%)</title><rect x="0.0000%" y="661" width="99.4033%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="833"/><text x="0.1172%" y="671.50">fringe-vs-astar</text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.12%)</title><rect x="99.2840%" y="645" width="0.1193%" height="15" fill="rgb(206,124,46)" fg:x="832" fg:w="1"/><text x="99.4012%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.12%)</title><rect x="99.2840%" y="629" width="0.1193%" height="15" fill="rgb(249,21,11)" fg:x="832" fg:w="1"/><text x="99.4012%" y="639.50"></text></g><g><title>x64_sys_call (1 samples, 0.12%)</title><rect x="99.2840%" y="613" width="0.1193%" height="15" fill="rgb(222,201,40)" fg:x="832" fg:w="1"/><text x="99.4012%" y="623.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.12%)</title><rect x="99.2840%" y="597" width="0.1193%" height="15" fill="rgb(235,61,29)" fg:x="832" fg:w="1"/><text x="99.4012%" y="607.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.12%)</title><rect x="99.2840%" y="581" width="0.1193%" height="15" fill="rgb(219,207,3)" fg:x="832" fg:w="1"/><text x="99.4012%" y="591.50"></text></g><g><title>bprm_execve (1 samples, 0.12%)</title><rect x="99.2840%" y="565" width="0.1193%" height="15" fill="rgb(222,56,46)" fg:x="832" fg:w="1"/><text x="99.4012%" y="575.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.12%)</title><rect x="99.2840%" y="549" width="0.1193%" height="15" fill="rgb(239,76,54)" fg:x="832" fg:w="1"/><text x="99.4012%" y="559.50"></text></g><g><title>exec_binprm (1 samples, 0.12%)</title><rect x="99.2840%" y="533" width="0.1193%" height="15" fill="rgb(231,124,27)" fg:x="832" fg:w="1"/><text x="99.4012%" y="543.50"></text></g><g><title>search_binary_handler (1 samples, 0.12%)</title><rect x="99.2840%" y="517" width="0.1193%" height="15" fill="rgb(249,195,6)" fg:x="832" fg:w="1"/><text x="99.4012%" y="527.50"></text></g><g><title>load_elf_binary (1 samples, 0.12%)</title><rect x="99.2840%" y="501" width="0.1193%" height="15" fill="rgb(237,174,47)" fg:x="832" fg:w="1"/><text x="99.4012%" y="511.50"></text></g><g><title>setup_arg_pages (1 samples, 0.12%)</title><rect x="99.2840%" y="485" width="0.1193%" height="15" fill="rgb(206,201,31)" fg:x="832" fg:w="1"/><text x="99.4012%" y="495.50"></text></g><g><title>mprotect_fixup (1 samples, 0.12%)</title><rect x="99.2840%" y="469" width="0.1193%" height="15" fill="rgb(231,57,52)" fg:x="832" fg:w="1"/><text x="99.4012%" y="479.50"></text></g><g><title>perf_event_mmap (1 samples, 0.12%)</title><rect x="99.2840%" y="453" width="0.1193%" height="15" fill="rgb(248,177,22)" fg:x="832" fg:w="1"/><text x="99.4012%" y="463.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.12%)</title><rect x="99.2840%" y="437" width="0.1193%" height="15" fill="rgb(215,211,37)" fg:x="832" fg:w="1"/><text x="99.4012%" y="447.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.12%)</title><rect x="99.2840%" y="421" width="0.1193%" height="15" fill="rgb(241,128,51)" fg:x="832" fg:w="1"/><text x="99.4012%" y="431.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.12%)</title><rect x="99.2840%" y="405" width="0.1193%" height="15" fill="rgb(227,165,31)" fg:x="832" fg:w="1"/><text x="99.4012%" y="415.50"></text></g><g><title>all (838 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(228,167,24)" fg:x="0" fg:w="838"/><text x="0.1172%" y="687.50"></text></g><g><title>perf-exec (5 samples, 0.60%)</title><rect x="99.4033%" y="661" width="0.5967%" height="15" fill="rgb(228,143,12)" fg:x="833" fg:w="5"/><text x="99.5205%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.60%)</title><rect x="99.4033%" y="645" width="0.5967%" height="15" fill="rgb(249,149,8)" fg:x="833" fg:w="5"/><text x="99.5205%" y="655.50"></text></g><g><title>do_syscall_64 (5 samples, 0.60%)</title><rect x="99.4033%" y="629" width="0.5967%" height="15" fill="rgb(243,35,44)" fg:x="833" fg:w="5"/><text x="99.5205%" y="639.50"></text></g><g><title>x64_sys_call (5 samples, 0.60%)</title><rect x="99.4033%" y="613" width="0.5967%" height="15" fill="rgb(246,89,9)" fg:x="833" fg:w="5"/><text x="99.5205%" y="623.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.60%)</title><rect x="99.4033%" y="597" width="0.5967%" height="15" fill="rgb(233,213,13)" fg:x="833" fg:w="5"/><text x="99.5205%" y="607.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.60%)</title><rect x="99.4033%" y="581" width="0.5967%" height="15" fill="rgb(233,141,41)" fg:x="833" fg:w="5"/><text x="99.5205%" y="591.50"></text></g><g><title>bprm_execve (5 samples, 0.60%)</title><rect x="99.4033%" y="565" width="0.5967%" height="15" fill="rgb(239,167,4)" fg:x="833" fg:w="5"/><text x="99.5205%" y="575.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.60%)</title><rect x="99.4033%" y="549" width="0.5967%" height="15" fill="rgb(209,217,16)" fg:x="833" fg:w="5"/><text x="99.5205%" y="559.50"></text></g><g><title>exec_binprm (5 samples, 0.60%)</title><rect x="99.4033%" y="533" width="0.5967%" height="15" fill="rgb(219,88,35)" fg:x="833" fg:w="5"/><text x="99.5205%" y="543.50"></text></g><g><title>search_binary_handler (5 samples, 0.60%)</title><rect x="99.4033%" y="517" width="0.5967%" height="15" fill="rgb(220,193,23)" fg:x="833" fg:w="5"/><text x="99.5205%" y="527.50"></text></g><g><title>load_elf_binary (5 samples, 0.60%)</title><rect x="99.4033%" y="501" width="0.5967%" height="15" fill="rgb(230,90,52)" fg:x="833" fg:w="5"/><text x="99.5205%" y="511.50"></text></g><g><title>begin_new_exec (5 samples, 0.60%)</title><rect x="99.4033%" y="485" width="0.5967%" height="15" fill="rgb(252,106,19)" fg:x="833" fg:w="5"/><text x="99.5205%" y="495.50"></text></g><g><title>perf_event_exec (5 samples, 0.60%)</title><rect x="99.4033%" y="469" width="0.5967%" height="15" fill="rgb(206,74,20)" fg:x="833" fg:w="5"/><text x="99.5205%" y="479.50"></text></g><g><title>perf_event_enable_on_exec (5 samples, 0.60%)</title><rect x="99.4033%" y="453" width="0.5967%" height="15" fill="rgb(230,138,44)" fg:x="833" fg:w="5"/><text x="99.5205%" y="463.50"></text></g><g><title>ctx_resched (5 samples, 0.60%)</title><rect x="99.4033%" y="437" width="0.5967%" height="15" fill="rgb(235,182,43)" fg:x="833" fg:w="5"/><text x="99.5205%" y="447.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.60%)</title><rect x="99.4033%" y="421" width="0.5967%" height="15" fill="rgb(242,16,51)" fg:x="833" fg:w="5"/><text x="99.5205%" y="431.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.60%)</title><rect x="99.4033%" y="405" width="0.5967%" height="15" fill="rgb(248,9,4)" fg:x="833" fg:w="5"/><text x="99.5205%" y="415.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.60%)</title><rect x="99.4033%" y="389" width="0.5967%" height="15" fill="rgb(210,31,22)" fg:x="833" fg:w="5"/><text x="99.5205%" y="399.50"></text></g><g><title>native_write_msr (5 samples, 0.60%)</title><rect x="99.4033%" y="373" width="0.5967%" height="15" fill="rgb(239,54,39)" fg:x="833" fg:w="5"/><text x="99.5205%" y="383.50"></text></g></svg></svg>