<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2560" height="758" onload="init(evt)" viewBox="0 0 2560 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2550" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2550" y="741.00"> </text><svg id="frames" x="10" width="2540" total_samples="32"><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="405" width="3.1250%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.1172%" y="415.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="389" width="3.1250%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.1172%" y="399.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="373" width="3.1250%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.1172%" y="383.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="357" width="3.1250%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.1172%" y="367.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="341" width="3.1250%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.1172%" y="351.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="325" width="3.1250%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.1172%" y="335.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;,core::option::IntoIter&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="309" width="3.1250%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.1172%" y="319.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="293" width="3.1250%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.1172%" y="303.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="277" width="3.1250%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.1172%" y="287.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="261" width="3.1250%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.1172%" y="271.50">core::ptr..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 3.12%)</title><rect x="0.0000%" y="245" width="3.1250%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.1172%" y="255.50">&lt;alloc::v..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;,alloc::alloc::Global&gt;&gt; (1 samples, 3.12%)</title><rect x="0.0000%" y="229" width="3.1250%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.1172%" y="239.50">core::ptr..</text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 3.12%)</title><rect x="0.0000%" y="213" width="3.1250%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.1172%" y="223.50">&lt;&lt;alloc::..</text></g><g><title>&lt;fringe_vs_astar::graph::AdjacencyGridGraph as fringe_vs_astar::graph::Graph&gt;::new (2 samples, 6.25%)</title><rect x="0.0000%" y="533" width="6.2500%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="2"/><text x="0.1172%" y="543.50">&lt;fringe_vs_astar::gr..</text></g><g><title>fringe_vs_astar::graph::generate_neighbors (2 samples, 6.25%)</title><rect x="0.0000%" y="517" width="6.2500%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="2"/><text x="0.1172%" y="527.50">fringe_vs_astar::gra..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 6.25%)</title><rect x="0.0000%" y="501" width="6.2500%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="2"/><text x="0.1172%" y="511.50">core::iter::traits::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 6.25%)</title><rect x="0.0000%" y="485" width="6.2500%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="2"/><text x="0.1172%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 6.25%)</title><rect x="0.0000%" y="469" width="6.2500%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="2"/><text x="0.1172%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 6.25%)</title><rect x="0.0000%" y="453" width="6.2500%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="2"/><text x="0.1172%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 6.25%)</title><rect x="0.0000%" y="437" width="6.2500%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="2"/><text x="0.1172%" y="447.50">&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 6.25%)</title><rect x="0.0000%" y="421" width="6.2500%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="2"/><text x="0.1172%" y="431.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>core::ptr::write (1 samples, 3.12%)</title><rect x="3.1250%" y="405" width="3.1250%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="3.2422%" y="415.50">core::ptr..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (1 samples, 3.12%)</title><rect x="6.2500%" y="517" width="3.1250%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="6.3672%" y="527.50">alloc::co..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 3.12%)</title><rect x="6.2500%" y="501" width="3.1250%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="6.3672%" y="511.50">alloc::ve..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 3.12%)</title><rect x="9.3750%" y="357" width="3.1250%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="9.4922%" y="367.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::dealloc (1 samples, 3.12%)</title><rect x="9.3750%" y="341" width="3.1250%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="9.4922%" y="351.50">alloc::al..</text></g><g><title>__GI___libc_free (1 samples, 3.12%)</title><rect x="9.3750%" y="325" width="3.1250%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="9.4922%" y="335.50">__GI___li..</text></g><g><title>_int_free (1 samples, 3.12%)</title><rect x="9.3750%" y="309" width="3.1250%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="9.4922%" y="319.50">_int_free</text></g><g><title>core::ptr::drop_in_place&lt;fringe_vs_astar::graph::AdjacencyGridGraph&gt; (2 samples, 6.25%)</title><rect x="9.3750%" y="517" width="6.2500%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="2"/><text x="9.4922%" y="527.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;((usize,usize),f32)&gt;&gt;&gt;&gt; (2 samples, 6.25%)</title><rect x="9.3750%" y="501" width="6.2500%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="2"/><text x="9.4922%" y="511.50">core::ptr::drop_in_p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 6.25%)</title><rect x="9.3750%" y="485" width="6.2500%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="2"/><text x="9.4922%" y="495.50">&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;((usize,usize),f32)&gt;&gt;]&gt; (2 samples, 6.25%)</title><rect x="9.3750%" y="469" width="6.2500%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="2"/><text x="9.4922%" y="479.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;((usize,usize),f32)&gt;&gt;&gt; (2 samples, 6.25%)</title><rect x="9.3750%" y="453" width="6.2500%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="2"/><text x="9.4922%" y="463.50">core::ptr::drop_in_p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 6.25%)</title><rect x="9.3750%" y="437" width="6.2500%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="2"/><text x="9.4922%" y="447.50">&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;((usize,usize),f32)&gt;]&gt; (2 samples, 6.25%)</title><rect x="9.3750%" y="421" width="6.2500%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="2"/><text x="9.4922%" y="431.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;((usize,usize),f32)&gt;&gt; (2 samples, 6.25%)</title><rect x="9.3750%" y="405" width="6.2500%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="2"/><text x="9.4922%" y="415.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;((usize,usize),f32)&gt;&gt; (2 samples, 6.25%)</title><rect x="9.3750%" y="389" width="6.2500%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="2"/><text x="9.4922%" y="399.50">core::ptr::drop_in_p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 6.25%)</title><rect x="9.3750%" y="373" width="6.2500%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="2"/><text x="9.4922%" y="383.50">&lt;alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 3.12%)</title><rect x="12.5000%" y="357" width="3.1250%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="12.6172%" y="367.50">alloc::ra..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 3.12%)</title><rect x="12.5000%" y="341" width="3.1250%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="12.6172%" y="351.50">core::num..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (2 samples, 6.25%)</title><rect x="18.7500%" y="405" width="6.2500%" height="15" fill="rgb(231,60,39)" fg:x="6" fg:w="2"/><text x="18.8672%" y="415.50">core::cmp::impls::&lt;i..</text></g><g><title>core::cmp::PartialOrd::le (2 samples, 6.25%)</title><rect x="18.7500%" y="389" width="6.2500%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="2"/><text x="18.8672%" y="399.50">core::cmp::PartialOr..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_range (3 samples, 9.38%)</title><rect x="18.7500%" y="421" width="9.3750%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="3"/><text x="18.8672%" y="431.50">alloc::collections::binary_heap..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (1 samples, 3.12%)</title><rect x="25.0000%" y="405" width="3.1250%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="25.1172%" y="415.50">core::ptr..</text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 3.12%)</title><rect x="25.0000%" y="389" width="3.1250%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="25.1172%" y="399.50">&lt;alloc::c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 3.12%)</title><rect x="25.0000%" y="373" width="3.1250%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="25.1172%" y="383.50">core::int..</text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T,A&gt;&gt;&gt;::from (5 samples, 15.62%)</title><rect x="15.6250%" y="469" width="15.6250%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="5"/><text x="15.7422%" y="479.50">&lt;alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt; as c..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::rebuild (5 samples, 15.62%)</title><rect x="15.6250%" y="453" width="15.6250%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="5"/><text x="15.7422%" y="463.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::rebu..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down (4 samples, 12.50%)</title><rect x="18.7500%" y="437" width="12.5000%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="4"/><text x="18.8672%" y="447.50">alloc::collections::binary_heap::BinaryHeap..</text></g><g><title>fringe_vs_astar::pathfinder::modify_heap (1 samples, 3.12%)</title><rect x="28.1250%" y="421" width="3.1250%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="28.2422%" y="431.50">fringe_vs..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.12%)</title><rect x="31.2500%" y="325" width="3.1250%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="1"/><text x="31.3672%" y="335.50">&lt;core::sl..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 3.12%)</title><rect x="31.2500%" y="309" width="3.1250%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="31.3672%" y="319.50">&lt;core::pt..</text></g><g><title>&lt;alloc::collections::binary_heap::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 12.50%)</title><rect x="31.2500%" y="357" width="12.5000%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="4"/><text x="31.3672%" y="367.50">&lt;alloc::collections::binary_heap::Drain&lt;T,A..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 12.50%)</title><rect x="31.2500%" y="341" width="12.5000%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="4"/><text x="31.3672%" y="351.50">&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ite..</text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 9.38%)</title><rect x="34.3750%" y="325" width="9.3750%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="3"/><text x="34.4922%" y="335.50">core::option::Option&lt;T&gt;::map</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 15.62%)</title><rect x="31.2500%" y="373" width="15.6250%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="5"/><text x="31.3672%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::tr..</text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 3.12%)</title><rect x="43.7500%" y="357" width="3.1250%" height="15" fill="rgb(217,147,25)" fg:x="14" fg:w="1"/><text x="43.8672%" y="367.50">core::opt..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 3.12%)</title><rect x="43.7500%" y="341" width="3.1250%" height="15" fill="rgb(247,81,37)" fg:x="14" fg:w="1"/><text x="43.8672%" y="351.50">core::ops..</text></g><g><title>fringe_vs_astar::pathfinder::modify_heap::_{{closure}} (1 samples, 3.12%)</title><rect x="43.7500%" y="325" width="3.1250%" height="15" fill="rgb(209,12,38)" fg:x="14" fg:w="1"/><text x="43.8672%" y="335.50">fringe_vs..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 3.12%)</title><rect x="43.7500%" y="309" width="3.1250%" height="15" fill="rgb(227,1,9)" fg:x="14" fg:w="1"/><text x="43.8672%" y="319.50">core::tup..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (14 samples, 43.75%)</title><rect x="6.2500%" y="533" width="43.7500%" height="15" fill="rgb(248,47,43)" fg:x="2" fg:w="14"/><text x="6.3672%" y="543.50">fringe_vs_astar::pathfinder::a_star_simple</text></g><g><title>fringe_vs_astar::pathfinder::modify_heap (11 samples, 34.38%)</title><rect x="15.6250%" y="517" width="34.3750%" height="15" fill="rgb(221,10,30)" fg:x="5" fg:w="11"/><text x="15.7422%" y="527.50">fringe_vs_astar::pathfinder::modify_heap</text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 34.38%)</title><rect x="15.6250%" y="501" width="34.3750%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="11"/><text x="15.7422%" y="511.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 34.38%)</title><rect x="15.6250%" y="485" width="34.3750%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="11"/><text x="15.7422%" y="495.50">&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 18.75%)</title><rect x="31.2500%" y="469" width="18.7500%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="6"/><text x="31.3672%" y="479.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 18.75%)</title><rect x="31.2500%" y="453" width="18.7500%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="6"/><text x="31.3672%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 18.75%)</title><rect x="31.2500%" y="437" width="18.7500%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="6"/><text x="31.3672%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 18.75%)</title><rect x="31.2500%" y="421" width="18.7500%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="6"/><text x="31.3672%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFro..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 18.75%)</title><rect x="31.2500%" y="405" width="18.7500%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="6"/><text x="31.3672%" y="415.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6 samples, 18.75%)</title><rect x="31.2500%" y="389" width="18.7500%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="6"/><text x="31.3672%" y="399.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (1 samples, 3.12%)</title><rect x="46.8750%" y="373" width="3.1250%" height="15" fill="rgb(216,154,8)" fg:x="15" fg:w="1"/><text x="46.9922%" y="383.50">core::ptr..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 3.12%)</title><rect x="50.0000%" y="533" width="3.1250%" height="15" fill="rgb(244,35,45)" fg:x="16" fg:w="1"/><text x="50.1172%" y="543.50">std::coll..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1 samples, 3.12%)</title><rect x="50.0000%" y="517" width="3.1250%" height="15" fill="rgb(251,115,12)" fg:x="16" fg:w="1"/><text x="50.1172%" y="527.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 3.12%)</title><rect x="50.0000%" y="501" width="3.1250%" height="15" fill="rgb(240,54,50)" fg:x="16" fg:w="1"/><text x="50.1172%" y="511.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 3.12%)</title><rect x="50.0000%" y="485" width="3.1250%" height="15" fill="rgb(233,84,52)" fg:x="16" fg:w="1"/><text x="50.1172%" y="495.50">hashbrown..</text></g><g><title>hashbrown::map::make_hash (1 samples, 3.12%)</title><rect x="50.0000%" y="469" width="3.1250%" height="15" fill="rgb(207,117,47)" fg:x="16" fg:w="1"/><text x="50.1172%" y="479.50">hashbrown..</text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 3.12%)</title><rect x="50.0000%" y="453" width="3.1250%" height="15" fill="rgb(249,43,39)" fg:x="16" fg:w="1"/><text x="50.1172%" y="463.50">core::has..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 3.12%)</title><rect x="50.0000%" y="437" width="3.1250%" height="15" fill="rgb(209,38,44)" fg:x="16" fg:w="1"/><text x="50.1172%" y="447.50">&lt;std::has..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 3.12%)</title><rect x="50.0000%" y="421" width="3.1250%" height="15" fill="rgb(236,212,23)" fg:x="16" fg:w="1"/><text x="50.1172%" y="431.50">&lt;core::ha..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 3.12%)</title><rect x="50.0000%" y="405" width="3.1250%" height="15" fill="rgb(242,79,21)" fg:x="16" fg:w="1"/><text x="50.1172%" y="415.50">&lt;core::ha..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 3.12%)</title><rect x="50.0000%" y="389" width="3.1250%" height="15" fill="rgb(211,96,35)" fg:x="16" fg:w="1"/><text x="50.1172%" y="399.50">&lt;core::ha..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 3.12%)</title><rect x="50.0000%" y="373" width="3.1250%" height="15" fill="rgb(253,215,40)" fg:x="16" fg:w="1"/><text x="50.1172%" y="383.50">core::num..</text></g><g><title>process_output_block (2 samples, 6.25%)</title><rect x="53.1250%" y="181" width="6.2500%" height="15" fill="rgb(211,81,21)" fg:x="17" fg:w="2"/><text x="53.2422%" y="191.50">process_output_block</text></g><g><title>pty_write (2 samples, 6.25%)</title><rect x="53.1250%" y="165" width="6.2500%" height="15" fill="rgb(208,190,38)" fg:x="17" fg:w="2"/><text x="53.2422%" y="175.50">pty_write</text></g><g><title>tty_insert_flip_string_and_push_buffer (2 samples, 6.25%)</title><rect x="53.1250%" y="149" width="6.2500%" height="15" fill="rgb(235,213,38)" fg:x="17" fg:w="2"/><text x="53.2422%" y="159.50">tty_insert_flip_stri..</text></g><g><title>queue_work_on (2 samples, 6.25%)</title><rect x="53.1250%" y="133" width="6.2500%" height="15" fill="rgb(237,122,38)" fg:x="17" fg:w="2"/><text x="53.2422%" y="143.50">queue_work_on</text></g><g><title>__queue_work (2 samples, 6.25%)</title><rect x="53.1250%" y="117" width="6.2500%" height="15" fill="rgb(244,218,35)" fg:x="17" fg:w="2"/><text x="53.2422%" y="127.50">__queue_work</text></g><g><title>wake_up_process (2 samples, 6.25%)</title><rect x="53.1250%" y="101" width="6.2500%" height="15" fill="rgb(240,68,47)" fg:x="17" fg:w="2"/><text x="53.2422%" y="111.50">wake_up_process</text></g><g><title>try_to_wake_up (2 samples, 6.25%)</title><rect x="53.1250%" y="85" width="6.2500%" height="15" fill="rgb(210,16,53)" fg:x="17" fg:w="2"/><text x="53.2422%" y="95.50">try_to_wake_up</text></g><g><title>ttwu_queue_wakelist (2 samples, 6.25%)</title><rect x="53.1250%" y="69" width="6.2500%" height="15" fill="rgb(235,124,12)" fg:x="17" fg:w="2"/><text x="53.2422%" y="79.50">ttwu_queue_wakelist</text></g><g><title>llist_add_batch (1 samples, 3.12%)</title><rect x="56.2500%" y="53" width="3.1250%" height="15" fill="rgb(224,169,11)" fg:x="18" fg:w="1"/><text x="56.3672%" y="63.50">llist_add..</text></g><g><title>_start (24 samples, 75.00%)</title><rect x="0.0000%" y="677" width="75.0000%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="24"/><text x="0.1172%" y="687.50">_start</text></g><g><title>__libc_start_main_impl (24 samples, 75.00%)</title><rect x="0.0000%" y="661" width="75.0000%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="24"/><text x="0.1172%" y="671.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (24 samples, 75.00%)</title><rect x="0.0000%" y="645" width="75.0000%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="24"/><text x="0.1172%" y="655.50">__libc_start_call_main</text></g><g><title>main (24 samples, 75.00%)</title><rect x="0.0000%" y="629" width="75.0000%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="24"/><text x="0.1172%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (24 samples, 75.00%)</title><rect x="0.0000%" y="613" width="75.0000%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="24"/><text x="0.1172%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (24 samples, 75.00%)</title><rect x="0.0000%" y="597" width="75.0000%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="24"/><text x="0.1172%" y="607.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 75.00%)</title><rect x="0.0000%" y="581" width="75.0000%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="24"/><text x="0.1172%" y="591.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 75.00%)</title><rect x="0.0000%" y="565" width="75.0000%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="24"/><text x="0.1172%" y="575.50">core::ops::function::FnOnce::call_once</text></g><g><title>fringe_vs_astar::main (24 samples, 75.00%)</title><rect x="0.0000%" y="549" width="75.0000%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="24"/><text x="0.1172%" y="559.50">fringe_vs_astar::main</text></g><g><title>std::io::stdio::_print (7 samples, 21.88%)</title><rect x="53.1250%" y="533" width="21.8750%" height="15" fill="rgb(220,129,5)" fg:x="17" fg:w="7"/><text x="53.2422%" y="543.50">std::io::stdio::_print</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 21.88%)</title><rect x="53.1250%" y="517" width="21.8750%" height="15" fill="rgb(242,17,10)" fg:x="17" fg:w="7"/><text x="53.2422%" y="527.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>core::fmt::write (7 samples, 21.88%)</title><rect x="53.1250%" y="501" width="21.8750%" height="15" fill="rgb(242,107,0)" fg:x="17" fg:w="7"/><text x="53.2422%" y="511.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (7 samples, 21.88%)</title><rect x="53.1250%" y="485" width="21.8750%" height="15" fill="rgb(251,28,31)" fg:x="17" fg:w="7"/><text x="53.2422%" y="495.50">core::fmt::rt::Argument::fmt</text></g><g><title>&lt;fringe_vs_astar::map::GridMap as core::fmt::Display&gt;::fmt (7 samples, 21.88%)</title><rect x="53.1250%" y="469" width="21.8750%" height="15" fill="rgb(233,223,10)" fg:x="17" fg:w="7"/><text x="53.2422%" y="479.50">&lt;fringe_vs_astar::map::GridMap as core::fmt::Display&gt;::fmt</text></g><g><title>core::fmt::Formatter::write_fmt (7 samples, 21.88%)</title><rect x="53.1250%" y="453" width="21.8750%" height="15" fill="rgb(215,21,27)" fg:x="17" fg:w="7"/><text x="53.2422%" y="463.50">core::fmt::Formatter::write_fmt</text></g><g><title>core::fmt::write (7 samples, 21.88%)</title><rect x="53.1250%" y="437" width="21.8750%" height="15" fill="rgb(232,23,21)" fg:x="17" fg:w="7"/><text x="53.2422%" y="447.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (7 samples, 21.88%)</title><rect x="53.1250%" y="421" width="21.8750%" height="15" fill="rgb(244,5,23)" fg:x="17" fg:w="7"/><text x="53.2422%" y="431.50">core::fmt::rt::Argument::fmt</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 21.88%)</title><rect x="53.1250%" y="405" width="21.8750%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="7"/><text x="53.2422%" y="415.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 21.88%)</title><rect x="53.1250%" y="389" width="21.8750%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="7"/><text x="53.2422%" y="399.50">&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (7 samples, 21.88%)</title><rect x="53.1250%" y="373" width="21.8750%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="7"/><text x="53.2422%" y="383.50">&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all</text></g><g><title>__GI___libc_write (7 samples, 21.88%)</title><rect x="53.1250%" y="357" width="21.8750%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="7"/><text x="53.2422%" y="367.50">__GI___libc_write</text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 21.88%)</title><rect x="53.1250%" y="341" width="21.8750%" height="15" fill="rgb(223,113,26)" fg:x="17" fg:w="7"/><text x="53.2422%" y="351.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (7 samples, 21.88%)</title><rect x="53.1250%" y="325" width="21.8750%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="7"/><text x="53.2422%" y="335.50">do_syscall_64</text></g><g><title>x64_sys_call (7 samples, 21.88%)</title><rect x="53.1250%" y="309" width="21.8750%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="7"/><text x="53.2422%" y="319.50">x64_sys_call</text></g><g><title>__x64_sys_write (7 samples, 21.88%)</title><rect x="53.1250%" y="293" width="21.8750%" height="15" fill="rgb(247,173,49)" fg:x="17" fg:w="7"/><text x="53.2422%" y="303.50">__x64_sys_write</text></g><g><title>ksys_write (7 samples, 21.88%)</title><rect x="53.1250%" y="277" width="21.8750%" height="15" fill="rgb(224,114,35)" fg:x="17" fg:w="7"/><text x="53.2422%" y="287.50">ksys_write</text></g><g><title>vfs_write (7 samples, 21.88%)</title><rect x="53.1250%" y="261" width="21.8750%" height="15" fill="rgb(245,159,27)" fg:x="17" fg:w="7"/><text x="53.2422%" y="271.50">vfs_write</text></g><g><title>tty_write (7 samples, 21.88%)</title><rect x="53.1250%" y="245" width="21.8750%" height="15" fill="rgb(245,172,44)" fg:x="17" fg:w="7"/><text x="53.2422%" y="255.50">tty_write</text></g><g><title>file_tty_write.constprop.0 (7 samples, 21.88%)</title><rect x="53.1250%" y="229" width="21.8750%" height="15" fill="rgb(236,23,11)" fg:x="17" fg:w="7"/><text x="53.2422%" y="239.50">file_tty_write.constprop.0</text></g><g><title>do_tty_write (7 samples, 21.88%)</title><rect x="53.1250%" y="213" width="21.8750%" height="15" fill="rgb(205,117,38)" fg:x="17" fg:w="7"/><text x="53.2422%" y="223.50">do_tty_write</text></g><g><title>n_tty_write (7 samples, 21.88%)</title><rect x="53.1250%" y="197" width="21.8750%" height="15" fill="rgb(237,72,25)" fg:x="17" fg:w="7"/><text x="53.2422%" y="207.50">n_tty_write</text></g><g><title>wait_woken (5 samples, 15.62%)</title><rect x="59.3750%" y="181" width="15.6250%" height="15" fill="rgb(244,70,9)" fg:x="19" fg:w="5"/><text x="59.4922%" y="191.50">wait_woken</text></g><g><title>schedule_timeout (5 samples, 15.62%)</title><rect x="59.3750%" y="165" width="15.6250%" height="15" fill="rgb(217,125,39)" fg:x="19" fg:w="5"/><text x="59.4922%" y="175.50">schedule_timeout</text></g><g><title>schedule (5 samples, 15.62%)</title><rect x="59.3750%" y="149" width="15.6250%" height="15" fill="rgb(235,36,10)" fg:x="19" fg:w="5"/><text x="59.4922%" y="159.50">schedule</text></g><g><title>__schedule (5 samples, 15.62%)</title><rect x="59.3750%" y="133" width="15.6250%" height="15" fill="rgb(251,123,47)" fg:x="19" fg:w="5"/><text x="59.4922%" y="143.50">__schedule</text></g><g><title>finish_task_switch.isra.0 (5 samples, 15.62%)</title><rect x="59.3750%" y="117" width="15.6250%" height="15" fill="rgb(221,13,13)" fg:x="19" fg:w="5"/><text x="59.4922%" y="127.50">finish_task_switch.isra.0</text></g><g><title>__perf_event_task_sched_in (5 samples, 15.62%)</title><rect x="59.3750%" y="101" width="15.6250%" height="15" fill="rgb(238,131,9)" fg:x="19" fg:w="5"/><text x="59.4922%" y="111.50">__perf_event_task_sched_in</text></g><g><title>perf_ctx_enable (5 samples, 15.62%)</title><rect x="59.3750%" y="85" width="15.6250%" height="15" fill="rgb(211,50,8)" fg:x="19" fg:w="5"/><text x="59.4922%" y="95.50">perf_ctx_enable</text></g><g><title>x86_pmu_enable (5 samples, 15.62%)</title><rect x="59.3750%" y="69" width="15.6250%" height="15" fill="rgb(245,182,24)" fg:x="19" fg:w="5"/><text x="59.4922%" y="79.50">x86_pmu_enable</text></g><g><title>intel_pmu_enable_all (5 samples, 15.62%)</title><rect x="59.3750%" y="53" width="15.6250%" height="15" fill="rgb(242,14,37)" fg:x="19" fg:w="5"/><text x="59.4922%" y="63.50">intel_pmu_enable_all</text></g><g><title>native_write_msr (5 samples, 15.62%)</title><rect x="59.3750%" y="37" width="15.6250%" height="15" fill="rgb(246,228,12)" fg:x="19" fg:w="5"/><text x="59.4922%" y="47.50">native_write_msr</text></g><g><title>asm_exc_page_fault (1 samples, 3.12%)</title><rect x="75.0000%" y="677" width="3.1250%" height="15" fill="rgb(213,55,15)" fg:x="24" fg:w="1"/><text x="75.1172%" y="687.50">asm_exc_p..</text></g><g><title>__x64_sys_execve (1 samples, 3.12%)</title><rect x="78.1250%" y="629" width="3.1250%" height="15" fill="rgb(209,9,3)" fg:x="25" fg:w="1"/><text x="78.2422%" y="639.50">__x64_sys..</text></g><g><title>do_execveat_common.isra.0 (1 samples, 3.12%)</title><rect x="78.1250%" y="613" width="3.1250%" height="15" fill="rgb(230,59,30)" fg:x="25" fg:w="1"/><text x="78.2422%" y="623.50">do_execve..</text></g><g><title>bprm_execve (1 samples, 3.12%)</title><rect x="78.1250%" y="597" width="3.1250%" height="15" fill="rgb(209,121,21)" fg:x="25" fg:w="1"/><text x="78.2422%" y="607.50">bprm_exec..</text></g><g><title>bprm_execve.part.0 (1 samples, 3.12%)</title><rect x="78.1250%" y="581" width="3.1250%" height="15" fill="rgb(220,109,13)" fg:x="25" fg:w="1"/><text x="78.2422%" y="591.50">bprm_exec..</text></g><g><title>exec_binprm (1 samples, 3.12%)</title><rect x="78.1250%" y="565" width="3.1250%" height="15" fill="rgb(232,18,1)" fg:x="25" fg:w="1"/><text x="78.2422%" y="575.50">exec_binp..</text></g><g><title>search_binary_handler (1 samples, 3.12%)</title><rect x="78.1250%" y="549" width="3.1250%" height="15" fill="rgb(215,41,42)" fg:x="25" fg:w="1"/><text x="78.2422%" y="559.50">search_bi..</text></g><g><title>load_elf_binary (1 samples, 3.12%)</title><rect x="78.1250%" y="533" width="3.1250%" height="15" fill="rgb(224,123,36)" fg:x="25" fg:w="1"/><text x="78.2422%" y="543.50">load_elf_..</text></g><g><title>setup_arg_pages (1 samples, 3.12%)</title><rect x="78.1250%" y="517" width="3.1250%" height="15" fill="rgb(240,125,3)" fg:x="25" fg:w="1"/><text x="78.2422%" y="527.50">setup_arg..</text></g><g><title>shift_arg_pages (1 samples, 3.12%)</title><rect x="78.1250%" y="501" width="3.1250%" height="15" fill="rgb(205,98,50)" fg:x="25" fg:w="1"/><text x="78.2422%" y="511.50">shift_arg..</text></g><g><title>mas_store_prealloc (1 samples, 3.12%)</title><rect x="78.1250%" y="485" width="3.1250%" height="15" fill="rgb(205,185,37)" fg:x="25" fg:w="1"/><text x="78.2422%" y="495.50">mas_store..</text></g><g><title>fringe-vs-astar (27 samples, 84.38%)</title><rect x="0.0000%" y="693" width="84.3750%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="27"/><text x="0.1172%" y="703.50">fringe-vs-astar</text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 6.25%)</title><rect x="78.1250%" y="677" width="6.2500%" height="15" fill="rgb(213,199,42)" fg:x="25" fg:w="2"/><text x="78.2422%" y="687.50">entry_SYSCALL_64_aft..</text></g><g><title>do_syscall_64 (2 samples, 6.25%)</title><rect x="78.1250%" y="661" width="6.2500%" height="15" fill="rgb(235,201,11)" fg:x="25" fg:w="2"/><text x="78.2422%" y="671.50">do_syscall_64</text></g><g><title>x64_sys_call (2 samples, 6.25%)</title><rect x="78.1250%" y="645" width="6.2500%" height="15" fill="rgb(207,46,11)" fg:x="25" fg:w="2"/><text x="78.2422%" y="655.50">x64_sys_call</text></g><g><title>__x64_sys_exit_group (1 samples, 3.12%)</title><rect x="81.2500%" y="629" width="3.1250%" height="15" fill="rgb(241,35,35)" fg:x="26" fg:w="1"/><text x="81.3672%" y="639.50">__x64_sys..</text></g><g><title>do_group_exit (1 samples, 3.12%)</title><rect x="81.2500%" y="613" width="3.1250%" height="15" fill="rgb(243,32,47)" fg:x="26" fg:w="1"/><text x="81.3672%" y="623.50">do_group_..</text></g><g><title>do_exit (1 samples, 3.12%)</title><rect x="81.2500%" y="597" width="3.1250%" height="15" fill="rgb(247,202,23)" fg:x="26" fg:w="1"/><text x="81.3672%" y="607.50">do_exit</text></g><g><title>exit_mm (1 samples, 3.12%)</title><rect x="81.2500%" y="581" width="3.1250%" height="15" fill="rgb(219,102,11)" fg:x="26" fg:w="1"/><text x="81.3672%" y="591.50">exit_mm</text></g><g><title>mmput (1 samples, 3.12%)</title><rect x="81.2500%" y="565" width="3.1250%" height="15" fill="rgb(243,110,44)" fg:x="26" fg:w="1"/><text x="81.3672%" y="575.50">mmput</text></g><g><title>__mmput (1 samples, 3.12%)</title><rect x="81.2500%" y="549" width="3.1250%" height="15" fill="rgb(222,74,54)" fg:x="26" fg:w="1"/><text x="81.3672%" y="559.50">__mmput</text></g><g><title>exit_mmap (1 samples, 3.12%)</title><rect x="81.2500%" y="533" width="3.1250%" height="15" fill="rgb(216,99,12)" fg:x="26" fg:w="1"/><text x="81.3672%" y="543.50">exit_mmap</text></g><g><title>unmap_vmas (1 samples, 3.12%)</title><rect x="81.2500%" y="517" width="3.1250%" height="15" fill="rgb(226,22,26)" fg:x="26" fg:w="1"/><text x="81.3672%" y="527.50">unmap_vmas</text></g><g><title>unmap_single_vma (1 samples, 3.12%)</title><rect x="81.2500%" y="501" width="3.1250%" height="15" fill="rgb(217,163,10)" fg:x="26" fg:w="1"/><text x="81.3672%" y="511.50">unmap_sin..</text></g><g><title>unmap_page_range (1 samples, 3.12%)</title><rect x="81.2500%" y="485" width="3.1250%" height="15" fill="rgb(213,25,53)" fg:x="26" fg:w="1"/><text x="81.3672%" y="495.50">unmap_pag..</text></g><g><title>zap_pmd_range.isra.0 (1 samples, 3.12%)</title><rect x="81.2500%" y="469" width="3.1250%" height="15" fill="rgb(252,105,26)" fg:x="26" fg:w="1"/><text x="81.3672%" y="479.50">zap_pmd_r..</text></g><g><title>_compound_head (1 samples, 3.12%)</title><rect x="81.2500%" y="453" width="3.1250%" height="15" fill="rgb(220,39,43)" fg:x="26" fg:w="1"/><text x="81.3672%" y="463.50">_compound..</text></g><g><title>all (32 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="32"/><text x="0.1172%" y="719.50"></text></g><g><title>perf-exec (5 samples, 15.62%)</title><rect x="84.3750%" y="693" width="15.6250%" height="15" fill="rgb(252,8,32)" fg:x="27" fg:w="5"/><text x="84.4922%" y="703.50">perf-exec</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 15.62%)</title><rect x="84.3750%" y="677" width="15.6250%" height="15" fill="rgb(223,20,43)" fg:x="27" fg:w="5"/><text x="84.4922%" y="687.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (5 samples, 15.62%)</title><rect x="84.3750%" y="661" width="15.6250%" height="15" fill="rgb(229,81,49)" fg:x="27" fg:w="5"/><text x="84.4922%" y="671.50">do_syscall_64</text></g><g><title>x64_sys_call (5 samples, 15.62%)</title><rect x="84.3750%" y="645" width="15.6250%" height="15" fill="rgb(236,28,36)" fg:x="27" fg:w="5"/><text x="84.4922%" y="655.50">x64_sys_call</text></g><g><title>__x64_sys_execve (5 samples, 15.62%)</title><rect x="84.3750%" y="629" width="15.6250%" height="15" fill="rgb(249,185,26)" fg:x="27" fg:w="5"/><text x="84.4922%" y="639.50">__x64_sys_execve</text></g><g><title>do_execveat_common.isra.0 (5 samples, 15.62%)</title><rect x="84.3750%" y="613" width="15.6250%" height="15" fill="rgb(249,174,33)" fg:x="27" fg:w="5"/><text x="84.4922%" y="623.50">do_execveat_common.isra.0</text></g><g><title>bprm_execve (5 samples, 15.62%)</title><rect x="84.3750%" y="597" width="15.6250%" height="15" fill="rgb(233,201,37)" fg:x="27" fg:w="5"/><text x="84.4922%" y="607.50">bprm_execve</text></g><g><title>bprm_execve.part.0 (5 samples, 15.62%)</title><rect x="84.3750%" y="581" width="15.6250%" height="15" fill="rgb(221,78,26)" fg:x="27" fg:w="5"/><text x="84.4922%" y="591.50">bprm_execve.part.0</text></g><g><title>exec_binprm (5 samples, 15.62%)</title><rect x="84.3750%" y="565" width="15.6250%" height="15" fill="rgb(250,127,30)" fg:x="27" fg:w="5"/><text x="84.4922%" y="575.50">exec_binprm</text></g><g><title>search_binary_handler (5 samples, 15.62%)</title><rect x="84.3750%" y="549" width="15.6250%" height="15" fill="rgb(230,49,44)" fg:x="27" fg:w="5"/><text x="84.4922%" y="559.50">search_binary_handler</text></g><g><title>load_elf_binary (5 samples, 15.62%)</title><rect x="84.3750%" y="533" width="15.6250%" height="15" fill="rgb(229,67,23)" fg:x="27" fg:w="5"/><text x="84.4922%" y="543.50">load_elf_binary</text></g><g><title>begin_new_exec (5 samples, 15.62%)</title><rect x="84.3750%" y="517" width="15.6250%" height="15" fill="rgb(249,83,47)" fg:x="27" fg:w="5"/><text x="84.4922%" y="527.50">begin_new_exec</text></g><g><title>perf_event_exec (5 samples, 15.62%)</title><rect x="84.3750%" y="501" width="15.6250%" height="15" fill="rgb(215,43,3)" fg:x="27" fg:w="5"/><text x="84.4922%" y="511.50">perf_event_exec</text></g><g><title>perf_event_enable_on_exec (5 samples, 15.62%)</title><rect x="84.3750%" y="485" width="15.6250%" height="15" fill="rgb(238,154,13)" fg:x="27" fg:w="5"/><text x="84.4922%" y="495.50">perf_event_enable_on_exec</text></g><g><title>ctx_resched (5 samples, 15.62%)</title><rect x="84.3750%" y="469" width="15.6250%" height="15" fill="rgb(219,56,2)" fg:x="27" fg:w="5"/><text x="84.4922%" y="479.50">ctx_resched</text></g><g><title>perf_ctx_enable (5 samples, 15.62%)</title><rect x="84.3750%" y="453" width="15.6250%" height="15" fill="rgb(233,0,4)" fg:x="27" fg:w="5"/><text x="84.4922%" y="463.50">perf_ctx_enable</text></g><g><title>x86_pmu_enable (5 samples, 15.62%)</title><rect x="84.3750%" y="437" width="15.6250%" height="15" fill="rgb(235,30,7)" fg:x="27" fg:w="5"/><text x="84.4922%" y="447.50">x86_pmu_enable</text></g><g><title>intel_pmu_enable_all (5 samples, 15.62%)</title><rect x="84.3750%" y="421" width="15.6250%" height="15" fill="rgb(250,79,13)" fg:x="27" fg:w="5"/><text x="84.4922%" y="431.50">intel_pmu_enable_all</text></g><g><title>native_write_msr (5 samples, 15.62%)</title><rect x="84.3750%" y="405" width="15.6250%" height="15" fill="rgb(211,146,34)" fg:x="27" fg:w="5"/><text x="84.4922%" y="415.50">native_write_msr</text></g></svg></svg>