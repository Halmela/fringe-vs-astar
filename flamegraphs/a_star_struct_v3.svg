<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2560" height="662" onload="init(evt)" viewBox="0 0 2560 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2550" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2550" y="645.00"> </text><svg id="frames" x="10" width="2540" total_samples="62457"><g><title>_int_free (20 samples, 0.03%)</title><rect x="0.0064%" y="565" width="0.0320%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="20"/><text x="0.1236%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.01%)</title><rect x="0.0416%" y="565" width="0.0112%" height="15" fill="rgb(217,0,24)" fg:x="26" fg:w="7"/><text x="0.1588%" y="575.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (27 samples, 0.04%)</title><rect x="2.0254%" y="533" width="0.0432%" height="15" fill="rgb(221,193,54)" fg:x="1265" fg:w="27"/><text x="2.1426%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27 samples, 0.04%)</title><rect x="2.0254%" y="517" width="0.0432%" height="15" fill="rgb(248,212,6)" fg:x="1265" fg:w="27"/><text x="2.1426%" y="527.50"></text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::push (1,260 samples, 2.02%)</title><rect x="0.0560%" y="565" width="2.0174%" height="15" fill="rgb(208,68,35)" fg:x="35" fg:w="1260"/><text x="0.1732%" y="575.50">fring..</text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::replace (1,252 samples, 2.00%)</title><rect x="0.0688%" y="549" width="2.0046%" height="15" fill="rgb(232,128,0)" fg:x="43" fg:w="1252"/><text x="0.1860%" y="559.50">fring..</text></g><g><title>[[heap]] (1,299 samples, 2.08%)</title><rect x="0.0000%" y="581" width="2.0798%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1299"/><text x="0.1172%" y="591.50">[[hea..</text></g><g><title>__GI___libc_realloc (32 samples, 0.05%)</title><rect x="2.0926%" y="565" width="0.0512%" height="15" fill="rgb(228,23,34)" fg:x="1307" fg:w="32"/><text x="2.2098%" y="575.50"></text></g><g><title>__rdl_realloc (28 samples, 0.04%)</title><rect x="2.1439%" y="565" width="0.0448%" height="15" fill="rgb(218,30,26)" fg:x="1339" fg:w="28"/><text x="2.2611%" y="575.50"></text></g><g><title>fringe_vs_astar::algorithms::astar::AStar::solve (29 samples, 0.05%)</title><rect x="2.1935%" y="565" width="0.0464%" height="15" fill="rgb(220,122,19)" fg:x="1370" fg:w="29"/><text x="2.3107%" y="575.50"></text></g><g><title>[[stack]] (119 samples, 0.19%)</title><rect x="2.0798%" y="581" width="0.1905%" height="15" fill="rgb(250,228,42)" fg:x="1299" fg:w="119"/><text x="2.1970%" y="591.50"></text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::push (19 samples, 0.03%)</title><rect x="2.2399%" y="565" width="0.0304%" height="15" fill="rgb(240,193,28)" fg:x="1399" fg:w="19"/><text x="2.3571%" y="575.50"></text></g><g><title>[libc.so.6] (34 samples, 0.05%)</title><rect x="2.2720%" y="581" width="0.0544%" height="15" fill="rgb(216,20,37)" fg:x="1419" fg:w="34"/><text x="2.3892%" y="591.50"></text></g><g><title>_int_realloc (34 samples, 0.05%)</title><rect x="2.2720%" y="565" width="0.0544%" height="15" fill="rgb(206,188,39)" fg:x="1419" fg:w="34"/><text x="2.3892%" y="575.50"></text></g><g><title>__GI___libc_free (7 samples, 0.01%)</title><rect x="2.3296%" y="565" width="0.0112%" height="15" fill="rgb(217,207,13)" fg:x="1455" fg:w="7"/><text x="2.4468%" y="575.50"></text></g><g><title>__GI___libc_realloc (28 samples, 0.04%)</title><rect x="2.3408%" y="565" width="0.0448%" height="15" fill="rgb(231,73,38)" fg:x="1462" fg:w="28"/><text x="2.4580%" y="575.50"></text></g><g><title>__memcpy_evex_unaligned_erms (12 samples, 0.02%)</title><rect x="2.3856%" y="565" width="0.0192%" height="15" fill="rgb(225,20,46)" fg:x="1490" fg:w="12"/><text x="2.5028%" y="575.50"></text></g><g><title>__rdl_realloc (24 samples, 0.04%)</title><rect x="2.4049%" y="565" width="0.0384%" height="15" fill="rgb(210,31,41)" fg:x="1502" fg:w="24"/><text x="2.5220%" y="575.50"></text></g><g><title>_int_free (36 samples, 0.06%)</title><rect x="2.4433%" y="565" width="0.0576%" height="15" fill="rgb(221,200,47)" fg:x="1526" fg:w="36"/><text x="2.5605%" y="575.50"></text></g><g><title>_int_malloc (57 samples, 0.09%)</title><rect x="2.5009%" y="565" width="0.0913%" height="15" fill="rgb(226,26,5)" fg:x="1562" fg:w="57"/><text x="2.6181%" y="575.50"></text></g><g><title>_int_realloc (85 samples, 0.14%)</title><rect x="2.5922%" y="565" width="0.1361%" height="15" fill="rgb(249,33,26)" fg:x="1619" fg:w="85"/><text x="2.7094%" y="575.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (21 samples, 0.03%)</title><rect x="3.7082%" y="549" width="0.0336%" height="15" fill="rgb(235,183,28)" fg:x="2316" fg:w="21"/><text x="3.8253%" y="559.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (1,249 samples, 2.00%)</title><rect x="2.7283%" y="565" width="1.9998%" height="15" fill="rgb(221,5,38)" fg:x="1704" fg:w="1249"/><text x="2.8455%" y="575.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (616 samples, 0.99%)</title><rect x="3.7418%" y="549" width="0.9863%" height="15" fill="rgb(247,18,42)" fg:x="2337" fg:w="616"/><text x="3.8590%" y="559.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (55 samples, 0.09%)</title><rect x="4.7281%" y="565" width="0.0881%" height="15" fill="rgb(241,131,45)" fg:x="2953" fg:w="55"/><text x="4.8452%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (26 samples, 0.04%)</title><rect x="4.7745%" y="549" width="0.0416%" height="15" fill="rgb(249,31,29)" fg:x="2982" fg:w="26"/><text x="4.8917%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (46 samples, 0.07%)</title><rect x="4.8161%" y="565" width="0.0737%" height="15" fill="rgb(225,111,53)" fg:x="3008" fg:w="46"/><text x="4.9333%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (24 samples, 0.04%)</title><rect x="4.8513%" y="549" width="0.0384%" height="15" fill="rgb(238,160,17)" fg:x="3030" fg:w="24"/><text x="4.9685%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (24 samples, 0.04%)</title><rect x="4.8513%" y="533" width="0.0384%" height="15" fill="rgb(214,148,48)" fg:x="3030" fg:w="24"/><text x="4.9685%" y="543.50"></text></g><g><title>alloc::alloc::realloc (24 samples, 0.04%)</title><rect x="4.8513%" y="517" width="0.0384%" height="15" fill="rgb(232,36,49)" fg:x="3030" fg:w="24"/><text x="4.9685%" y="527.50"></text></g><g><title>[unknown] (1,616 samples, 2.59%)</title><rect x="2.3264%" y="581" width="2.5874%" height="15" fill="rgb(209,103,24)" fg:x="1453" fg:w="1616"/><text x="2.4436%" y="591.50">[unknow..</text></g><g><title>__memcpy_evex_unaligned_erms (8 samples, 0.01%)</title><rect x="5.1251%" y="229" width="0.0128%" height="15" fill="rgb(229,88,8)" fg:x="3201" fg:w="8"/><text x="5.2423%" y="239.50"></text></g><g><title>_int_free (8 samples, 0.01%)</title><rect x="5.1379%" y="229" width="0.0128%" height="15" fill="rgb(213,181,19)" fg:x="3209" fg:w="8"/><text x="5.2551%" y="239.50"></text></g><g><title>_int_realloc (44 samples, 0.07%)</title><rect x="5.1091%" y="245" width="0.0704%" height="15" fill="rgb(254,191,54)" fg:x="3191" fg:w="44"/><text x="5.2263%" y="255.50"></text></g><g><title>_int_malloc (18 samples, 0.03%)</title><rect x="5.1507%" y="229" width="0.0288%" height="15" fill="rgb(241,83,37)" fg:x="3217" fg:w="18"/><text x="5.2679%" y="239.50"></text></g><g><title>__GI___libc_realloc (51 samples, 0.08%)</title><rect x="5.1027%" y="261" width="0.0817%" height="15" fill="rgb(233,36,39)" fg:x="3187" fg:w="51"/><text x="5.2199%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (53 samples, 0.08%)</title><rect x="5.1011%" y="309" width="0.0849%" height="15" fill="rgb(226,3,54)" fg:x="3186" fg:w="53"/><text x="5.2183%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (53 samples, 0.08%)</title><rect x="5.1011%" y="293" width="0.0849%" height="15" fill="rgb(245,192,40)" fg:x="3186" fg:w="53"/><text x="5.2183%" y="303.50"></text></g><g><title>alloc::alloc::realloc (53 samples, 0.08%)</title><rect x="5.1011%" y="277" width="0.0849%" height="15" fill="rgb(238,167,29)" fg:x="3186" fg:w="53"/><text x="5.2183%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (54 samples, 0.09%)</title><rect x="5.1011%" y="325" width="0.0865%" height="15" fill="rgb(232,182,51)" fg:x="3186" fg:w="54"/><text x="5.2183%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (64 samples, 0.10%)</title><rect x="5.0867%" y="357" width="0.1025%" height="15" fill="rgb(231,60,39)" fg:x="3177" fg:w="64"/><text x="5.2039%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (64 samples, 0.10%)</title><rect x="5.0867%" y="341" width="0.1025%" height="15" fill="rgb(208,69,12)" fg:x="3177" fg:w="64"/><text x="5.2039%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (13 samples, 0.02%)</title><rect x="5.1892%" y="357" width="0.0208%" height="15" fill="rgb(235,93,37)" fg:x="3241" fg:w="13"/><text x="5.3064%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (13 samples, 0.02%)</title><rect x="5.1892%" y="341" width="0.0208%" height="15" fill="rgb(213,116,39)" fg:x="3241" fg:w="13"/><text x="5.3064%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (266 samples, 0.43%)</title><rect x="4.9458%" y="373" width="0.4259%" height="15" fill="rgb(222,207,29)" fg:x="3089" fg:w="266"/><text x="5.0630%" y="383.50"></text></g><g><title>core::ptr::write (99 samples, 0.16%)</title><rect x="5.2132%" y="357" width="0.1585%" height="15" fill="rgb(206,96,30)" fg:x="3256" fg:w="99"/><text x="5.3304%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (11 samples, 0.02%)</title><rect x="5.3797%" y="357" width="0.0176%" height="15" fill="rgb(218,138,4)" fg:x="3360" fg:w="11"/><text x="5.4969%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (11 samples, 0.02%)</title><rect x="5.3797%" y="341" width="0.0176%" height="15" fill="rgb(250,191,14)" fg:x="3360" fg:w="11"/><text x="5.4969%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11 samples, 0.02%)</title><rect x="5.3797%" y="325" width="0.0176%" height="15" fill="rgb(239,60,40)" fg:x="3360" fg:w="11"/><text x="5.4969%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (7 samples, 0.01%)</title><rect x="5.4966%" y="213" width="0.0112%" height="15" fill="rgb(206,27,48)" fg:x="3433" fg:w="7"/><text x="5.6138%" y="223.50"></text></g><g><title>_int_free (7 samples, 0.01%)</title><rect x="5.5078%" y="213" width="0.0112%" height="15" fill="rgb(225,35,8)" fg:x="3440" fg:w="7"/><text x="5.6250%" y="223.50"></text></g><g><title>_int_malloc (21 samples, 0.03%)</title><rect x="5.5190%" y="213" width="0.0336%" height="15" fill="rgb(250,213,24)" fg:x="3447" fg:w="21"/><text x="5.6362%" y="223.50"></text></g><g><title>_int_realloc (40 samples, 0.06%)</title><rect x="5.4902%" y="229" width="0.0640%" height="15" fill="rgb(247,123,22)" fg:x="3429" fg:w="40"/><text x="5.6074%" y="239.50"></text></g><g><title>__GI___libc_realloc (46 samples, 0.07%)</title><rect x="5.4822%" y="245" width="0.0737%" height="15" fill="rgb(231,138,38)" fg:x="3424" fg:w="46"/><text x="5.5994%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (47 samples, 0.08%)</title><rect x="5.4822%" y="293" width="0.0753%" height="15" fill="rgb(231,145,46)" fg:x="3424" fg:w="47"/><text x="5.5994%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (47 samples, 0.08%)</title><rect x="5.4822%" y="277" width="0.0753%" height="15" fill="rgb(251,118,11)" fg:x="3424" fg:w="47"/><text x="5.5994%" y="287.50"></text></g><g><title>alloc::alloc::realloc (47 samples, 0.08%)</title><rect x="5.4822%" y="261" width="0.0753%" height="15" fill="rgb(217,147,25)" fg:x="3424" fg:w="47"/><text x="5.5994%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (49 samples, 0.08%)</title><rect x="5.4822%" y="309" width="0.0785%" height="15" fill="rgb(247,81,37)" fg:x="3424" fg:w="49"/><text x="5.5994%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (58 samples, 0.09%)</title><rect x="5.4758%" y="341" width="0.0929%" height="15" fill="rgb(209,12,38)" fg:x="3420" fg:w="58"/><text x="5.5930%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (58 samples, 0.09%)</title><rect x="5.4758%" y="325" width="0.0929%" height="15" fill="rgb(227,1,9)" fg:x="3420" fg:w="58"/><text x="5.5930%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.02%)</title><rect x="5.5750%" y="341" width="0.0176%" height="15" fill="rgb(248,47,43)" fg:x="3482" fg:w="11"/><text x="5.6922%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (174 samples, 0.28%)</title><rect x="5.3973%" y="357" width="0.2786%" height="15" fill="rgb(221,10,30)" fg:x="3371" fg:w="174"/><text x="5.5145%" y="367.50"></text></g><g><title>core::ptr::write (52 samples, 0.08%)</title><rect x="5.5926%" y="341" width="0.0833%" height="15" fill="rgb(210,229,1)" fg:x="3493" fg:w="52"/><text x="5.7098%" y="351.50"></text></g><g><title>fringe_vs_astar::algorithms::astar::AStar::new (487 samples, 0.78%)</title><rect x="4.9154%" y="389" width="0.7797%" height="15" fill="rgb(222,148,37)" fg:x="3070" fg:w="487"/><text x="5.0326%" y="399.50"></text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::new (200 samples, 0.32%)</title><rect x="5.3749%" y="373" width="0.3202%" height="15" fill="rgb(234,67,33)" fg:x="3357" fg:w="200"/><text x="5.4921%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.02%)</title><rect x="5.6759%" y="357" width="0.0192%" height="15" fill="rgb(247,98,35)" fg:x="3545" fg:w="12"/><text x="5.7931%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.02%)</title><rect x="5.6759%" y="341" width="0.0192%" height="15" fill="rgb(247,138,52)" fg:x="3545" fg:w="12"/><text x="5.7931%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (12 samples, 0.02%)</title><rect x="5.6759%" y="325" width="0.0192%" height="15" fill="rgb(213,79,30)" fg:x="3545" fg:w="12"/><text x="5.7931%" y="335.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (113 samples, 0.18%)</title><rect x="6.2587%" y="373" width="0.1809%" height="15" fill="rgb(246,177,23)" fg:x="3909" fg:w="113"/><text x="6.3759%" y="383.50"></text></g><g><title>&lt;fringe_vs_astar::structures::graph::AdjacencyGridGraph as fringe_vs_astar::structures::graph::Graph&gt;::neighbors (7 samples, 0.01%)</title><rect x="6.4428%" y="373" width="0.0112%" height="15" fill="rgb(230,62,27)" fg:x="4024" fg:w="7"/><text x="6.5600%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (10 samples, 0.02%)</title><rect x="6.4572%" y="373" width="0.0160%" height="15" fill="rgb(216,154,8)" fg:x="4033" fg:w="10"/><text x="6.5744%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.02%)</title><rect x="6.4733%" y="261" width="0.0224%" height="15" fill="rgb(244,35,45)" fg:x="4043" fg:w="14"/><text x="6.5904%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.02%)</title><rect x="6.4733%" y="245" width="0.0224%" height="15" fill="rgb(251,115,12)" fg:x="4043" fg:w="14"/><text x="6.5904%" y="255.50"></text></g><g><title>__GI___libc_free (14 samples, 0.02%)</title><rect x="6.4733%" y="229" width="0.0224%" height="15" fill="rgb(240,54,50)" fg:x="4043" fg:w="14"/><text x="6.5904%" y="239.50"></text></g><g><title>_int_free (14 samples, 0.02%)</title><rect x="6.4733%" y="213" width="0.0224%" height="15" fill="rgb(233,84,52)" fg:x="4043" fg:w="14"/><text x="6.5904%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;(core::option::Option&lt;(usize,usize)&gt;,core::option::Option&lt;f64&gt;)&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="6.4733%" y="357" width="0.0240%" height="15" fill="rgb(207,117,47)" fg:x="4043" fg:w="15"/><text x="6.5904%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="6.4733%" y="341" width="0.0240%" height="15" fill="rgb(249,43,39)" fg:x="4043" fg:w="15"/><text x="6.5904%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;(core::option::Option&lt;(usize,usize)&gt;,core::option::Option&lt;f64&gt;)&gt;]&gt; (15 samples, 0.02%)</title><rect x="6.4733%" y="325" width="0.0240%" height="15" fill="rgb(209,38,44)" fg:x="4043" fg:w="15"/><text x="6.5904%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(core::option::Option&lt;(usize,usize)&gt;,core::option::Option&lt;f64&gt;)&gt;&gt; (15 samples, 0.02%)</title><rect x="6.4733%" y="309" width="0.0240%" height="15" fill="rgb(236,212,23)" fg:x="4043" fg:w="15"/><text x="6.5904%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(core::option::Option&lt;(usize,usize)&gt;,core::option::Option&lt;f64&gt;)&gt;&gt; (15 samples, 0.02%)</title><rect x="6.4733%" y="293" width="0.0240%" height="15" fill="rgb(242,79,21)" fg:x="4043" fg:w="15"/><text x="6.5904%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="6.4733%" y="277" width="0.0240%" height="15" fill="rgb(211,96,35)" fg:x="4043" fg:w="15"/><text x="6.5904%" y="287.50"></text></g><g><title>__GI___libc_free (9 samples, 0.01%)</title><rect x="6.4973%" y="213" width="0.0144%" height="15" fill="rgb(253,215,40)" fg:x="4058" fg:w="9"/><text x="6.6145%" y="223.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="6.4973%" y="197" width="0.0144%" height="15" fill="rgb(211,81,21)" fg:x="4058" fg:w="9"/><text x="6.6145%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.02%)</title><rect x="6.4973%" y="245" width="0.0160%" height="15" fill="rgb(208,190,38)" fg:x="4058" fg:w="10"/><text x="6.6145%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.02%)</title><rect x="6.4973%" y="229" width="0.0160%" height="15" fill="rgb(235,213,38)" fg:x="4058" fg:w="10"/><text x="6.6145%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;fringe_vs_astar::algorithms::astar::AStar&gt; (26 samples, 0.04%)</title><rect x="6.4733%" y="373" width="0.0416%" height="15" fill="rgb(237,122,38)" fg:x="4043" fg:w="26"/><text x="6.5904%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;fringe_vs_astar::structures::frontier::Frontier&gt; (11 samples, 0.02%)</title><rect x="6.4973%" y="357" width="0.0176%" height="15" fill="rgb(244,218,35)" fg:x="4058" fg:w="11"/><text x="6.6145%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;f64&gt;&gt;&gt;&gt; (11 samples, 0.02%)</title><rect x="6.4973%" y="341" width="0.0176%" height="15" fill="rgb(240,68,47)" fg:x="4058" fg:w="11"/><text x="6.6145%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="6.4973%" y="325" width="0.0176%" height="15" fill="rgb(210,16,53)" fg:x="4058" fg:w="11"/><text x="6.6145%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;core::option::Option&lt;f64&gt;&gt;]&gt; (11 samples, 0.02%)</title><rect x="6.4973%" y="309" width="0.0176%" height="15" fill="rgb(235,124,12)" fg:x="4058" fg:w="11"/><text x="6.6145%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;f64&gt;&gt;&gt; (11 samples, 0.02%)</title><rect x="6.4973%" y="293" width="0.0176%" height="15" fill="rgb(224,169,11)" fg:x="4058" fg:w="11"/><text x="6.6145%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;f64&gt;&gt;&gt; (11 samples, 0.02%)</title><rect x="6.4973%" y="277" width="0.0176%" height="15" fill="rgb(250,166,2)" fg:x="4058" fg:w="11"/><text x="6.6145%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="6.4973%" y="261" width="0.0176%" height="15" fill="rgb(242,216,29)" fg:x="4058" fg:w="11"/><text x="6.6145%" y="271.50"></text></g><g><title>fringe_vs_astar::algorithms::astar::AStar::construct_path (8 samples, 0.01%)</title><rect x="6.5149%" y="373" width="0.0128%" height="15" fill="rgb(230,116,27)" fg:x="4069" fg:w="8"/><text x="6.6321%" y="383.50"></text></g><g><title>fringe_vs_astar::algorithms::astar::AStar::solve (36 samples, 0.06%)</title><rect x="6.5277%" y="357" width="0.0576%" height="15" fill="rgb(228,99,48)" fg:x="4077" fg:w="36"/><text x="6.6449%" y="367.50"></text></g><g><title>fringe_vs_astar::algorithms::astar::AStar::solve::_{{closure}} (127 samples, 0.20%)</title><rect x="6.5277%" y="373" width="0.2033%" height="15" fill="rgb(253,11,6)" fg:x="4077" fg:w="127"/><text x="6.6449%" y="383.50"></text></g><g><title>fringe_vs_astar::algorithms::heuristic (91 samples, 0.15%)</title><rect x="6.5853%" y="357" width="0.1457%" height="15" fill="rgb(247,143,39)" fg:x="4113" fg:w="91"/><text x="6.7025%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.05%)</title><rect x="6.7855%" y="277" width="0.0512%" height="15" fill="rgb(236,97,10)" fg:x="4238" fg:w="32"/><text x="6.9027%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (35 samples, 0.06%)</title><rect x="6.7855%" y="293" width="0.0560%" height="15" fill="rgb(233,208,19)" fg:x="4238" fg:w="35"/><text x="6.9027%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (14 samples, 0.02%)</title><rect x="6.8431%" y="293" width="0.0224%" height="15" fill="rgb(216,164,2)" fg:x="4274" fg:w="14"/><text x="6.9603%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::le (10 samples, 0.02%)</title><rect x="6.8495%" y="277" width="0.0160%" height="15" fill="rgb(220,129,5)" fg:x="4278" fg:w="10"/><text x="6.9667%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (82 samples, 0.13%)</title><rect x="6.7502%" y="309" width="0.1313%" height="15" fill="rgb(242,17,10)" fg:x="4216" fg:w="82"/><text x="6.8674%" y="319.50"></text></g><g><title>core::mem::drop (10 samples, 0.02%)</title><rect x="6.8655%" y="293" width="0.0160%" height="15" fill="rgb(242,107,0)" fg:x="4288" fg:w="10"/><text x="6.9827%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::structures::weighted_cell::WeightedCell&gt;&gt; (10 samples, 0.02%)</title><rect x="6.8655%" y="277" width="0.0160%" height="15" fill="rgb(251,28,31)" fg:x="4288" fg:w="10"/><text x="6.9827%" y="287.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="6.8655%" y="261" width="0.0160%" height="15" fill="rgb(233,223,10)" fg:x="4288" fg:w="10"/><text x="6.9827%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="6.8655%" y="245" width="0.0160%" height="15" fill="rgb(215,21,27)" fg:x="4288" fg:w="10"/><text x="6.9827%" y="255.50"></text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::pop (95 samples, 0.15%)</title><rect x="6.7310%" y="373" width="0.1521%" height="15" fill="rgb(232,23,21)" fg:x="4204" fg:w="95"/><text x="6.8482%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (95 samples, 0.15%)</title><rect x="6.7310%" y="357" width="0.1521%" height="15" fill="rgb(244,5,23)" fg:x="4204" fg:w="95"/><text x="6.8482%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (89 samples, 0.14%)</title><rect x="6.7406%" y="341" width="0.1425%" height="15" fill="rgb(226,81,46)" fg:x="4210" fg:w="89"/><text x="6.8578%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (88 samples, 0.14%)</title><rect x="6.7422%" y="325" width="0.1409%" height="15" fill="rgb(247,70,30)" fg:x="4211" fg:w="88"/><text x="6.8594%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (20 samples, 0.03%)</title><rect x="7.0801%" y="357" width="0.0320%" height="15" fill="rgb(212,68,19)" fg:x="4422" fg:w="20"/><text x="7.1973%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (20 samples, 0.03%)</title><rect x="7.0801%" y="341" width="0.0320%" height="15" fill="rgb(240,187,13)" fg:x="4422" fg:w="20"/><text x="7.1973%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (20 samples, 0.03%)</title><rect x="7.0801%" y="325" width="0.0320%" height="15" fill="rgb(223,113,26)" fg:x="4422" fg:w="20"/><text x="7.1973%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (29 samples, 0.05%)</title><rect x="7.1345%" y="325" width="0.0464%" height="15" fill="rgb(206,192,2)" fg:x="4456" fg:w="29"/><text x="7.2517%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (41 samples, 0.07%)</title><rect x="7.1217%" y="341" width="0.0656%" height="15" fill="rgb(241,108,4)" fg:x="4448" fg:w="41"/><text x="7.2389%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (50 samples, 0.08%)</title><rect x="7.1137%" y="357" width="0.0801%" height="15" fill="rgb(247,173,49)" fg:x="4443" fg:w="50"/><text x="7.2309%" y="367.50"></text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::push (610 samples, 0.98%)</title><rect x="7.1937%" y="357" width="0.9767%" height="15" fill="rgb(224,114,35)" fg:x="4493" fg:w="610"/><text x="7.3109%" y="367.50">f..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (13 samples, 0.02%)</title><rect x="9.2368%" y="325" width="0.0208%" height="15" fill="rgb(245,159,27)" fg:x="5769" fg:w="13"/><text x="9.3539%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,346 samples, 2.16%)</title><rect x="9.2576%" y="325" width="2.1551%" height="15" fill="rgb(245,172,44)" fg:x="5782" fg:w="1346"/><text x="9.3748%" y="335.50">alloc..</text></g><g><title>asm_common_interrupt (8 samples, 0.01%)</title><rect x="11.4127%" y="325" width="0.0128%" height="15" fill="rgb(236,23,11)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="335.50"></text></g><g><title>common_interrupt (8 samples, 0.01%)</title><rect x="11.4127%" y="309" width="0.0128%" height="15" fill="rgb(205,117,38)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="319.50"></text></g><g><title>__common_interrupt (8 samples, 0.01%)</title><rect x="11.4127%" y="293" width="0.0128%" height="15" fill="rgb(237,72,25)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="303.50"></text></g><g><title>handle_fasteoi_irq (8 samples, 0.01%)</title><rect x="11.4127%" y="277" width="0.0128%" height="15" fill="rgb(244,70,9)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="287.50"></text></g><g><title>handle_irq_event (8 samples, 0.01%)</title><rect x="11.4127%" y="261" width="0.0128%" height="15" fill="rgb(217,125,39)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="271.50"></text></g><g><title>__handle_irq_event_percpu (8 samples, 0.01%)</title><rect x="11.4127%" y="245" width="0.0128%" height="15" fill="rgb(235,36,10)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="255.50"></text></g><g><title>acpi_irq (8 samples, 0.01%)</title><rect x="11.4127%" y="229" width="0.0128%" height="15" fill="rgb(251,123,47)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="239.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (8 samples, 0.01%)</title><rect x="11.4127%" y="213" width="0.0128%" height="15" fill="rgb(221,13,13)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="223.50"></text></g><g><title>acpi_ev_gpe_detect (8 samples, 0.01%)</title><rect x="11.4127%" y="197" width="0.0128%" height="15" fill="rgb(238,131,9)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="207.50"></text></g><g><title>acpi_ev_detect_gpe (8 samples, 0.01%)</title><rect x="11.4127%" y="181" width="0.0128%" height="15" fill="rgb(211,50,8)" fg:x="7128" fg:w="8"/><text x="11.5298%" y="191.50"></text></g><g><title>acpi_hw_gpe_read (7 samples, 0.01%)</title><rect x="11.4143%" y="165" width="0.0112%" height="15" fill="rgb(245,182,24)" fg:x="7129" fg:w="7"/><text x="11.5314%" y="175.50"></text></g><g><title>acpi_os_read_port (7 samples, 0.01%)</title><rect x="11.4143%" y="149" width="0.0112%" height="15" fill="rgb(242,14,37)" fg:x="7129" fg:w="7"/><text x="11.5314%" y="159.50"></text></g><g><title>__common_interrupt (13 samples, 0.02%)</title><rect x="19.0179%" y="245" width="0.0208%" height="15" fill="rgb(246,228,12)" fg:x="11878" fg:w="13"/><text x="19.1351%" y="255.50"></text></g><g><title>handle_fasteoi_irq (13 samples, 0.02%)</title><rect x="19.0179%" y="229" width="0.0208%" height="15" fill="rgb(213,55,15)" fg:x="11878" fg:w="13"/><text x="19.1351%" y="239.50"></text></g><g><title>handle_irq_event (13 samples, 0.02%)</title><rect x="19.0179%" y="213" width="0.0208%" height="15" fill="rgb(209,9,3)" fg:x="11878" fg:w="13"/><text x="19.1351%" y="223.50"></text></g><g><title>__handle_irq_event_percpu (13 samples, 0.02%)</title><rect x="19.0179%" y="197" width="0.0208%" height="15" fill="rgb(230,59,30)" fg:x="11878" fg:w="13"/><text x="19.1351%" y="207.50"></text></g><g><title>acpi_irq (13 samples, 0.02%)</title><rect x="19.0179%" y="181" width="0.0208%" height="15" fill="rgb(209,121,21)" fg:x="11878" fg:w="13"/><text x="19.1351%" y="191.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (13 samples, 0.02%)</title><rect x="19.0179%" y="165" width="0.0208%" height="15" fill="rgb(220,109,13)" fg:x="11878" fg:w="13"/><text x="19.1351%" y="175.50"></text></g><g><title>acpi_ev_gpe_detect (13 samples, 0.02%)</title><rect x="19.0179%" y="149" width="0.0208%" height="15" fill="rgb(232,18,1)" fg:x="11878" fg:w="13"/><text x="19.1351%" y="159.50"></text></g><g><title>acpi_ev_detect_gpe (13 samples, 0.02%)</title><rect x="19.0179%" y="133" width="0.0208%" height="15" fill="rgb(215,41,42)" fg:x="11878" fg:w="13"/><text x="19.1351%" y="143.50"></text></g><g><title>acpi_hw_gpe_read (7 samples, 0.01%)</title><rect x="19.0275%" y="117" width="0.0112%" height="15" fill="rgb(224,123,36)" fg:x="11884" fg:w="7"/><text x="19.1447%" y="127.50"></text></g><g><title>acpi_os_read_port (7 samples, 0.01%)</title><rect x="19.0275%" y="101" width="0.0112%" height="15" fill="rgb(240,125,3)" fg:x="11884" fg:w="7"/><text x="19.1447%" y="111.50"></text></g><g><title>asm_common_interrupt (14 samples, 0.02%)</title><rect x="19.0179%" y="277" width="0.0224%" height="15" fill="rgb(205,98,50)" fg:x="11878" fg:w="14"/><text x="19.1351%" y="287.50"></text></g><g><title>common_interrupt (14 samples, 0.02%)</title><rect x="19.0179%" y="261" width="0.0224%" height="15" fill="rgb(205,185,37)" fg:x="11878" fg:w="14"/><text x="19.1351%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (4,142 samples, 6.63%)</title><rect x="12.4133%" y="293" width="6.6318%" height="15" fill="rgb(238,207,15)" fg:x="7753" fg:w="4142"/><text x="12.5305%" y="303.50">alloc::collections::b..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (2,486 samples, 3.98%)</title><rect x="31.8123%" y="277" width="3.9803%" height="15" fill="rgb(213,199,42)" fg:x="19869" fg:w="2486"/><text x="31.9295%" y="287.50">alloc::colle..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (159 samples, 0.25%)</title><rect x="38.1799%" y="261" width="0.2546%" height="15" fill="rgb(235,201,11)" fg:x="23846" fg:w="159"/><text x="38.2971%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (159 samples, 0.25%)</title><rect x="38.1799%" y="245" width="0.2546%" height="15" fill="rgb(207,46,11)" fg:x="23846" fg:w="159"/><text x="38.2971%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (159 samples, 0.25%)</title><rect x="38.1799%" y="229" width="0.2546%" height="15" fill="rgb(241,35,35)" fg:x="23846" fg:w="159"/><text x="38.2971%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (159 samples, 0.25%)</title><rect x="38.1799%" y="213" width="0.2546%" height="15" fill="rgb(243,32,47)" fg:x="23846" fg:w="159"/><text x="38.2971%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (725 samples, 1.16%)</title><rect x="38.4344%" y="245" width="1.1608%" height="15" fill="rgb(247,202,23)" fg:x="24005" fg:w="725"/><text x="38.5516%" y="255.50">co..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (737 samples, 1.18%)</title><rect x="38.4344%" y="261" width="1.1800%" height="15" fill="rgb(219,102,11)" fg:x="24005" fg:w="737"/><text x="38.5516%" y="271.50">al..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12 samples, 0.02%)</title><rect x="39.5952%" y="245" width="0.0192%" height="15" fill="rgb(243,110,44)" fg:x="24730" fg:w="12"/><text x="39.7124%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (624 samples, 1.00%)</title><rect x="39.6145%" y="261" width="0.9991%" height="15" fill="rgb(222,74,54)" fg:x="24742" fg:w="624"/><text x="39.7316%" y="271.50">a..</text></g><g><title>asm_common_interrupt (11 samples, 0.02%)</title><rect x="40.6135%" y="261" width="0.0176%" height="15" fill="rgb(216,99,12)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="271.50"></text></g><g><title>common_interrupt (11 samples, 0.02%)</title><rect x="40.6135%" y="245" width="0.0176%" height="15" fill="rgb(226,22,26)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="255.50"></text></g><g><title>__common_interrupt (11 samples, 0.02%)</title><rect x="40.6135%" y="229" width="0.0176%" height="15" fill="rgb(217,163,10)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="239.50"></text></g><g><title>handle_fasteoi_irq (11 samples, 0.02%)</title><rect x="40.6135%" y="213" width="0.0176%" height="15" fill="rgb(213,25,53)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="223.50"></text></g><g><title>handle_irq_event (11 samples, 0.02%)</title><rect x="40.6135%" y="197" width="0.0176%" height="15" fill="rgb(252,105,26)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="207.50"></text></g><g><title>__handle_irq_event_percpu (11 samples, 0.02%)</title><rect x="40.6135%" y="181" width="0.0176%" height="15" fill="rgb(220,39,43)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="191.50"></text></g><g><title>acpi_irq (11 samples, 0.02%)</title><rect x="40.6135%" y="165" width="0.0176%" height="15" fill="rgb(229,68,48)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="175.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (11 samples, 0.02%)</title><rect x="40.6135%" y="149" width="0.0176%" height="15" fill="rgb(252,8,32)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="159.50"></text></g><g><title>acpi_ev_gpe_detect (11 samples, 0.02%)</title><rect x="40.6135%" y="133" width="0.0176%" height="15" fill="rgb(223,20,43)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="143.50"></text></g><g><title>acpi_ev_detect_gpe (11 samples, 0.02%)</title><rect x="40.6135%" y="117" width="0.0176%" height="15" fill="rgb(229,81,49)" fg:x="25366" fg:w="11"/><text x="40.7307%" y="127.50"></text></g><g><title>acpi_hw_gpe_read (9 samples, 0.01%)</title><rect x="40.6167%" y="101" width="0.0144%" height="15" fill="rgb(236,28,36)" fg:x="25368" fg:w="9"/><text x="40.7339%" y="111.50"></text></g><g><title>acpi_os_read_port (9 samples, 0.01%)</title><rect x="40.6167%" y="85" width="0.0144%" height="15" fill="rgb(249,185,26)" fg:x="25368" fg:w="9"/><text x="40.7339%" y="95.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (10 samples, 0.02%)</title><rect x="40.6312%" y="261" width="0.0160%" height="15" fill="rgb(249,174,33)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (10 samples, 0.02%)</title><rect x="40.6312%" y="245" width="0.0160%" height="15" fill="rgb(233,201,37)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="255.50"></text></g><g><title>irqentry_exit (10 samples, 0.02%)</title><rect x="40.6312%" y="229" width="0.0160%" height="15" fill="rgb(221,78,26)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="239.50"></text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.02%)</title><rect x="40.6312%" y="213" width="0.0160%" height="15" fill="rgb(250,127,30)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="223.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.02%)</title><rect x="40.6312%" y="197" width="0.0160%" height="15" fill="rgb(230,49,44)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="207.50"></text></g><g><title>exit_to_user_mode_loop (10 samples, 0.02%)</title><rect x="40.6312%" y="181" width="0.0160%" height="15" fill="rgb(229,67,23)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="191.50"></text></g><g><title>schedule (10 samples, 0.02%)</title><rect x="40.6312%" y="165" width="0.0160%" height="15" fill="rgb(249,83,47)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="175.50"></text></g><g><title>__schedule (10 samples, 0.02%)</title><rect x="40.6312%" y="149" width="0.0160%" height="15" fill="rgb(215,43,3)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="159.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.02%)</title><rect x="40.6312%" y="133" width="0.0160%" height="15" fill="rgb(238,154,13)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="143.50"></text></g><g><title>__perf_event_task_sched_in (10 samples, 0.02%)</title><rect x="40.6312%" y="117" width="0.0160%" height="15" fill="rgb(219,56,2)" fg:x="25377" fg:w="10"/><text x="40.7483%" y="127.50"></text></g><g><title>perf_ctx_enable (9 samples, 0.01%)</title><rect x="40.6328%" y="101" width="0.0144%" height="15" fill="rgb(233,0,4)" fg:x="25378" fg:w="9"/><text x="40.7499%" y="111.50"></text></g><g><title>x86_pmu_enable (9 samples, 0.01%)</title><rect x="40.6328%" y="85" width="0.0144%" height="15" fill="rgb(235,30,7)" fg:x="25378" fg:w="9"/><text x="40.7499%" y="95.50"></text></g><g><title>intel_pmu_enable_all (9 samples, 0.01%)</title><rect x="40.6328%" y="69" width="0.0144%" height="15" fill="rgb(250,79,13)" fg:x="25378" fg:w="9"/><text x="40.7499%" y="79.50"></text></g><g><title>native_write_msr (9 samples, 0.01%)</title><rect x="40.6328%" y="53" width="0.0144%" height="15" fill="rgb(211,146,34)" fg:x="25378" fg:w="9"/><text x="40.7499%" y="63.50"></text></g><g><title>core::cmp::PartialOrd::le (560 samples, 0.90%)</title><rect x="41.1147%" y="245" width="0.8966%" height="15" fill="rgb(228,22,38)" fg:x="25679" fg:w="560"/><text x="41.2319%" y="255.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (853 samples, 1.37%)</title><rect x="40.6472%" y="261" width="1.3657%" height="15" fill="rgb(235,168,5)" fg:x="25387" fg:w="853"/><text x="40.7644%" y="271.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (721 samples, 1.15%)</title><rect x="42.0129%" y="229" width="1.1544%" height="15" fill="rgb(221,155,16)" fg:x="26240" fg:w="721"/><text x="42.1301%" y="239.50">co..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (4,763 samples, 7.63%)</title><rect x="35.7926%" y="277" width="7.6260%" height="15" fill="rgb(215,215,53)" fg:x="22355" fg:w="4763"/><text x="35.9098%" y="287.50">alloc::collections::binar..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::structures::weighted_cell::WeightedCell&gt;&gt; (878 samples, 1.41%)</title><rect x="42.0129%" y="261" width="1.4058%" height="15" fill="rgb(223,4,10)" fg:x="26240" fg:w="878"/><text x="42.1301%" y="271.50">cor..</text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (878 samples, 1.41%)</title><rect x="42.0129%" y="245" width="1.4058%" height="15" fill="rgb(234,103,6)" fg:x="26240" fg:w="878"/><text x="42.1301%" y="255.50">&lt;al..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (157 samples, 0.25%)</title><rect x="43.1673%" y="229" width="0.2514%" height="15" fill="rgb(227,97,0)" fg:x="26961" fg:w="157"/><text x="43.2845%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (157 samples, 0.25%)</title><rect x="43.1673%" y="213" width="0.2514%" height="15" fill="rgb(234,150,53)" fg:x="26961" fg:w="157"/><text x="43.2845%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (157 samples, 0.25%)</title><rect x="43.1673%" y="197" width="0.2514%" height="15" fill="rgb(228,201,54)" fg:x="26961" fg:w="157"/><text x="43.2845%" y="207.50"></text></g><g><title>acpi_ec_gpe_handler (9 samples, 0.01%)</title><rect x="56.9015%" y="85" width="0.0144%" height="15" fill="rgb(222,22,37)" fg:x="35539" fg:w="9"/><text x="57.0187%" y="95.50"></text></g><g><title>clear_gpe_and_advance_transaction.constprop.0 (9 samples, 0.01%)</title><rect x="56.9015%" y="69" width="0.0144%" height="15" fill="rgb(237,53,32)" fg:x="35539" fg:w="9"/><text x="57.0187%" y="79.50"></text></g><g><title>advance_transaction (7 samples, 0.01%)</title><rect x="56.9048%" y="53" width="0.0112%" height="15" fill="rgb(233,25,53)" fg:x="35541" fg:w="7"/><text x="57.0219%" y="63.50"></text></g><g><title>__common_interrupt (70 samples, 0.11%)</title><rect x="56.8983%" y="213" width="0.1121%" height="15" fill="rgb(210,40,34)" fg:x="35537" fg:w="70"/><text x="57.0155%" y="223.50"></text></g><g><title>handle_fasteoi_irq (69 samples, 0.11%)</title><rect x="56.8999%" y="197" width="0.1105%" height="15" fill="rgb(241,220,44)" fg:x="35538" fg:w="69"/><text x="57.0171%" y="207.50"></text></g><g><title>handle_irq_event (69 samples, 0.11%)</title><rect x="56.8999%" y="181" width="0.1105%" height="15" fill="rgb(235,28,35)" fg:x="35538" fg:w="69"/><text x="57.0171%" y="191.50"></text></g><g><title>__handle_irq_event_percpu (69 samples, 0.11%)</title><rect x="56.8999%" y="165" width="0.1105%" height="15" fill="rgb(210,56,17)" fg:x="35538" fg:w="69"/><text x="57.0171%" y="175.50"></text></g><g><title>acpi_irq (69 samples, 0.11%)</title><rect x="56.8999%" y="149" width="0.1105%" height="15" fill="rgb(224,130,29)" fg:x="35538" fg:w="69"/><text x="57.0171%" y="159.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (69 samples, 0.11%)</title><rect x="56.8999%" y="133" width="0.1105%" height="15" fill="rgb(235,212,8)" fg:x="35538" fg:w="69"/><text x="57.0171%" y="143.50"></text></g><g><title>acpi_ev_gpe_detect (69 samples, 0.11%)</title><rect x="56.8999%" y="117" width="0.1105%" height="15" fill="rgb(223,33,50)" fg:x="35538" fg:w="69"/><text x="57.0171%" y="127.50"></text></g><g><title>acpi_ev_detect_gpe (68 samples, 0.11%)</title><rect x="56.9015%" y="101" width="0.1089%" height="15" fill="rgb(219,149,13)" fg:x="35539" fg:w="68"/><text x="57.0187%" y="111.50"></text></g><g><title>acpi_hw_gpe_read (59 samples, 0.09%)</title><rect x="56.9160%" y="85" width="0.0945%" height="15" fill="rgb(250,156,29)" fg:x="35548" fg:w="59"/><text x="57.0331%" y="95.50"></text></g><g><title>acpi_os_read_port (59 samples, 0.09%)</title><rect x="56.9160%" y="69" width="0.0945%" height="15" fill="rgb(216,193,19)" fg:x="35548" fg:w="59"/><text x="57.0331%" y="79.50"></text></g><g><title>asm_common_interrupt (76 samples, 0.12%)</title><rect x="56.8983%" y="245" width="0.1217%" height="15" fill="rgb(216,135,14)" fg:x="35537" fg:w="76"/><text x="57.0155%" y="255.50"></text></g><g><title>common_interrupt (76 samples, 0.12%)</title><rect x="56.8983%" y="229" width="0.1217%" height="15" fill="rgb(241,47,5)" fg:x="35537" fg:w="76"/><text x="57.0155%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,504 samples, 13.62%)</title><rect x="43.4187%" y="261" width="13.6158%" height="15" fill="rgb(233,42,35)" fg:x="27118" fg:w="8504"/><text x="43.5359%" y="271.50">core::intrinsics::copy_nonoverlapping</text></g><g><title>__common_interrupt (15 samples, 0.02%)</title><rect x="57.6541%" y="213" width="0.0240%" height="15" fill="rgb(231,13,6)" fg:x="36009" fg:w="15"/><text x="57.7713%" y="223.50"></text></g><g><title>handle_fasteoi_irq (15 samples, 0.02%)</title><rect x="57.6541%" y="197" width="0.0240%" height="15" fill="rgb(207,181,40)" fg:x="36009" fg:w="15"/><text x="57.7713%" y="207.50"></text></g><g><title>handle_irq_event (15 samples, 0.02%)</title><rect x="57.6541%" y="181" width="0.0240%" height="15" fill="rgb(254,173,49)" fg:x="36009" fg:w="15"/><text x="57.7713%" y="191.50"></text></g><g><title>__handle_irq_event_percpu (15 samples, 0.02%)</title><rect x="57.6541%" y="165" width="0.0240%" height="15" fill="rgb(221,1,38)" fg:x="36009" fg:w="15"/><text x="57.7713%" y="175.50"></text></g><g><title>acpi_irq (15 samples, 0.02%)</title><rect x="57.6541%" y="149" width="0.0240%" height="15" fill="rgb(206,124,46)" fg:x="36009" fg:w="15"/><text x="57.7713%" y="159.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (15 samples, 0.02%)</title><rect x="57.6541%" y="133" width="0.0240%" height="15" fill="rgb(249,21,11)" fg:x="36009" fg:w="15"/><text x="57.7713%" y="143.50"></text></g><g><title>acpi_ev_gpe_detect (15 samples, 0.02%)</title><rect x="57.6541%" y="117" width="0.0240%" height="15" fill="rgb(222,201,40)" fg:x="36009" fg:w="15"/><text x="57.7713%" y="127.50"></text></g><g><title>acpi_ev_detect_gpe (15 samples, 0.02%)</title><rect x="57.6541%" y="101" width="0.0240%" height="15" fill="rgb(235,61,29)" fg:x="36009" fg:w="15"/><text x="57.7713%" y="111.50"></text></g><g><title>acpi_hw_gpe_read (14 samples, 0.02%)</title><rect x="57.6557%" y="85" width="0.0224%" height="15" fill="rgb(219,207,3)" fg:x="36010" fg:w="14"/><text x="57.7729%" y="95.50"></text></g><g><title>acpi_os_read_port (14 samples, 0.02%)</title><rect x="57.6557%" y="69" width="0.0224%" height="15" fill="rgb(222,56,46)" fg:x="36010" fg:w="14"/><text x="57.7729%" y="79.50"></text></g><g><title>asm_common_interrupt (17 samples, 0.03%)</title><rect x="57.6541%" y="245" width="0.0272%" height="15" fill="rgb(239,76,54)" fg:x="36009" fg:w="17"/><text x="57.7713%" y="255.50"></text></g><g><title>common_interrupt (17 samples, 0.03%)</title><rect x="57.6541%" y="229" width="0.0272%" height="15" fill="rgb(231,124,27)" fg:x="36009" fg:w="17"/><text x="57.7713%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (8,911 samples, 14.27%)</title><rect x="43.4187%" y="277" width="14.2674%" height="15" fill="rgb(249,195,6)" fg:x="27118" fg:w="8911"/><text x="43.5359%" y="287.50">alloc::collections::binary_heap::Hole&lt;T&gt;::move_to</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (407 samples, 0.65%)</title><rect x="57.0344%" y="261" width="0.6516%" height="15" fill="rgb(237,174,47)" fg:x="35622" fg:w="407"/><text x="57.1516%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (643 samples, 1.03%)</title><rect x="57.6861%" y="277" width="1.0295%" height="15" fill="rgb(206,201,31)" fg:x="36029" fg:w="643"/><text x="57.8033%" y="287.50">a..</text></g><g><title>asm_common_interrupt (15 samples, 0.02%)</title><rect x="58.7156%" y="277" width="0.0240%" height="15" fill="rgb(231,57,52)" fg:x="36672" fg:w="15"/><text x="58.8328%" y="287.50"></text></g><g><title>common_interrupt (15 samples, 0.02%)</title><rect x="58.7156%" y="261" width="0.0240%" height="15" fill="rgb(248,177,22)" fg:x="36672" fg:w="15"/><text x="58.8328%" y="271.50"></text></g><g><title>__common_interrupt (15 samples, 0.02%)</title><rect x="58.7156%" y="245" width="0.0240%" height="15" fill="rgb(215,211,37)" fg:x="36672" fg:w="15"/><text x="58.8328%" y="255.50"></text></g><g><title>handle_fasteoi_irq (14 samples, 0.02%)</title><rect x="58.7172%" y="229" width="0.0224%" height="15" fill="rgb(241,128,51)" fg:x="36673" fg:w="14"/><text x="58.8344%" y="239.50"></text></g><g><title>handle_irq_event (14 samples, 0.02%)</title><rect x="58.7172%" y="213" width="0.0224%" height="15" fill="rgb(227,165,31)" fg:x="36673" fg:w="14"/><text x="58.8344%" y="223.50"></text></g><g><title>__handle_irq_event_percpu (14 samples, 0.02%)</title><rect x="58.7172%" y="197" width="0.0224%" height="15" fill="rgb(228,167,24)" fg:x="36673" fg:w="14"/><text x="58.8344%" y="207.50"></text></g><g><title>acpi_irq (14 samples, 0.02%)</title><rect x="58.7172%" y="181" width="0.0224%" height="15" fill="rgb(228,143,12)" fg:x="36673" fg:w="14"/><text x="58.8344%" y="191.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (14 samples, 0.02%)</title><rect x="58.7172%" y="165" width="0.0224%" height="15" fill="rgb(249,149,8)" fg:x="36673" fg:w="14"/><text x="58.8344%" y="175.50"></text></g><g><title>acpi_ev_gpe_detect (14 samples, 0.02%)</title><rect x="58.7172%" y="149" width="0.0224%" height="15" fill="rgb(243,35,44)" fg:x="36673" fg:w="14"/><text x="58.8344%" y="159.50"></text></g><g><title>acpi_ev_detect_gpe (14 samples, 0.02%)</title><rect x="58.7172%" y="133" width="0.0224%" height="15" fill="rgb(246,89,9)" fg:x="36673" fg:w="14"/><text x="58.8344%" y="143.50"></text></g><g><title>acpi_hw_gpe_read (11 samples, 0.02%)</title><rect x="58.7220%" y="117" width="0.0176%" height="15" fill="rgb(233,213,13)" fg:x="36676" fg:w="11"/><text x="58.8392%" y="127.50"></text></g><g><title>acpi_os_read_port (11 samples, 0.02%)</title><rect x="58.7220%" y="101" width="0.0176%" height="15" fill="rgb(233,141,41)" fg:x="36676" fg:w="11"/><text x="58.8392%" y="111.50"></text></g><g><title>asm_common_interrupt (16 samples, 0.03%)</title><rect x="65.5971%" y="245" width="0.0256%" height="15" fill="rgb(239,167,4)" fg:x="40970" fg:w="16"/><text x="65.7143%" y="255.50"></text></g><g><title>common_interrupt (16 samples, 0.03%)</title><rect x="65.5971%" y="229" width="0.0256%" height="15" fill="rgb(209,217,16)" fg:x="40970" fg:w="16"/><text x="65.7143%" y="239.50"></text></g><g><title>__common_interrupt (16 samples, 0.03%)</title><rect x="65.5971%" y="213" width="0.0256%" height="15" fill="rgb(219,88,35)" fg:x="40970" fg:w="16"/><text x="65.7143%" y="223.50"></text></g><g><title>handle_fasteoi_irq (15 samples, 0.02%)</title><rect x="65.5987%" y="197" width="0.0240%" height="15" fill="rgb(220,193,23)" fg:x="40971" fg:w="15"/><text x="65.7159%" y="207.50"></text></g><g><title>handle_irq_event (15 samples, 0.02%)</title><rect x="65.5987%" y="181" width="0.0240%" height="15" fill="rgb(230,90,52)" fg:x="40971" fg:w="15"/><text x="65.7159%" y="191.50"></text></g><g><title>__handle_irq_event_percpu (15 samples, 0.02%)</title><rect x="65.5987%" y="165" width="0.0240%" height="15" fill="rgb(252,106,19)" fg:x="40971" fg:w="15"/><text x="65.7159%" y="175.50"></text></g><g><title>acpi_irq (15 samples, 0.02%)</title><rect x="65.5987%" y="149" width="0.0240%" height="15" fill="rgb(206,74,20)" fg:x="40971" fg:w="15"/><text x="65.7159%" y="159.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (15 samples, 0.02%)</title><rect x="65.5987%" y="133" width="0.0240%" height="15" fill="rgb(230,138,44)" fg:x="40971" fg:w="15"/><text x="65.7159%" y="143.50"></text></g><g><title>acpi_ev_gpe_detect (15 samples, 0.02%)</title><rect x="65.5987%" y="117" width="0.0240%" height="15" fill="rgb(235,182,43)" fg:x="40971" fg:w="15"/><text x="65.7159%" y="127.50"></text></g><g><title>acpi_ev_detect_gpe (15 samples, 0.02%)</title><rect x="65.5987%" y="101" width="0.0240%" height="15" fill="rgb(242,16,51)" fg:x="40971" fg:w="15"/><text x="65.7159%" y="111.50"></text></g><g><title>acpi_hw_gpe_read (10 samples, 0.02%)</title><rect x="65.6067%" y="85" width="0.0160%" height="15" fill="rgb(248,9,4)" fg:x="40976" fg:w="10"/><text x="65.7239%" y="95.50"></text></g><g><title>acpi_os_read_port (10 samples, 0.02%)</title><rect x="65.6067%" y="69" width="0.0160%" height="15" fill="rgb(210,31,22)" fg:x="40976" fg:w="10"/><text x="65.7239%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (4,300 samples, 6.88%)</title><rect x="58.7428%" y="277" width="6.8847%" height="15" fill="rgb(239,54,39)" fg:x="36689" fg:w="4300"/><text x="58.8600%" y="287.50">core::cmp::impls::&lt;imp..</text></g><g><title>core::cmp::PartialOrd::le (4,140 samples, 6.63%)</title><rect x="58.9990%" y="261" width="6.6286%" height="15" fill="rgb(230,99,41)" fg:x="36849" fg:w="4140"/><text x="59.1162%" y="271.50">core::cmp::PartialOrd..</text></g><g><title>asm_common_interrupt (14 samples, 0.02%)</title><rect x="67.1326%" y="213" width="0.0224%" height="15" fill="rgb(253,106,12)" fg:x="41929" fg:w="14"/><text x="67.2498%" y="223.50"></text></g><g><title>common_interrupt (14 samples, 0.02%)</title><rect x="67.1326%" y="197" width="0.0224%" height="15" fill="rgb(213,46,41)" fg:x="41929" fg:w="14"/><text x="67.2498%" y="207.50"></text></g><g><title>__common_interrupt (14 samples, 0.02%)</title><rect x="67.1326%" y="181" width="0.0224%" height="15" fill="rgb(215,133,35)" fg:x="41929" fg:w="14"/><text x="67.2498%" y="191.50"></text></g><g><title>handle_fasteoi_irq (13 samples, 0.02%)</title><rect x="67.1342%" y="165" width="0.0208%" height="15" fill="rgb(213,28,5)" fg:x="41930" fg:w="13"/><text x="67.2514%" y="175.50"></text></g><g><title>handle_irq_event (13 samples, 0.02%)</title><rect x="67.1342%" y="149" width="0.0208%" height="15" fill="rgb(215,77,49)" fg:x="41930" fg:w="13"/><text x="67.2514%" y="159.50"></text></g><g><title>__handle_irq_event_percpu (13 samples, 0.02%)</title><rect x="67.1342%" y="133" width="0.0208%" height="15" fill="rgb(248,100,22)" fg:x="41930" fg:w="13"/><text x="67.2514%" y="143.50"></text></g><g><title>acpi_irq (13 samples, 0.02%)</title><rect x="67.1342%" y="117" width="0.0208%" height="15" fill="rgb(208,67,9)" fg:x="41930" fg:w="13"/><text x="67.2514%" y="127.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (13 samples, 0.02%)</title><rect x="67.1342%" y="101" width="0.0208%" height="15" fill="rgb(219,133,21)" fg:x="41930" fg:w="13"/><text x="67.2514%" y="111.50"></text></g><g><title>acpi_ev_gpe_detect (13 samples, 0.02%)</title><rect x="67.1342%" y="85" width="0.0208%" height="15" fill="rgb(246,46,29)" fg:x="41930" fg:w="13"/><text x="67.2514%" y="95.50"></text></g><g><title>acpi_ev_detect_gpe (13 samples, 0.02%)</title><rect x="67.1342%" y="69" width="0.0208%" height="15" fill="rgb(246,185,52)" fg:x="41930" fg:w="13"/><text x="67.2514%" y="79.50"></text></g><g><title>acpi_hw_gpe_read (12 samples, 0.02%)</title><rect x="67.1358%" y="53" width="0.0192%" height="15" fill="rgb(252,136,11)" fg:x="41931" fg:w="12"/><text x="67.2530%" y="63.50"></text></g><g><title>acpi_os_read_port (12 samples, 0.02%)</title><rect x="67.1358%" y="37" width="0.0192%" height="15" fill="rgb(219,138,53)" fg:x="41931" fg:w="12"/><text x="67.2530%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (955 samples, 1.53%)</title><rect x="65.6276%" y="229" width="1.5291%" height="15" fill="rgb(211,51,23)" fg:x="40989" fg:w="955"/><text x="65.7447%" y="239.50">cor..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (30,056 samples, 48.12%)</title><rect x="19.0451%" y="293" width="48.1227%" height="15" fill="rgb(247,221,28)" fg:x="11895" fg:w="30056"/><text x="19.1623%" y="303.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom</text></g><g><title>core::mem::drop (962 samples, 1.54%)</title><rect x="65.6276%" y="277" width="1.5403%" height="15" fill="rgb(251,222,45)" fg:x="40989" fg:w="962"/><text x="65.7447%" y="287.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::structures::weighted_cell::WeightedCell&gt;&gt; (962 samples, 1.54%)</title><rect x="65.6276%" y="261" width="1.5403%" height="15" fill="rgb(217,162,53)" fg:x="40989" fg:w="962"/><text x="65.7447%" y="271.50">cor..</text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (962 samples, 1.54%)</title><rect x="65.6276%" y="245" width="1.5403%" height="15" fill="rgb(229,93,14)" fg:x="40989" fg:w="962"/><text x="65.7447%" y="255.50">&lt;al..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (7 samples, 0.01%)</title><rect x="67.1566%" y="229" width="0.0112%" height="15" fill="rgb(209,67,49)" fg:x="41944" fg:w="7"/><text x="67.2738%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (7 samples, 0.01%)</title><rect x="67.1566%" y="213" width="0.0112%" height="15" fill="rgb(213,87,29)" fg:x="41944" fg:w="7"/><text x="67.2738%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.01%)</title><rect x="67.1566%" y="197" width="0.0112%" height="15" fill="rgb(205,151,52)" fg:x="41944" fg:w="7"/><text x="67.2738%" y="207.50"></text></g><g><title>core::ptr::read (631 samples, 1.01%)</title><rect x="67.1678%" y="229" width="1.0103%" height="15" fill="rgb(253,215,39)" fg:x="41951" fg:w="631"/><text x="67.2850%" y="239.50">c..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (35,428 samples, 56.72%)</title><rect x="12.4037%" y="309" width="56.7238%" height="15" fill="rgb(221,220,41)" fg:x="7747" fg:w="35428"/><text x="12.5209%" y="319.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}}</text></g><g><title>core::mem::swap (1,224 samples, 1.96%)</title><rect x="67.1678%" y="293" width="1.9597%" height="15" fill="rgb(218,133,21)" fg:x="41951" fg:w="1224"/><text x="67.2850%" y="303.50">core:..</text></g><g><title>core::ptr::swap_nonoverlapping (1,224 samples, 1.96%)</title><rect x="67.1678%" y="277" width="1.9597%" height="15" fill="rgb(221,193,43)" fg:x="41951" fg:w="1224"/><text x="67.2850%" y="287.50">core:..</text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (1,224 samples, 1.96%)</title><rect x="67.1678%" y="261" width="1.9597%" height="15" fill="rgb(240,128,52)" fg:x="41951" fg:w="1224"/><text x="67.2850%" y="271.50">core:..</text></g><g><title>core::mem::swap_simple (1,224 samples, 1.96%)</title><rect x="67.1678%" y="245" width="1.9597%" height="15" fill="rgb(253,114,12)" fg:x="41951" fg:w="1224"/><text x="67.2850%" y="255.50">core:..</text></g><g><title>core::ptr::write (593 samples, 0.95%)</title><rect x="68.1781%" y="229" width="0.9495%" height="15" fill="rgb(215,223,47)" fg:x="42582" fg:w="593"/><text x="68.2953%" y="239.50">c..</text></g><g><title>core::option::Option&lt;T&gt;::map (36,038 samples, 57.70%)</title><rect x="11.4287%" y="325" width="57.7005%" height="15" fill="rgb(248,225,23)" fg:x="7138" fg:w="36038"/><text x="11.5459%" y="335.50">core::option::Option&lt;T&gt;::map</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (37,413 samples, 59.90%)</title><rect x="9.2287%" y="341" width="59.9020%" height="15" fill="rgb(250,108,0)" fg:x="5764" fg:w="37413"/><text x="9.3459%" y="351.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.01%)</title><rect x="69.2572%" y="309" width="0.0112%" height="15" fill="rgb(228,208,7)" fg:x="43256" fg:w="7"/><text x="69.3744%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::len (663 samples, 1.06%)</title><rect x="69.2572%" y="325" width="1.0615%" height="15" fill="rgb(244,45,10)" fg:x="43256" fg:w="663"/><text x="69.3744%" y="335.50">a..</text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::push (656 samples, 1.05%)</title><rect x="69.2685%" y="309" width="1.0503%" height="15" fill="rgb(207,125,25)" fg:x="43263" fg:w="656"/><text x="69.3856%" y="319.50">f..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (8 samples, 0.01%)</title><rect x="72.2257%" y="309" width="0.0128%" height="15" fill="rgb(210,195,18)" fg:x="45110" fg:w="8"/><text x="72.3429%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (8 samples, 0.01%)</title><rect x="72.2257%" y="293" width="0.0128%" height="15" fill="rgb(249,80,12)" fg:x="45110" fg:w="8"/><text x="72.3429%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8 samples, 0.01%)</title><rect x="72.2257%" y="277" width="0.0128%" height="15" fill="rgb(221,65,9)" fg:x="45110" fg:w="8"/><text x="72.3429%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8 samples, 0.01%)</title><rect x="72.2257%" y="261" width="0.0128%" height="15" fill="rgb(235,49,36)" fg:x="45110" fg:w="8"/><text x="72.3429%" y="271.50"></text></g><g><title>acpi_ec_gpe_handler (7 samples, 0.01%)</title><rect x="89.4279%" y="133" width="0.0112%" height="15" fill="rgb(225,32,20)" fg:x="55854" fg:w="7"/><text x="89.5451%" y="143.50"></text></g><g><title>clear_gpe_and_advance_transaction.constprop.0 (7 samples, 0.01%)</title><rect x="89.4279%" y="117" width="0.0112%" height="15" fill="rgb(215,141,46)" fg:x="55854" fg:w="7"/><text x="89.5451%" y="127.50"></text></g><g><title>__common_interrupt (67 samples, 0.11%)</title><rect x="89.4279%" y="261" width="0.1073%" height="15" fill="rgb(250,160,47)" fg:x="55854" fg:w="67"/><text x="89.5451%" y="271.50"></text></g><g><title>handle_fasteoi_irq (67 samples, 0.11%)</title><rect x="89.4279%" y="245" width="0.1073%" height="15" fill="rgb(216,222,40)" fg:x="55854" fg:w="67"/><text x="89.5451%" y="255.50"></text></g><g><title>handle_irq_event (67 samples, 0.11%)</title><rect x="89.4279%" y="229" width="0.1073%" height="15" fill="rgb(234,217,39)" fg:x="55854" fg:w="67"/><text x="89.5451%" y="239.50"></text></g><g><title>__handle_irq_event_percpu (67 samples, 0.11%)</title><rect x="89.4279%" y="213" width="0.1073%" height="15" fill="rgb(207,178,40)" fg:x="55854" fg:w="67"/><text x="89.5451%" y="223.50"></text></g><g><title>acpi_irq (67 samples, 0.11%)</title><rect x="89.4279%" y="197" width="0.1073%" height="15" fill="rgb(221,136,13)" fg:x="55854" fg:w="67"/><text x="89.5451%" y="207.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (67 samples, 0.11%)</title><rect x="89.4279%" y="181" width="0.1073%" height="15" fill="rgb(249,199,10)" fg:x="55854" fg:w="67"/><text x="89.5451%" y="191.50"></text></g><g><title>acpi_ev_gpe_detect (67 samples, 0.11%)</title><rect x="89.4279%" y="165" width="0.1073%" height="15" fill="rgb(249,222,13)" fg:x="55854" fg:w="67"/><text x="89.5451%" y="175.50"></text></g><g><title>acpi_ev_detect_gpe (67 samples, 0.11%)</title><rect x="89.4279%" y="149" width="0.1073%" height="15" fill="rgb(244,185,38)" fg:x="55854" fg:w="67"/><text x="89.5451%" y="159.50"></text></g><g><title>acpi_hw_gpe_read (60 samples, 0.10%)</title><rect x="89.4391%" y="133" width="0.0961%" height="15" fill="rgb(236,202,9)" fg:x="55861" fg:w="60"/><text x="89.5563%" y="143.50"></text></g><g><title>acpi_os_read_port (60 samples, 0.10%)</title><rect x="89.4391%" y="117" width="0.0961%" height="15" fill="rgb(250,229,37)" fg:x="55861" fg:w="60"/><text x="89.5563%" y="127.50"></text></g><g><title>asm_common_interrupt (69 samples, 0.11%)</title><rect x="89.4279%" y="293" width="0.1105%" height="15" fill="rgb(206,174,23)" fg:x="55854" fg:w="69"/><text x="89.5451%" y="303.50"></text></g><g><title>common_interrupt (69 samples, 0.11%)</title><rect x="89.4279%" y="277" width="0.1105%" height="15" fill="rgb(211,33,43)" fg:x="55854" fg:w="69"/><text x="89.5451%" y="287.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (11 samples, 0.02%)</title><rect x="89.5384%" y="293" width="0.0176%" height="15" fill="rgb(245,58,50)" fg:x="55923" fg:w="11"/><text x="89.6556%" y="303.50"></text></g><g><title>sysvec_apic_timer_interrupt (11 samples, 0.02%)</title><rect x="89.5384%" y="277" width="0.0176%" height="15" fill="rgb(244,68,36)" fg:x="55923" fg:w="11"/><text x="89.6556%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (567 samples, 0.91%)</title><rect x="89.5560%" y="293" width="0.9078%" height="15" fill="rgb(232,229,15)" fg:x="55934" fg:w="567"/><text x="89.6732%" y="303.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (567 samples, 0.91%)</title><rect x="89.5560%" y="277" width="0.9078%" height="15" fill="rgb(254,30,23)" fg:x="55934" fg:w="567"/><text x="89.6732%" y="287.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (567 samples, 0.91%)</title><rect x="89.5560%" y="261" width="0.9078%" height="15" fill="rgb(235,160,14)" fg:x="55934" fg:w="567"/><text x="89.6732%" y="271.50">c..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (11,383 samples, 18.23%)</title><rect x="72.2401%" y="309" width="18.2253%" height="15" fill="rgb(212,155,44)" fg:x="45119" fg:w="11383"/><text x="72.3573%" y="319.50">alloc::collections::binary_heap::Hole&lt;T&gt;::new</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (642 samples, 1.03%)</title><rect x="90.4654%" y="309" width="1.0279%" height="15" fill="rgb(226,2,50)" fg:x="56502" fg:w="642"/><text x="90.5826%" y="319.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (671 samples, 1.07%)</title><rect x="91.4933%" y="277" width="1.0743%" height="15" fill="rgb(234,177,6)" fg:x="57144" fg:w="671"/><text x="91.6105%" y="287.50">c..</text></g><g><title>asm_common_interrupt (10 samples, 0.02%)</title><rect x="92.5517%" y="261" width="0.0160%" height="15" fill="rgb(217,24,9)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="271.50"></text></g><g><title>common_interrupt (10 samples, 0.02%)</title><rect x="92.5517%" y="245" width="0.0160%" height="15" fill="rgb(220,13,46)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="255.50"></text></g><g><title>__common_interrupt (10 samples, 0.02%)</title><rect x="92.5517%" y="229" width="0.0160%" height="15" fill="rgb(239,221,27)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="239.50"></text></g><g><title>handle_fasteoi_irq (10 samples, 0.02%)</title><rect x="92.5517%" y="213" width="0.0160%" height="15" fill="rgb(222,198,25)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="223.50"></text></g><g><title>handle_irq_event (10 samples, 0.02%)</title><rect x="92.5517%" y="197" width="0.0160%" height="15" fill="rgb(211,99,13)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="207.50"></text></g><g><title>__handle_irq_event_percpu (10 samples, 0.02%)</title><rect x="92.5517%" y="181" width="0.0160%" height="15" fill="rgb(232,111,31)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="191.50"></text></g><g><title>acpi_irq (10 samples, 0.02%)</title><rect x="92.5517%" y="165" width="0.0160%" height="15" fill="rgb(245,82,37)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="175.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (10 samples, 0.02%)</title><rect x="92.5517%" y="149" width="0.0160%" height="15" fill="rgb(227,149,46)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="159.50"></text></g><g><title>acpi_ev_gpe_detect (10 samples, 0.02%)</title><rect x="92.5517%" y="133" width="0.0160%" height="15" fill="rgb(218,36,50)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="143.50"></text></g><g><title>acpi_ev_detect_gpe (10 samples, 0.02%)</title><rect x="92.5517%" y="117" width="0.0160%" height="15" fill="rgb(226,80,48)" fg:x="57805" fg:w="10"/><text x="92.6689%" y="127.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (13,901 samples, 22.26%)</title><rect x="70.3188%" y="325" width="22.2569%" height="15" fill="rgb(238,224,15)" fg:x="43919" fg:w="13901"/><text x="70.4360%" y="335.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::structures::weighted_cell::WeightedCell&gt;&gt; (676 samples, 1.08%)</title><rect x="91.4933%" y="309" width="1.0823%" height="15" fill="rgb(241,136,10)" fg:x="57144" fg:w="676"/><text x="91.6105%" y="319.50">c..</text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (676 samples, 1.08%)</title><rect x="91.4933%" y="293" width="1.0823%" height="15" fill="rgb(208,32,45)" fg:x="57144" fg:w="676"/><text x="91.6105%" y="303.50">&lt;..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (17 samples, 0.03%)</title><rect x="94.4442%" y="277" width="0.0272%" height="15" fill="rgb(207,135,9)" fg:x="58987" fg:w="17"/><text x="94.5614%" y="287.50"></text></g><g><title>checked_request2size (8 samples, 0.01%)</title><rect x="94.5034%" y="245" width="0.0128%" height="15" fill="rgb(206,86,44)" fg:x="59024" fg:w="8"/><text x="94.6206%" y="255.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.05%)</title><rect x="94.4890%" y="261" width="0.0464%" height="15" fill="rgb(245,177,15)" fg:x="59015" fg:w="29"/><text x="94.6062%" y="271.50"></text></g><g><title>tcache_get (12 samples, 0.02%)</title><rect x="94.5162%" y="245" width="0.0192%" height="15" fill="rgb(206,64,50)" fg:x="59032" fg:w="12"/><text x="94.6334%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hdd49911bdf5b8778E.llvm.11472393318252065123 (47 samples, 0.08%)</title><rect x="94.4714%" y="277" width="0.0753%" height="15" fill="rgb(234,36,40)" fg:x="59004" fg:w="47"/><text x="94.5886%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (29 samples, 0.05%)</title><rect x="94.5466%" y="277" width="0.0464%" height="15" fill="rgb(213,64,8)" fg:x="59051" fg:w="29"/><text x="94.6638%" y="287.50"></text></g><g><title>__memcpy_evex_unaligned_erms (281 samples, 0.45%)</title><rect x="95.1038%" y="181" width="0.4499%" height="15" fill="rgb(210,75,36)" fg:x="59399" fg:w="281"/><text x="95.2210%" y="191.50"></text></g><g><title>free_perturb (9 samples, 0.01%)</title><rect x="95.9060%" y="165" width="0.0144%" height="15" fill="rgb(229,88,21)" fg:x="59900" fg:w="9"/><text x="96.0232%" y="175.50"></text></g><g><title>tcache_put (7 samples, 0.01%)</title><rect x="95.9204%" y="165" width="0.0112%" height="15" fill="rgb(252,204,47)" fg:x="59909" fg:w="7"/><text x="96.0376%" y="175.50"></text></g><g><title>_int_free (252 samples, 0.40%)</title><rect x="95.5537%" y="181" width="0.4035%" height="15" fill="rgb(208,77,27)" fg:x="59680" fg:w="252"/><text x="95.6709%" y="191.50"></text></g><g><title>unlink_chunk (16 samples, 0.03%)</title><rect x="95.9316%" y="165" width="0.0256%" height="15" fill="rgb(221,76,26)" fg:x="59916" fg:w="16"/><text x="96.0488%" y="175.50"></text></g><g><title>alloc_perturb (14 samples, 0.02%)</title><rect x="96.9211%" y="165" width="0.0224%" height="15" fill="rgb(225,139,18)" fg:x="60534" fg:w="14"/><text x="97.0383%" y="175.50"></text></g><g><title>checked_request2size (8 samples, 0.01%)</title><rect x="96.9547%" y="165" width="0.0128%" height="15" fill="rgb(230,137,11)" fg:x="60555" fg:w="8"/><text x="97.0719%" y="175.50"></text></g><g><title>tcache_put (7 samples, 0.01%)</title><rect x="96.9675%" y="165" width="0.0112%" height="15" fill="rgb(212,28,1)" fg:x="60563" fg:w="7"/><text x="97.0847%" y="175.50"></text></g><g><title>_int_malloc (716 samples, 1.15%)</title><rect x="95.9572%" y="181" width="1.1464%" height="15" fill="rgb(248,164,17)" fg:x="59932" fg:w="716"/><text x="96.0744%" y="191.50">_i..</text></g><g><title>unlink_chunk (78 samples, 0.12%)</title><rect x="96.9787%" y="165" width="0.1249%" height="15" fill="rgb(222,171,42)" fg:x="60570" fg:w="78"/><text x="97.0959%" y="175.50"></text></g><g><title>_int_realloc (1,416 samples, 2.27%)</title><rect x="94.8701%" y="197" width="2.2672%" height="15" fill="rgb(243,84,45)" fg:x="59253" fg:w="1416"/><text x="94.9873%" y="207.50">_int_r..</text></g><g><title>unlink_chunk (15 samples, 0.02%)</title><rect x="97.1132%" y="181" width="0.0240%" height="15" fill="rgb(252,49,23)" fg:x="60654" fg:w="15"/><text x="97.2304%" y="191.50"></text></g><g><title>arena_for_chunk (24 samples, 0.04%)</title><rect x="97.1372%" y="197" width="0.0384%" height="15" fill="rgb(215,19,7)" fg:x="60669" fg:w="24"/><text x="97.2544%" y="207.50"></text></g><g><title>__GI___libc_realloc (1,591 samples, 2.55%)</title><rect x="94.6603%" y="213" width="2.5474%" height="15" fill="rgb(238,81,41)" fg:x="59122" fg:w="1591"/><text x="94.7775%" y="223.50">__GI___..</text></g><g><title>checked_request2size (20 samples, 0.03%)</title><rect x="97.1757%" y="197" width="0.0320%" height="15" fill="rgb(210,199,37)" fg:x="60693" fg:w="20"/><text x="97.2928%" y="207.50"></text></g><g><title>__rdl_realloc (36 samples, 0.06%)</title><rect x="97.2077%" y="213" width="0.0576%" height="15" fill="rgb(244,192,49)" fg:x="60713" fg:w="36"/><text x="97.3249%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,642 samples, 2.63%)</title><rect x="94.6603%" y="261" width="2.6290%" height="15" fill="rgb(226,211,11)" fg:x="59122" fg:w="1642"/><text x="94.7775%" y="271.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::grow_impl (1,642 samples, 2.63%)</title><rect x="94.6603%" y="245" width="2.6290%" height="15" fill="rgb(236,162,54)" fg:x="59122" fg:w="1642"/><text x="94.7775%" y="255.50">alloc::..</text></g><g><title>alloc::alloc::realloc (1,642 samples, 2.63%)</title><rect x="94.6603%" y="229" width="2.6290%" height="15" fill="rgb(220,229,9)" fg:x="59122" fg:w="1642"/><text x="94.7775%" y="239.50">alloc::..</text></g><g><title>__rust_realloc (15 samples, 0.02%)</title><rect x="97.2653%" y="213" width="0.0240%" height="15" fill="rgb(250,87,22)" fg:x="60749" fg:w="15"/><text x="97.3825%" y="223.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hdd49911bdf5b8778E.llvm.11472393318252065123 (10 samples, 0.02%)</title><rect x="97.2893%" y="261" width="0.0160%" height="15" fill="rgb(239,43,17)" fg:x="60764" fg:w="10"/><text x="97.4065%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,709 samples, 2.74%)</title><rect x="94.5963%" y="277" width="2.7363%" height="15" fill="rgb(231,177,25)" fg:x="59082" fg:w="1709"/><text x="94.7135%" y="287.50">alloc::..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (17 samples, 0.03%)</title><rect x="97.3053%" y="261" width="0.0272%" height="15" fill="rgb(219,179,1)" fg:x="60774" fg:w="17"/><text x="97.4225%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (14 samples, 0.02%)</title><rect x="97.3326%" y="277" width="0.0224%" height="15" fill="rgb(238,219,53)" fg:x="60791" fg:w="14"/><text x="97.4498%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (14 samples, 0.02%)</title><rect x="97.3326%" y="261" width="0.0224%" height="15" fill="rgb(232,167,36)" fg:x="60791" fg:w="14"/><text x="97.4498%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (38 samples, 0.06%)</title><rect x="97.3550%" y="245" width="0.0608%" height="15" fill="rgb(244,19,51)" fg:x="60805" fg:w="38"/><text x="97.4722%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,881 samples, 3.01%)</title><rect x="94.4074%" y="309" width="3.0117%" height="15" fill="rgb(224,6,22)" fg:x="58964" fg:w="1881"/><text x="94.5245%" y="319.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,879 samples, 3.01%)</title><rect x="94.4106%" y="293" width="3.0085%" height="15" fill="rgb(224,145,5)" fg:x="58966" fg:w="1879"/><text x="94.5277%" y="303.50">alloc::r..</text></g><g><title>core::cmp::max (40 samples, 0.06%)</title><rect x="97.3550%" y="277" width="0.0640%" height="15" fill="rgb(234,130,49)" fg:x="60805" fg:w="40"/><text x="97.4722%" y="287.50"></text></g><g><title>core::cmp::Ord::max (40 samples, 0.06%)</title><rect x="97.3550%" y="261" width="0.0640%" height="15" fill="rgb(254,6,2)" fg:x="60805" fg:w="40"/><text x="97.4722%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (51 samples, 0.08%)</title><rect x="97.4190%" y="309" width="0.0817%" height="15" fill="rgb(208,96,46)" fg:x="60845" fg:w="51"/><text x="97.5362%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (51 samples, 0.08%)</title><rect x="97.4190%" y="293" width="0.0817%" height="15" fill="rgb(239,3,39)" fg:x="60845" fg:w="51"/><text x="97.5362%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (15 samples, 0.02%)</title><rect x="97.5039%" y="309" width="0.0240%" height="15" fill="rgb(233,210,1)" fg:x="60898" fg:w="15"/><text x="97.6211%" y="319.50"></text></g><g><title>asm_common_interrupt (7 samples, 0.01%)</title><rect x="98.8104%" y="293" width="0.0112%" height="15" fill="rgb(244,137,37)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="303.50"></text></g><g><title>common_interrupt (7 samples, 0.01%)</title><rect x="98.8104%" y="277" width="0.0112%" height="15" fill="rgb(240,136,2)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="287.50"></text></g><g><title>__common_interrupt (7 samples, 0.01%)</title><rect x="98.8104%" y="261" width="0.0112%" height="15" fill="rgb(239,18,37)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="271.50"></text></g><g><title>handle_fasteoi_irq (7 samples, 0.01%)</title><rect x="98.8104%" y="245" width="0.0112%" height="15" fill="rgb(218,185,22)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="255.50"></text></g><g><title>handle_irq_event (7 samples, 0.01%)</title><rect x="98.8104%" y="229" width="0.0112%" height="15" fill="rgb(225,218,4)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="239.50"></text></g><g><title>__handle_irq_event_percpu (7 samples, 0.01%)</title><rect x="98.8104%" y="213" width="0.0112%" height="15" fill="rgb(230,182,32)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="223.50"></text></g><g><title>acpi_irq (7 samples, 0.01%)</title><rect x="98.8104%" y="197" width="0.0112%" height="15" fill="rgb(242,56,43)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="207.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (7 samples, 0.01%)</title><rect x="98.8104%" y="181" width="0.0112%" height="15" fill="rgb(233,99,24)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="191.50"></text></g><g><title>acpi_ev_gpe_detect (7 samples, 0.01%)</title><rect x="98.8104%" y="165" width="0.0112%" height="15" fill="rgb(234,209,42)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="175.50"></text></g><g><title>acpi_ev_detect_gpe (7 samples, 0.01%)</title><rect x="98.8104%" y="149" width="0.0112%" height="15" fill="rgb(227,7,12)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="159.50"></text></g><g><title>acpi_hw_gpe_read (7 samples, 0.01%)</title><rect x="98.8104%" y="133" width="0.0112%" height="15" fill="rgb(245,203,43)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="143.50"></text></g><g><title>acpi_os_read_port (7 samples, 0.01%)</title><rect x="98.8104%" y="117" width="0.0112%" height="15" fill="rgb(238,205,33)" fg:x="61714" fg:w="7"/><text x="98.9276%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,902 samples, 6.25%)</title><rect x="92.5757%" y="325" width="6.2475%" height="15" fill="rgb(231,56,7)" fg:x="57820" fg:w="3902"/><text x="92.6929%" y="335.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>core::ptr::write (809 samples, 1.30%)</title><rect x="97.5279%" y="309" width="1.2953%" height="15" fill="rgb(244,186,29)" fg:x="60913" fg:w="809"/><text x="97.6451%" y="319.50">co..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (18,549 samples, 29.70%)</title><rect x="69.1308%" y="341" width="29.6988%" height="15" fill="rgb(234,111,31)" fg:x="43177" fg:w="18549"/><text x="69.2479%" y="351.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push</text></g><g><title>__GI___libc_free (54 samples, 0.09%)</title><rect x="98.8408%" y="245" width="0.0865%" height="15" fill="rgb(241,149,10)" fg:x="61733" fg:w="54"/><text x="98.9580%" y="255.50"></text></g><g><title>_int_free (49 samples, 0.08%)</title><rect x="98.8488%" y="229" width="0.0785%" height="15" fill="rgb(249,206,44)" fg:x="61738" fg:w="49"/><text x="98.9660%" y="239.50"></text></g><g><title>unlink_chunk (8 samples, 0.01%)</title><rect x="98.9145%" y="213" width="0.0128%" height="15" fill="rgb(251,153,30)" fg:x="61779" fg:w="8"/><text x="99.0316%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (55 samples, 0.09%)</title><rect x="98.8408%" y="277" width="0.0881%" height="15" fill="rgb(239,152,38)" fg:x="61733" fg:w="55"/><text x="98.9580%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (55 samples, 0.09%)</title><rect x="98.8408%" y="261" width="0.0881%" height="15" fill="rgb(249,139,47)" fg:x="61733" fg:w="55"/><text x="98.9580%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::BinaryHeap&lt;fringe_vs_astar::structures::weighted_cell::WeightedCell&gt;&gt; (58 samples, 0.09%)</title><rect x="98.8408%" y="341" width="0.0929%" height="15" fill="rgb(244,64,35)" fg:x="61733" fg:w="58"/><text x="98.9580%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fringe_vs_astar::structures::weighted_cell::WeightedCell&gt;&gt; (58 samples, 0.09%)</title><rect x="98.8408%" y="325" width="0.0929%" height="15" fill="rgb(216,46,15)" fg:x="61733" fg:w="58"/><text x="98.9580%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fringe_vs_astar::structures::weighted_cell::WeightedCell&gt;&gt; (58 samples, 0.09%)</title><rect x="98.8408%" y="309" width="0.0929%" height="15" fill="rgb(250,74,19)" fg:x="61733" fg:w="58"/><text x="98.9580%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.09%)</title><rect x="98.8408%" y="293" width="0.0929%" height="15" fill="rgb(249,42,33)" fg:x="61733" fg:w="58"/><text x="98.9580%" y="303.50"></text></g><g><title>fringe_vs_astar::algorithms::astar::AStar::solve (58,878 samples, 94.27%)</title><rect x="5.6951%" y="389" width="94.2697%" height="15" fill="rgb(242,149,17)" fg:x="3557" fg:w="58878"/><text x="5.8123%" y="399.50">fringe_vs_astar::algorithms::astar::AStar::solve</text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::push (58,136 samples, 93.08%)</title><rect x="6.8831%" y="373" width="93.0816%" height="15" fill="rgb(244,29,21)" fg:x="4299" fg:w="58136"/><text x="7.0003%" y="383.50">fringe_vs_astar::structures::frontier::Frontier::push</text></g><g><title>fringe_vs_astar::structures::frontier::Frontier::replace (57,332 samples, 91.79%)</title><rect x="8.1704%" y="357" width="91.7944%" height="15" fill="rgb(220,130,37)" fg:x="5103" fg:w="57332"/><text x="8.2876%" y="367.50">fringe_vs_astar::structures::frontier::Frontier::replace</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (644 samples, 1.03%)</title><rect x="98.9337%" y="341" width="1.0311%" height="15" fill="rgb(211,67,2)" fg:x="61791" fg:w="644"/><text x="99.0509%" y="351.50">c..</text></g><g><title>fringe_vs_astar::context::Context::solve (59,372 samples, 95.06%)</title><rect x="4.9154%" y="405" width="95.0606%" height="15" fill="rgb(235,68,52)" fg:x="3070" fg:w="59372"/><text x="5.0326%" y="415.50">fringe_vs_astar::context::Context::solve</text></g><g><title>fringe_vs_astar::context::Context::run_full_file (59,374 samples, 95.06%)</title><rect x="4.9138%" y="421" width="95.0638%" height="15" fill="rgb(246,142,3)" fg:x="3069" fg:w="59374"/><text x="5.0310%" y="431.50">fringe_vs_astar::context::Context::run_full_file</text></g><g><title>_start (59,376 samples, 95.07%)</title><rect x="4.9138%" y="581" width="95.0670%" height="15" fill="rgb(241,25,7)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="591.50">_start</text></g><g><title>__libc_start_main_impl (59,376 samples, 95.07%)</title><rect x="4.9138%" y="565" width="95.0670%" height="15" fill="rgb(242,119,39)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="575.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (59,376 samples, 95.07%)</title><rect x="4.9138%" y="549" width="95.0670%" height="15" fill="rgb(241,98,45)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="559.50">__libc_start_call_main</text></g><g><title>main (59,376 samples, 95.07%)</title><rect x="4.9138%" y="533" width="95.0670%" height="15" fill="rgb(254,28,30)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (59,376 samples, 95.07%)</title><rect x="4.9138%" y="517" width="95.0670%" height="15" fill="rgb(241,142,54)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (59,376 samples, 95.07%)</title><rect x="4.9138%" y="501" width="95.0670%" height="15" fill="rgb(222,85,15)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="511.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (59,376 samples, 95.07%)</title><rect x="4.9138%" y="485" width="95.0670%" height="15" fill="rgb(210,85,47)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (59,376 samples, 95.07%)</title><rect x="4.9138%" y="469" width="95.0670%" height="15" fill="rgb(224,206,25)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>fringe_vs_astar::main (59,376 samples, 95.07%)</title><rect x="4.9138%" y="453" width="95.0670%" height="15" fill="rgb(243,201,19)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="463.50">fringe_vs_astar::main</text></g><g><title>fringe_vs_astar::context::Context::run (59,376 samples, 95.07%)</title><rect x="4.9138%" y="437" width="95.0670%" height="15" fill="rgb(236,59,4)" fg:x="3069" fg:w="59376"/><text x="5.0310%" y="447.50">fringe_vs_astar::context::Context::run</text></g><g><title>fringe-vs-astar (62,452 samples, 99.99%)</title><rect x="0.0000%" y="597" width="99.9920%" height="15" fill="rgb(254,179,45)" fg:x="0" fg:w="62452"/><text x="0.1172%" y="607.50">fringe-vs-astar</text></g><g><title>all (62,457 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(226,14,10)" fg:x="0" fg:w="62457"/><text x="0.1172%" y="623.50"></text></g></svg></svg>