<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2560" height="806" onload="init(evt)" viewBox="0 0 2560 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2550" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2550" y="789.00"> </text><svg id="frames" x="10" width="2540" total_samples="1442"><g><title>__GI___libc_realloc (1 samples, 0.07%)</title><rect x="0.0000%" y="709" width="0.0693%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.1172%" y="719.50"></text></g><g><title>__rdl_realloc (1 samples, 0.07%)</title><rect x="0.0693%" y="709" width="0.0693%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.1865%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.07%)</title><rect x="0.1387%" y="709" width="0.0693%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.2559%" y="719.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (1 samples, 0.07%)</title><rect x="0.2080%" y="709" width="0.0693%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3252%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.07%)</title><rect x="0.2080%" y="693" width="0.0693%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3252%" y="703.50"></text></g><g><title>[[stack]] (5 samples, 0.35%)</title><rect x="0.0000%" y="725" width="0.3467%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.1172%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="0.2774%" y="709" width="0.0693%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.3946%" y="719.50"></text></g><g><title>&lt;fringe_vs_astar::graph::AdjacencyGridGraph as fringe_vs_astar::graph::Graph&gt;::neighbors (1 samples, 0.07%)</title><rect x="0.3467%" y="709" width="0.0693%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.4639%" y="719.50"></text></g><g><title>&lt;fringe_vs_astar::map::GridMap as fringe_vs_astar::map::Map&gt;::get_cell (2 samples, 0.14%)</title><rect x="0.4161%" y="709" width="0.1387%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="2"/><text x="0.5333%" y="719.50"></text></g><g><title>__rdl_realloc (1 samples, 0.07%)</title><rect x="0.5548%" y="709" width="0.0693%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="1"/><text x="0.6720%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.07%)</title><rect x="0.6241%" y="709" width="0.0693%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="1"/><text x="0.7413%" y="719.50"></text></g><g><title>_int_malloc (1 samples, 0.07%)</title><rect x="0.6935%" y="709" width="0.0693%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="1"/><text x="0.8107%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.07%)</title><rect x="0.7628%" y="709" width="0.0693%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="1"/><text x="0.8800%" y="719.50"></text></g><g><title>fringe_vs_astar::graph::generate_neighbors (2 samples, 0.14%)</title><rect x="0.8322%" y="709" width="0.1387%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="2"/><text x="0.9494%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.07%)</title><rect x="0.9015%" y="693" width="0.0693%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="1"/><text x="1.0187%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="0.9015%" y="677" width="0.0693%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="1"/><text x="1.0187%" y="687.50"></text></g><g><title>[unknown] (10 samples, 0.69%)</title><rect x="0.3467%" y="725" width="0.6935%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="10"/><text x="0.4639%" y="735.50"></text></g><g><title>fringe_vs_astar::pathfinder::AStar&lt;G&gt;::solve (1 samples, 0.07%)</title><rect x="0.9709%" y="709" width="0.0693%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="1"/><text x="1.0881%" y="719.50"></text></g><g><title>_int_free (2 samples, 0.14%)</title><rect x="1.0402%" y="725" width="0.1387%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="2"/><text x="1.1574%" y="735.50"></text></g><g><title>_int_malloc (1 samples, 0.07%)</title><rect x="1.1789%" y="725" width="0.0693%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="1"/><text x="1.2961%" y="735.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.07%)</title><rect x="1.8031%" y="277" width="0.0693%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="1"/><text x="1.9202%" y="287.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.14%)</title><rect x="1.8031%" y="293" width="0.1387%" height="15" fill="rgb(235,183,28)" fg:x="26" fg:w="2"/><text x="1.9202%" y="303.50"></text></g><g><title>charge_memcg (1 samples, 0.07%)</title><rect x="1.8724%" y="277" width="0.0693%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="1"/><text x="1.9896%" y="287.50"></text></g><g><title>try_charge_memcg (1 samples, 0.07%)</title><rect x="1.8724%" y="261" width="0.0693%" height="15" fill="rgb(247,18,42)" fg:x="27" fg:w="1"/><text x="1.9896%" y="271.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.07%)</title><rect x="1.9417%" y="293" width="0.0693%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="1"/><text x="2.0589%" y="303.50"></text></g><g><title>__memcpy_evex_unaligned_erms (5 samples, 0.35%)</title><rect x="1.7337%" y="421" width="0.3467%" height="15" fill="rgb(249,31,29)" fg:x="25" fg:w="5"/><text x="1.8509%" y="431.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.35%)</title><rect x="1.7337%" y="405" width="0.3467%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="5"/><text x="1.8509%" y="415.50"></text></g><g><title>exc_page_fault (5 samples, 0.35%)</title><rect x="1.7337%" y="389" width="0.3467%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="5"/><text x="1.8509%" y="399.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.35%)</title><rect x="1.7337%" y="373" width="0.3467%" height="15" fill="rgb(214,148,48)" fg:x="25" fg:w="5"/><text x="1.8509%" y="383.50"></text></g><g><title>handle_mm_fault (4 samples, 0.28%)</title><rect x="1.8031%" y="357" width="0.2774%" height="15" fill="rgb(232,36,49)" fg:x="26" fg:w="4"/><text x="1.9202%" y="367.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.28%)</title><rect x="1.8031%" y="341" width="0.2774%" height="15" fill="rgb(209,103,24)" fg:x="26" fg:w="4"/><text x="1.9202%" y="351.50"></text></g><g><title>handle_pte_fault (4 samples, 0.28%)</title><rect x="1.8031%" y="325" width="0.2774%" height="15" fill="rgb(229,88,8)" fg:x="26" fg:w="4"/><text x="1.9202%" y="335.50"></text></g><g><title>do_anonymous_page (4 samples, 0.28%)</title><rect x="1.8031%" y="309" width="0.2774%" height="15" fill="rgb(213,181,19)" fg:x="26" fg:w="4"/><text x="1.9202%" y="319.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.07%)</title><rect x="2.0111%" y="293" width="0.0693%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="1"/><text x="2.1283%" y="303.50"></text></g><g><title>__folio_alloc (1 samples, 0.07%)</title><rect x="2.0111%" y="277" width="0.0693%" height="15" fill="rgb(241,83,37)" fg:x="29" fg:w="1"/><text x="2.1283%" y="287.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="2.0111%" y="261" width="0.0693%" height="15" fill="rgb(233,36,39)" fg:x="29" fg:w="1"/><text x="2.1283%" y="271.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="2.0111%" y="245" width="0.0693%" height="15" fill="rgb(226,3,54)" fg:x="29" fg:w="1"/><text x="2.1283%" y="255.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.07%)</title><rect x="2.0804%" y="293" width="0.0693%" height="15" fill="rgb(245,192,40)" fg:x="30" fg:w="1"/><text x="2.1976%" y="303.50"></text></g><g><title>folio_add_lru (1 samples, 0.07%)</title><rect x="2.0804%" y="277" width="0.0693%" height="15" fill="rgb(238,167,29)" fg:x="30" fg:w="1"/><text x="2.1976%" y="287.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.07%)</title><rect x="2.0804%" y="261" width="0.0693%" height="15" fill="rgb(232,182,51)" fg:x="30" fg:w="1"/><text x="2.1976%" y="271.50"></text></g><g><title>release_pages (1 samples, 0.07%)</title><rect x="2.0804%" y="245" width="0.0693%" height="15" fill="rgb(231,60,39)" fg:x="30" fg:w="1"/><text x="2.1976%" y="255.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.14%)</title><rect x="2.0804%" y="405" width="0.1387%" height="15" fill="rgb(208,69,12)" fg:x="30" fg:w="2"/><text x="2.1976%" y="415.50"></text></g><g><title>exc_page_fault (2 samples, 0.14%)</title><rect x="2.0804%" y="389" width="0.1387%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="2"/><text x="2.1976%" y="399.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.14%)</title><rect x="2.0804%" y="373" width="0.1387%" height="15" fill="rgb(213,116,39)" fg:x="30" fg:w="2"/><text x="2.1976%" y="383.50"></text></g><g><title>handle_mm_fault (2 samples, 0.14%)</title><rect x="2.0804%" y="357" width="0.1387%" height="15" fill="rgb(222,207,29)" fg:x="30" fg:w="2"/><text x="2.1976%" y="367.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.14%)</title><rect x="2.0804%" y="341" width="0.1387%" height="15" fill="rgb(206,96,30)" fg:x="30" fg:w="2"/><text x="2.1976%" y="351.50"></text></g><g><title>handle_pte_fault (2 samples, 0.14%)</title><rect x="2.0804%" y="325" width="0.1387%" height="15" fill="rgb(218,138,4)" fg:x="30" fg:w="2"/><text x="2.1976%" y="335.50"></text></g><g><title>do_anonymous_page (2 samples, 0.14%)</title><rect x="2.0804%" y="309" width="0.1387%" height="15" fill="rgb(250,191,14)" fg:x="30" fg:w="2"/><text x="2.1976%" y="319.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.07%)</title><rect x="2.1498%" y="293" width="0.0693%" height="15" fill="rgb(239,60,40)" fg:x="31" fg:w="1"/><text x="2.2670%" y="303.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.07%)</title><rect x="2.1498%" y="277" width="0.0693%" height="15" fill="rgb(206,27,48)" fg:x="31" fg:w="1"/><text x="2.2670%" y="287.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="2.1498%" y="261" width="0.0693%" height="15" fill="rgb(225,35,8)" fg:x="31" fg:w="1"/><text x="2.2670%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.62%)</title><rect x="1.6644%" y="549" width="0.6241%" height="15" fill="rgb(250,213,24)" fg:x="24" fg:w="9"/><text x="1.7815%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.62%)</title><rect x="1.6644%" y="533" width="0.6241%" height="15" fill="rgb(247,123,22)" fg:x="24" fg:w="9"/><text x="1.7815%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.62%)</title><rect x="1.6644%" y="517" width="0.6241%" height="15" fill="rgb(231,138,38)" fg:x="24" fg:w="9"/><text x="1.7815%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.62%)</title><rect x="1.6644%" y="501" width="0.6241%" height="15" fill="rgb(231,145,46)" fg:x="24" fg:w="9"/><text x="1.7815%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.62%)</title><rect x="1.6644%" y="485" width="0.6241%" height="15" fill="rgb(251,118,11)" fg:x="24" fg:w="9"/><text x="1.7815%" y="495.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.62%)</title><rect x="1.6644%" y="469" width="0.6241%" height="15" fill="rgb(217,147,25)" fg:x="24" fg:w="9"/><text x="1.7815%" y="479.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.62%)</title><rect x="1.6644%" y="453" width="0.6241%" height="15" fill="rgb(247,81,37)" fg:x="24" fg:w="9"/><text x="1.7815%" y="463.50"></text></g><g><title>_int_realloc (9 samples, 0.62%)</title><rect x="1.6644%" y="437" width="0.6241%" height="15" fill="rgb(209,12,38)" fg:x="24" fg:w="9"/><text x="1.7815%" y="447.50"></text></g><g><title>_int_malloc (3 samples, 0.21%)</title><rect x="2.0804%" y="421" width="0.2080%" height="15" fill="rgb(227,1,9)" fg:x="30" fg:w="3"/><text x="2.1976%" y="431.50"></text></g><g><title>sync_regs (1 samples, 0.07%)</title><rect x="2.2191%" y="405" width="0.0693%" height="15" fill="rgb(248,47,43)" fg:x="32" fg:w="1"/><text x="2.3363%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.69%)</title><rect x="1.6644%" y="565" width="0.6935%" height="15" fill="rgb(221,10,30)" fg:x="24" fg:w="10"/><text x="1.7815%" y="575.50"></text></g><g><title>core::ptr::write (1 samples, 0.07%)</title><rect x="2.2885%" y="549" width="0.0693%" height="15" fill="rgb(210,229,1)" fg:x="33" fg:w="1"/><text x="2.4057%" y="559.50"></text></g><g><title>sync_regs (1 samples, 0.07%)</title><rect x="2.2885%" y="533" width="0.0693%" height="15" fill="rgb(222,148,37)" fg:x="33" fg:w="1"/><text x="2.4057%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.07%)</title><rect x="2.3578%" y="565" width="0.0693%" height="15" fill="rgb(234,67,33)" fg:x="34" fg:w="1"/><text x="2.4750%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.07%)</title><rect x="2.3578%" y="549" width="0.0693%" height="15" fill="rgb(247,98,35)" fg:x="34" fg:w="1"/><text x="2.4750%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.07%)</title><rect x="2.3578%" y="533" width="0.0693%" height="15" fill="rgb(247,138,52)" fg:x="34" fg:w="1"/><text x="2.4750%" y="543.50"></text></g><g><title>&lt;fringe_vs_astar::map::GridMap as fringe_vs_astar::map::Map&gt;::get_cell (1 samples, 0.07%)</title><rect x="2.7739%" y="549" width="0.0693%" height="15" fill="rgb(213,79,30)" fg:x="40" fg:w="1"/><text x="2.8911%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.14%)</title><rect x="2.8433%" y="549" width="0.1387%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="2"/><text x="2.9605%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.14%)</title><rect x="2.8433%" y="533" width="0.1387%" height="15" fill="rgb(230,62,27)" fg:x="41" fg:w="2"/><text x="2.9605%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="2.8433%" y="517" width="0.1387%" height="15" fill="rgb(216,154,8)" fg:x="41" fg:w="2"/><text x="2.9605%" y="527.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="2.8433%" y="501" width="0.1387%" height="15" fill="rgb(244,35,45)" fg:x="41" fg:w="2"/><text x="2.9605%" y="511.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="2.8433%" y="485" width="0.1387%" height="15" fill="rgb(251,115,12)" fg:x="41" fg:w="2"/><text x="2.9605%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (1 samples, 0.07%)</title><rect x="2.9820%" y="549" width="0.0693%" height="15" fill="rgb(240,54,50)" fg:x="43" fg:w="1"/><text x="3.0992%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.07%)</title><rect x="2.9820%" y="533" width="0.0693%" height="15" fill="rgb(233,84,52)" fg:x="43" fg:w="1"/><text x="3.0992%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::chain (1 samples, 0.07%)</title><rect x="3.0513%" y="549" width="0.0693%" height="15" fill="rgb(207,117,47)" fg:x="44" fg:w="1"/><text x="3.1685%" y="559.50"></text></g><g><title>core::iter::adapters::chain::Chain&lt;A,B&gt;::new (1 samples, 0.07%)</title><rect x="3.0513%" y="533" width="0.0693%" height="15" fill="rgb(249,43,39)" fg:x="44" fg:w="1"/><text x="3.1685%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="3.1207%" y="501" width="0.1387%" height="15" fill="rgb(209,38,44)" fg:x="45" fg:w="2"/><text x="3.2379%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find::_{{closure}} (1 samples, 0.07%)</title><rect x="3.5368%" y="389" width="0.0693%" height="15" fill="rgb(236,212,23)" fg:x="51" fg:w="1"/><text x="3.6539%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.07%)</title><rect x="3.5368%" y="373" width="0.0693%" height="15" fill="rgb(242,79,21)" fg:x="51" fg:w="1"/><text x="3.6539%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.07%)</title><rect x="3.5368%" y="357" width="0.0693%" height="15" fill="rgb(211,96,35)" fg:x="51" fg:w="1"/><text x="3.6539%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.07%)</title><rect x="3.5368%" y="341" width="0.0693%" height="15" fill="rgb(253,215,40)" fg:x="51" fg:w="1"/><text x="3.6539%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.07%)</title><rect x="3.5368%" y="325" width="0.0693%" height="15" fill="rgb(211,81,21)" fg:x="51" fg:w="1"/><text x="3.6539%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.07%)</title><rect x="3.5368%" y="309" width="0.0693%" height="15" fill="rgb(208,190,38)" fg:x="51" fg:w="1"/><text x="3.6539%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::try_fold (1 samples, 0.07%)</title><rect x="3.5368%" y="293" width="0.0693%" height="15" fill="rgb(235,213,38)" fg:x="51" fg:w="1"/><text x="3.6539%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.07%)</title><rect x="3.5368%" y="277" width="0.0693%" height="15" fill="rgb(237,122,38)" fg:x="51" fg:w="1"/><text x="3.6539%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="3.5368%" y="261" width="0.0693%" height="15" fill="rgb(244,218,35)" fg:x="51" fg:w="1"/><text x="3.6539%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="3.5368%" y="245" width="0.0693%" height="15" fill="rgb(240,68,47)" fg:x="51" fg:w="1"/><text x="3.6539%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (2 samples, 0.14%)</title><rect x="3.6061%" y="389" width="0.1387%" height="15" fill="rgb(210,16,53)" fg:x="52" fg:w="2"/><text x="3.7233%" y="399.50"></text></g><g><title>core::iter::adapters::chain::and_then_or_clear (4 samples, 0.28%)</title><rect x="3.5368%" y="405" width="0.2774%" height="15" fill="rgb(235,124,12)" fg:x="51" fg:w="4"/><text x="3.6539%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="3.7448%" y="389" width="0.0693%" height="15" fill="rgb(224,169,11)" fg:x="54" fg:w="1"/><text x="3.8620%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt; (1 samples, 0.07%)</title><rect x="3.7448%" y="373" width="0.0693%" height="15" fill="rgb(250,166,2)" fg:x="54" fg:w="1"/><text x="3.8620%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="3.7448%" y="357" width="0.0693%" height="15" fill="rgb(242,216,29)" fg:x="54" fg:w="1"/><text x="3.8620%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;,core::option::IntoIter&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="3.7448%" y="341" width="0.0693%" height="15" fill="rgb(230,116,27)" fg:x="54" fg:w="1"/><text x="3.8620%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="3.7448%" y="325" width="0.0693%" height="15" fill="rgb(228,99,48)" fg:x="54" fg:w="1"/><text x="3.8620%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="3.7448%" y="309" width="0.0693%" height="15" fill="rgb(253,11,6)" fg:x="54" fg:w="1"/><text x="3.8620%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="3.7448%" y="293" width="0.0693%" height="15" fill="rgb(247,143,39)" fg:x="54" fg:w="1"/><text x="3.8620%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="3.7448%" y="277" width="0.0693%" height="15" fill="rgb(236,97,10)" fg:x="54" fg:w="1"/><text x="3.8620%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.21%)</title><rect x="3.8141%" y="261" width="0.2080%" height="15" fill="rgb(233,208,19)" fg:x="55" fg:w="3"/><text x="3.9313%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.21%)</title><rect x="3.8141%" y="245" width="0.2080%" height="15" fill="rgb(216,164,2)" fg:x="55" fg:w="3"/><text x="3.9313%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.21%)</title><rect x="3.8141%" y="229" width="0.2080%" height="15" fill="rgb(220,129,5)" fg:x="55" fg:w="3"/><text x="3.9313%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.55%)</title><rect x="3.5368%" y="437" width="0.5548%" height="15" fill="rgb(242,17,10)" fg:x="51" fg:w="8"/><text x="3.6539%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find (8 samples, 0.55%)</title><rect x="3.5368%" y="421" width="0.5548%" height="15" fill="rgb(242,107,0)" fg:x="51" fg:w="8"/><text x="3.6539%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (4 samples, 0.28%)</title><rect x="3.8141%" y="405" width="0.2774%" height="15" fill="rgb(251,28,31)" fg:x="55" fg:w="4"/><text x="3.9313%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find::_{{closure}} (4 samples, 0.28%)</title><rect x="3.8141%" y="389" width="0.2774%" height="15" fill="rgb(233,223,10)" fg:x="55" fg:w="4"/><text x="3.9313%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (4 samples, 0.28%)</title><rect x="3.8141%" y="373" width="0.2774%" height="15" fill="rgb(215,21,27)" fg:x="55" fg:w="4"/><text x="3.9313%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.28%)</title><rect x="3.8141%" y="357" width="0.2774%" height="15" fill="rgb(232,23,21)" fg:x="55" fg:w="4"/><text x="3.9313%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.28%)</title><rect x="3.8141%" y="341" width="0.2774%" height="15" fill="rgb(244,5,23)" fg:x="55" fg:w="4"/><text x="3.9313%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.28%)</title><rect x="3.8141%" y="325" width="0.2774%" height="15" fill="rgb(226,81,46)" fg:x="55" fg:w="4"/><text x="3.9313%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.28%)</title><rect x="3.8141%" y="309" width="0.2774%" height="15" fill="rgb(247,70,30)" fg:x="55" fg:w="4"/><text x="3.9313%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::try_fold (4 samples, 0.28%)</title><rect x="3.8141%" y="293" width="0.2774%" height="15" fill="rgb(212,68,19)" fg:x="55" fg:w="4"/><text x="3.9313%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.28%)</title><rect x="3.8141%" y="277" width="0.2774%" height="15" fill="rgb(240,187,13)" fg:x="55" fg:w="4"/><text x="3.9313%" y="287.50"></text></g><g><title>core::iter::adapters::flatten::try_flatten_one::_{{closure}} (1 samples, 0.07%)</title><rect x="4.0222%" y="261" width="0.0693%" height="15" fill="rgb(223,113,26)" fg:x="58" fg:w="1"/><text x="4.1394%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (1 samples, 0.07%)</title><rect x="4.0222%" y="245" width="0.0693%" height="15" fill="rgb(206,192,2)" fg:x="58" fg:w="1"/><text x="4.1394%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (1 samples, 0.07%)</title><rect x="4.0222%" y="229" width="0.0693%" height="15" fill="rgb(241,108,4)" fg:x="58" fg:w="1"/><text x="4.1394%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.62%)</title><rect x="3.5368%" y="453" width="0.6241%" height="15" fill="rgb(247,173,49)" fg:x="51" fg:w="9"/><text x="3.6539%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.07%)</title><rect x="4.0915%" y="437" width="0.0693%" height="15" fill="rgb(224,114,35)" fg:x="59" fg:w="1"/><text x="4.2087%" y="447.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.07%)</title><rect x="4.4383%" y="149" width="0.0693%" height="15" fill="rgb(245,159,27)" fg:x="64" fg:w="1"/><text x="4.5555%" y="159.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.07%)</title><rect x="4.5076%" y="149" width="0.0693%" height="15" fill="rgb(245,172,44)" fg:x="65" fg:w="1"/><text x="4.6248%" y="159.50"></text></g><g><title>charge_memcg (1 samples, 0.07%)</title><rect x="4.5770%" y="149" width="0.0693%" height="15" fill="rgb(236,23,11)" fg:x="66" fg:w="1"/><text x="4.6942%" y="159.50"></text></g><g><title>__count_memcg_events (1 samples, 0.07%)</title><rect x="4.5770%" y="133" width="0.0693%" height="15" fill="rgb(205,117,38)" fg:x="66" fg:w="1"/><text x="4.6942%" y="143.50"></text></g><g><title>__mem_cgroup_charge (5 samples, 0.35%)</title><rect x="4.3689%" y="165" width="0.3467%" height="15" fill="rgb(237,72,25)" fg:x="63" fg:w="5"/><text x="4.4861%" y="175.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.07%)</title><rect x="4.6463%" y="149" width="0.0693%" height="15" fill="rgb(244,70,9)" fg:x="67" fg:w="1"/><text x="4.7635%" y="159.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.14%)</title><rect x="4.7157%" y="165" width="0.1387%" height="15" fill="rgb(217,125,39)" fg:x="68" fg:w="2"/><text x="4.8329%" y="175.50"></text></g><g><title>folio_add_lru (2 samples, 0.14%)</title><rect x="4.7157%" y="149" width="0.1387%" height="15" fill="rgb(235,36,10)" fg:x="68" fg:w="2"/><text x="4.8329%" y="159.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.07%)</title><rect x="4.7850%" y="133" width="0.0693%" height="15" fill="rgb(251,123,47)" fg:x="69" fg:w="1"/><text x="4.9022%" y="143.50"></text></g><g><title>lru_add_fn (1 samples, 0.07%)</title><rect x="4.7850%" y="117" width="0.0693%" height="15" fill="rgb(221,13,13)" fg:x="69" fg:w="1"/><text x="4.9022%" y="127.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.07%)</title><rect x="4.7850%" y="101" width="0.0693%" height="15" fill="rgb(238,131,9)" fg:x="69" fg:w="1"/><text x="4.9022%" y="111.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="4.7850%" y="85" width="0.0693%" height="15" fill="rgb(211,50,8)" fg:x="69" fg:w="1"/><text x="4.9022%" y="95.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.07%)</title><rect x="4.7850%" y="69" width="0.0693%" height="15" fill="rgb(245,182,24)" fg:x="69" fg:w="1"/><text x="4.9022%" y="79.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.07%)</title><rect x="4.8544%" y="165" width="0.0693%" height="15" fill="rgb(242,14,37)" fg:x="70" fg:w="1"/><text x="4.9716%" y="175.50"></text></g><g><title>clear_page_erms (1 samples, 0.07%)</title><rect x="4.9237%" y="101" width="0.0693%" height="15" fill="rgb(246,228,12)" fg:x="71" fg:w="1"/><text x="5.0409%" y="111.50"></text></g><g><title>handle_mm_fault (10 samples, 0.69%)</title><rect x="4.3689%" y="229" width="0.6935%" height="15" fill="rgb(213,55,15)" fg:x="63" fg:w="10"/><text x="4.4861%" y="239.50"></text></g><g><title>__handle_mm_fault (10 samples, 0.69%)</title><rect x="4.3689%" y="213" width="0.6935%" height="15" fill="rgb(209,9,3)" fg:x="63" fg:w="10"/><text x="4.4861%" y="223.50"></text></g><g><title>handle_pte_fault (10 samples, 0.69%)</title><rect x="4.3689%" y="197" width="0.6935%" height="15" fill="rgb(230,59,30)" fg:x="63" fg:w="10"/><text x="4.4861%" y="207.50"></text></g><g><title>do_anonymous_page (10 samples, 0.69%)</title><rect x="4.3689%" y="181" width="0.6935%" height="15" fill="rgb(209,121,21)" fg:x="63" fg:w="10"/><text x="4.4861%" y="191.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.14%)</title><rect x="4.9237%" y="165" width="0.1387%" height="15" fill="rgb(220,109,13)" fg:x="71" fg:w="2"/><text x="5.0409%" y="175.50"></text></g><g><title>__folio_alloc (2 samples, 0.14%)</title><rect x="4.9237%" y="149" width="0.1387%" height="15" fill="rgb(232,18,1)" fg:x="71" fg:w="2"/><text x="5.0409%" y="159.50"></text></g><g><title>__alloc_pages (2 samples, 0.14%)</title><rect x="4.9237%" y="133" width="0.1387%" height="15" fill="rgb(215,41,42)" fg:x="71" fg:w="2"/><text x="5.0409%" y="143.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.14%)</title><rect x="4.9237%" y="117" width="0.1387%" height="15" fill="rgb(224,123,36)" fg:x="71" fg:w="2"/><text x="5.0409%" y="127.50"></text></g><g><title>rmqueue (1 samples, 0.07%)</title><rect x="4.9931%" y="101" width="0.0693%" height="15" fill="rgb(240,125,3)" fg:x="72" fg:w="1"/><text x="5.1103%" y="111.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.07%)</title><rect x="4.9931%" y="85" width="0.0693%" height="15" fill="rgb(205,98,50)" fg:x="72" fg:w="1"/><text x="5.1103%" y="95.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.07%)</title><rect x="4.9931%" y="69" width="0.0693%" height="15" fill="rgb(205,185,37)" fg:x="72" fg:w="1"/><text x="5.1103%" y="79.50"></text></g><g><title>asm_exc_page_fault (11 samples, 0.76%)</title><rect x="4.3689%" y="277" width="0.7628%" height="15" fill="rgb(238,207,15)" fg:x="63" fg:w="11"/><text x="4.4861%" y="287.50"></text></g><g><title>exc_page_fault (11 samples, 0.76%)</title><rect x="4.3689%" y="261" width="0.7628%" height="15" fill="rgb(213,199,42)" fg:x="63" fg:w="11"/><text x="4.4861%" y="271.50"></text></g><g><title>do_user_addr_fault (11 samples, 0.76%)</title><rect x="4.3689%" y="245" width="0.7628%" height="15" fill="rgb(235,201,11)" fg:x="63" fg:w="11"/><text x="4.4861%" y="255.50"></text></g><g><title>up_read (1 samples, 0.07%)</title><rect x="5.0624%" y="229" width="0.0693%" height="15" fill="rgb(207,46,11)" fg:x="73" fg:w="1"/><text x="5.1796%" y="239.50"></text></g><g><title>sync_regs (1 samples, 0.07%)</title><rect x="5.1318%" y="277" width="0.0693%" height="15" fill="rgb(241,35,35)" fg:x="74" fg:w="1"/><text x="5.2489%" y="287.50"></text></g><g><title>__glibc_morecore (1 samples, 0.07%)</title><rect x="5.2011%" y="261" width="0.0693%" height="15" fill="rgb(243,32,47)" fg:x="75" fg:w="1"/><text x="5.3183%" y="271.50"></text></g><g><title>__GI___sbrk (1 samples, 0.07%)</title><rect x="5.2011%" y="245" width="0.0693%" height="15" fill="rgb(247,202,23)" fg:x="75" fg:w="1"/><text x="5.3183%" y="255.50"></text></g><g><title>__GI___sbrk (1 samples, 0.07%)</title><rect x="5.2011%" y="229" width="0.0693%" height="15" fill="rgb(219,102,11)" fg:x="75" fg:w="1"/><text x="5.3183%" y="239.50"></text></g><g><title>__brk (1 samples, 0.07%)</title><rect x="5.2011%" y="213" width="0.0693%" height="15" fill="rgb(243,110,44)" fg:x="75" fg:w="1"/><text x="5.3183%" y="223.50"></text></g><g><title>error_entry (1 samples, 0.07%)</title><rect x="5.2011%" y="197" width="0.0693%" height="15" fill="rgb(222,74,54)" fg:x="75" fg:w="1"/><text x="5.3183%" y="207.50"></text></g><g><title>_int_malloc (16 samples, 1.11%)</title><rect x="4.2302%" y="293" width="1.1096%" height="15" fill="rgb(216,99,12)" fg:x="61" fg:w="16"/><text x="4.3474%" y="303.50">_i..</text></g><g><title>sysmalloc (2 samples, 0.14%)</title><rect x="5.2011%" y="277" width="0.1387%" height="15" fill="rgb(226,22,26)" fg:x="75" fg:w="2"/><text x="5.3183%" y="287.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.07%)</title><rect x="5.2705%" y="261" width="0.0693%" height="15" fill="rgb(217,163,10)" fg:x="76" fg:w="1"/><text x="5.3876%" y="271.50"></text></g><g><title>exc_page_fault (1 samples, 0.07%)</title><rect x="5.2705%" y="245" width="0.0693%" height="15" fill="rgb(213,25,53)" fg:x="76" fg:w="1"/><text x="5.3876%" y="255.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.07%)</title><rect x="5.2705%" y="229" width="0.0693%" height="15" fill="rgb(252,105,26)" fg:x="76" fg:w="1"/><text x="5.3876%" y="239.50"></text></g><g><title>handle_mm_fault (1 samples, 0.07%)</title><rect x="5.2705%" y="213" width="0.0693%" height="15" fill="rgb(220,39,43)" fg:x="76" fg:w="1"/><text x="5.3876%" y="223.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.07%)</title><rect x="5.2705%" y="197" width="0.0693%" height="15" fill="rgb(229,68,48)" fg:x="76" fg:w="1"/><text x="5.3876%" y="207.50"></text></g><g><title>handle_pte_fault (1 samples, 0.07%)</title><rect x="5.2705%" y="181" width="0.0693%" height="15" fill="rgb(252,8,32)" fg:x="76" fg:w="1"/><text x="5.3876%" y="191.50"></text></g><g><title>do_anonymous_page (1 samples, 0.07%)</title><rect x="5.2705%" y="165" width="0.0693%" height="15" fill="rgb(223,20,43)" fg:x="76" fg:w="1"/><text x="5.3876%" y="175.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.07%)</title><rect x="5.2705%" y="149" width="0.0693%" height="15" fill="rgb(229,81,49)" fg:x="76" fg:w="1"/><text x="5.3876%" y="159.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.07%)</title><rect x="5.3398%" y="277" width="0.0693%" height="15" fill="rgb(236,28,36)" fg:x="77" fg:w="1"/><text x="5.4570%" y="287.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="5.4785%" y="101" width="0.0693%" height="15" fill="rgb(249,185,26)" fg:x="79" fg:w="1"/><text x="5.5957%" y="111.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.07%)</title><rect x="5.4785%" y="85" width="0.0693%" height="15" fill="rgb(249,174,33)" fg:x="79" fg:w="1"/><text x="5.5957%" y="95.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.14%)</title><rect x="5.4785%" y="181" width="0.1387%" height="15" fill="rgb(233,201,37)" fg:x="79" fg:w="2"/><text x="5.5957%" y="191.50"></text></g><g><title>folio_add_lru (2 samples, 0.14%)</title><rect x="5.4785%" y="165" width="0.1387%" height="15" fill="rgb(221,78,26)" fg:x="79" fg:w="2"/><text x="5.5957%" y="175.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.14%)</title><rect x="5.4785%" y="149" width="0.1387%" height="15" fill="rgb(250,127,30)" fg:x="79" fg:w="2"/><text x="5.5957%" y="159.50"></text></g><g><title>lru_add_fn (2 samples, 0.14%)</title><rect x="5.4785%" y="133" width="0.1387%" height="15" fill="rgb(230,49,44)" fg:x="79" fg:w="2"/><text x="5.5957%" y="143.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.14%)</title><rect x="5.4785%" y="117" width="0.1387%" height="15" fill="rgb(229,67,23)" fg:x="79" fg:w="2"/><text x="5.5957%" y="127.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.07%)</title><rect x="5.5479%" y="101" width="0.0693%" height="15" fill="rgb(249,83,47)" fg:x="80" fg:w="1"/><text x="5.6650%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 1.53%)</title><rect x="4.1609%" y="389" width="1.5257%" height="15" fill="rgb(215,43,3)" fg:x="60" fg:w="22"/><text x="4.2781%" y="399.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (22 samples, 1.53%)</title><rect x="4.1609%" y="373" width="1.5257%" height="15" fill="rgb(238,154,13)" fg:x="60" fg:w="22"/><text x="4.2781%" y="383.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (22 samples, 1.53%)</title><rect x="4.1609%" y="357" width="1.5257%" height="15" fill="rgb(219,56,2)" fg:x="60" fg:w="22"/><text x="4.2781%" y="367.50">all..</text></g><g><title>alloc::alloc::realloc (22 samples, 1.53%)</title><rect x="4.1609%" y="341" width="1.5257%" height="15" fill="rgb(233,0,4)" fg:x="60" fg:w="22"/><text x="4.2781%" y="351.50">all..</text></g><g><title>__GI___libc_realloc (22 samples, 1.53%)</title><rect x="4.1609%" y="325" width="1.5257%" height="15" fill="rgb(235,30,7)" fg:x="60" fg:w="22"/><text x="4.2781%" y="335.50">__G..</text></g><g><title>_int_realloc (22 samples, 1.53%)</title><rect x="4.1609%" y="309" width="1.5257%" height="15" fill="rgb(250,79,13)" fg:x="60" fg:w="22"/><text x="4.2781%" y="319.50">_in..</text></g><g><title>asm_exc_page_fault (5 samples, 0.35%)</title><rect x="5.3398%" y="293" width="0.3467%" height="15" fill="rgb(211,146,34)" fg:x="77" fg:w="5"/><text x="5.4570%" y="303.50"></text></g><g><title>exc_page_fault (4 samples, 0.28%)</title><rect x="5.4092%" y="277" width="0.2774%" height="15" fill="rgb(228,22,38)" fg:x="78" fg:w="4"/><text x="5.5263%" y="287.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.28%)</title><rect x="5.4092%" y="261" width="0.2774%" height="15" fill="rgb(235,168,5)" fg:x="78" fg:w="4"/><text x="5.5263%" y="271.50"></text></g><g><title>handle_mm_fault (4 samples, 0.28%)</title><rect x="5.4092%" y="245" width="0.2774%" height="15" fill="rgb(221,155,16)" fg:x="78" fg:w="4"/><text x="5.5263%" y="255.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.28%)</title><rect x="5.4092%" y="229" width="0.2774%" height="15" fill="rgb(215,215,53)" fg:x="78" fg:w="4"/><text x="5.5263%" y="239.50"></text></g><g><title>handle_pte_fault (4 samples, 0.28%)</title><rect x="5.4092%" y="213" width="0.2774%" height="15" fill="rgb(223,4,10)" fg:x="78" fg:w="4"/><text x="5.5263%" y="223.50"></text></g><g><title>do_anonymous_page (4 samples, 0.28%)</title><rect x="5.4092%" y="197" width="0.2774%" height="15" fill="rgb(234,103,6)" fg:x="78" fg:w="4"/><text x="5.5263%" y="207.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.07%)</title><rect x="5.6172%" y="181" width="0.0693%" height="15" fill="rgb(227,97,0)" fg:x="81" fg:w="1"/><text x="5.7344%" y="191.50"></text></g><g><title>__folio_alloc (1 samples, 0.07%)</title><rect x="5.6172%" y="165" width="0.0693%" height="15" fill="rgb(234,150,53)" fg:x="81" fg:w="1"/><text x="5.7344%" y="175.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="5.6172%" y="149" width="0.0693%" height="15" fill="rgb(228,201,54)" fg:x="81" fg:w="1"/><text x="5.7344%" y="159.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="5.6172%" y="133" width="0.0693%" height="15" fill="rgb(222,22,37)" fg:x="81" fg:w="1"/><text x="5.7344%" y="143.50"></text></g><g><title>rmqueue (1 samples, 0.07%)</title><rect x="5.6172%" y="117" width="0.0693%" height="15" fill="rgb(237,53,32)" fg:x="81" fg:w="1"/><text x="5.7344%" y="127.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.07%)</title><rect x="5.6172%" y="101" width="0.0693%" height="15" fill="rgb(233,25,53)" fg:x="81" fg:w="1"/><text x="5.7344%" y="111.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.07%)</title><rect x="5.6172%" y="85" width="0.0693%" height="15" fill="rgb(210,40,34)" fg:x="81" fg:w="1"/><text x="5.7344%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (23 samples, 1.60%)</title><rect x="4.1609%" y="453" width="1.5950%" height="15" fill="rgb(241,220,44)" fg:x="60" fg:w="23"/><text x="4.2781%" y="463.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 1.60%)</title><rect x="4.1609%" y="437" width="1.5950%" height="15" fill="rgb(235,28,35)" fg:x="60" fg:w="23"/><text x="4.2781%" y="447.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 1.60%)</title><rect x="4.1609%" y="421" width="1.5950%" height="15" fill="rgb(210,56,17)" fg:x="60" fg:w="23"/><text x="4.2781%" y="431.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (23 samples, 1.60%)</title><rect x="4.1609%" y="405" width="1.5950%" height="15" fill="rgb(224,130,29)" fg:x="60" fg:w="23"/><text x="4.2781%" y="415.50">all..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.07%)</title><rect x="5.6865%" y="389" width="0.0693%" height="15" fill="rgb(235,212,8)" fg:x="82" fg:w="1"/><text x="5.8037%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.07%)</title><rect x="5.6865%" y="373" width="0.0693%" height="15" fill="rgb(223,33,50)" fg:x="82" fg:w="1"/><text x="5.8037%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.07%)</title><rect x="5.7559%" y="453" width="0.0693%" height="15" fill="rgb(219,149,13)" fg:x="83" fg:w="1"/><text x="5.8731%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (36 samples, 2.50%)</title><rect x="3.3981%" y="485" width="2.4965%" height="15" fill="rgb(250,156,29)" fg:x="49" fg:w="36"/><text x="3.5152%" y="495.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (36 samples, 2.50%)</title><rect x="3.3981%" y="469" width="2.4965%" height="15" fill="rgb(216,193,19)" fg:x="49" fg:w="36"/><text x="3.5152%" y="479.50">alloc::..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="453" width="0.0693%" height="15" fill="rgb(216,135,14)" fg:x="84" fg:w="1"/><text x="5.9424%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="437" width="0.0693%" height="15" fill="rgb(241,47,5)" fg:x="84" fg:w="1"/><text x="5.9424%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="421" width="0.0693%" height="15" fill="rgb(233,42,35)" fg:x="84" fg:w="1"/><text x="5.9424%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="405" width="0.0693%" height="15" fill="rgb(231,13,6)" fg:x="84" fg:w="1"/><text x="5.9424%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;,fringe_vs_astar::graph::generate_neighbors::{{closure}}&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="389" width="0.0693%" height="15" fill="rgb(207,181,40)" fg:x="84" fg:w="1"/><text x="5.9424%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="373" width="0.0693%" height="15" fill="rgb(254,173,49)" fg:x="84" fg:w="1"/><text x="5.9424%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;,core::option::IntoIter&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="357" width="0.0693%" height="15" fill="rgb(221,1,38)" fg:x="84" fg:w="1"/><text x="5.9424%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="341" width="0.0693%" height="15" fill="rgb(206,124,46)" fg:x="84" fg:w="1"/><text x="5.9424%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="325" width="0.0693%" height="15" fill="rgb(249,21,11)" fg:x="84" fg:w="1"/><text x="5.9424%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="309" width="0.0693%" height="15" fill="rgb(222,201,40)" fg:x="84" fg:w="1"/><text x="5.9424%" y="319.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="5.8252%" y="293" width="0.0693%" height="15" fill="rgb(235,61,29)" fg:x="84" fg:w="1"/><text x="5.9424%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;,alloc::alloc::Global&gt;&gt; (1 samples, 0.07%)</title><rect x="5.8252%" y="277" width="0.0693%" height="15" fill="rgb(219,207,3)" fg:x="84" fg:w="1"/><text x="5.9424%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="5.8252%" y="261" width="0.0693%" height="15" fill="rgb(222,56,46)" fg:x="84" fg:w="1"/><text x="5.9424%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="5.8946%" y="485" width="0.1387%" height="15" fill="rgb(239,76,54)" fg:x="85" fg:w="2"/><text x="6.0118%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="5.8946%" y="469" width="0.1387%" height="15" fill="rgb(231,124,27)" fg:x="85" fg:w="2"/><text x="6.0118%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find (2 samples, 0.14%)</title><rect x="5.8946%" y="453" width="0.1387%" height="15" fill="rgb(249,195,6)" fg:x="85" fg:w="2"/><text x="6.0118%" y="463.50"></text></g><g><title>core::iter::adapters::chain::and_then_or_clear (2 samples, 0.14%)</title><rect x="5.8946%" y="437" width="0.1387%" height="15" fill="rgb(237,174,47)" fg:x="85" fg:w="2"/><text x="6.0118%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find::_{{closure}} (2 samples, 0.14%)</title><rect x="5.8946%" y="421" width="0.1387%" height="15" fill="rgb(206,201,31)" fg:x="85" fg:w="2"/><text x="6.0118%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.14%)</title><rect x="5.8946%" y="405" width="0.1387%" height="15" fill="rgb(231,57,52)" fg:x="85" fg:w="2"/><text x="6.0118%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.14%)</title><rect x="5.8946%" y="389" width="0.1387%" height="15" fill="rgb(248,177,22)" fg:x="85" fg:w="2"/><text x="6.0118%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.14%)</title><rect x="5.8946%" y="373" width="0.1387%" height="15" fill="rgb(215,211,37)" fg:x="85" fg:w="2"/><text x="6.0118%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.14%)</title><rect x="5.8946%" y="357" width="0.1387%" height="15" fill="rgb(241,128,51)" fg:x="85" fg:w="2"/><text x="6.0118%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.14%)</title><rect x="5.8946%" y="341" width="0.1387%" height="15" fill="rgb(227,165,31)" fg:x="85" fg:w="2"/><text x="6.0118%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::try_fold (2 samples, 0.14%)</title><rect x="5.8946%" y="325" width="0.1387%" height="15" fill="rgb(228,167,24)" fg:x="85" fg:w="2"/><text x="6.0118%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.07%)</title><rect x="6.0333%" y="485" width="0.0693%" height="15" fill="rgb(228,143,12)" fg:x="87" fg:w="1"/><text x="6.1505%" y="495.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.07%)</title><rect x="6.5187%" y="229" width="0.0693%" height="15" fill="rgb(249,149,8)" fg:x="94" fg:w="1"/><text x="6.6359%" y="239.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.07%)</title><rect x="6.5187%" y="213" width="0.0693%" height="15" fill="rgb(243,35,44)" fg:x="94" fg:w="1"/><text x="6.6359%" y="223.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.07%)</title><rect x="6.5881%" y="229" width="0.0693%" height="15" fill="rgb(246,89,9)" fg:x="95" fg:w="1"/><text x="6.7053%" y="239.50"></text></g><g><title>__pte_offset_map (1 samples, 0.07%)</title><rect x="6.5881%" y="213" width="0.0693%" height="15" fill="rgb(233,213,13)" fg:x="95" fg:w="1"/><text x="6.7053%" y="223.50"></text></g><g><title>inc_mm_counter (1 samples, 0.07%)</title><rect x="6.6574%" y="229" width="0.0693%" height="15" fill="rgb(233,141,41)" fg:x="96" fg:w="1"/><text x="6.7746%" y="239.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.07%)</title><rect x="6.6574%" y="213" width="0.0693%" height="15" fill="rgb(239,167,4)" fg:x="96" fg:w="1"/><text x="6.7746%" y="223.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.28%)</title><rect x="6.5187%" y="341" width="0.2774%" height="15" fill="rgb(209,217,16)" fg:x="94" fg:w="4"/><text x="6.6359%" y="351.50"></text></g><g><title>exc_page_fault (4 samples, 0.28%)</title><rect x="6.5187%" y="325" width="0.2774%" height="15" fill="rgb(219,88,35)" fg:x="94" fg:w="4"/><text x="6.6359%" y="335.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.28%)</title><rect x="6.5187%" y="309" width="0.2774%" height="15" fill="rgb(220,193,23)" fg:x="94" fg:w="4"/><text x="6.6359%" y="319.50"></text></g><g><title>handle_mm_fault (4 samples, 0.28%)</title><rect x="6.5187%" y="293" width="0.2774%" height="15" fill="rgb(230,90,52)" fg:x="94" fg:w="4"/><text x="6.6359%" y="303.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.28%)</title><rect x="6.5187%" y="277" width="0.2774%" height="15" fill="rgb(252,106,19)" fg:x="94" fg:w="4"/><text x="6.6359%" y="287.50"></text></g><g><title>handle_pte_fault (4 samples, 0.28%)</title><rect x="6.5187%" y="261" width="0.2774%" height="15" fill="rgb(206,74,20)" fg:x="94" fg:w="4"/><text x="6.6359%" y="271.50"></text></g><g><title>do_anonymous_page (4 samples, 0.28%)</title><rect x="6.5187%" y="245" width="0.2774%" height="15" fill="rgb(230,138,44)" fg:x="94" fg:w="4"/><text x="6.6359%" y="255.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.07%)</title><rect x="6.7268%" y="229" width="0.0693%" height="15" fill="rgb(235,182,43)" fg:x="97" fg:w="1"/><text x="6.8440%" y="239.50"></text></g><g><title>__folio_alloc (1 samples, 0.07%)</title><rect x="6.7268%" y="213" width="0.0693%" height="15" fill="rgb(242,16,51)" fg:x="97" fg:w="1"/><text x="6.8440%" y="223.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="6.7268%" y="197" width="0.0693%" height="15" fill="rgb(248,9,4)" fg:x="97" fg:w="1"/><text x="6.8440%" y="207.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="6.7268%" y="181" width="0.0693%" height="15" fill="rgb(210,31,22)" fg:x="97" fg:w="1"/><text x="6.8440%" y="191.50"></text></g><g><title>rmqueue (1 samples, 0.07%)</title><rect x="6.7268%" y="165" width="0.0693%" height="15" fill="rgb(239,54,39)" fg:x="97" fg:w="1"/><text x="6.8440%" y="175.50"></text></g><g><title>sync_regs (1 samples, 0.07%)</title><rect x="6.7961%" y="341" width="0.0693%" height="15" fill="rgb(230,99,41)" fg:x="98" fg:w="1"/><text x="6.9133%" y="351.50"></text></g><g><title>sysmalloc (1 samples, 0.07%)</title><rect x="6.8655%" y="341" width="0.0693%" height="15" fill="rgb(253,106,12)" fg:x="99" fg:w="1"/><text x="6.9827%" y="351.50"></text></g><g><title>_int_malloc (11 samples, 0.76%)</title><rect x="6.2413%" y="357" width="0.7628%" height="15" fill="rgb(213,46,41)" fg:x="90" fg:w="11"/><text x="6.3585%" y="367.50"></text></g><g><title>unlink_chunk (1 samples, 0.07%)</title><rect x="6.9348%" y="341" width="0.0693%" height="15" fill="rgb(215,133,35)" fg:x="100" fg:w="1"/><text x="7.0520%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (57 samples, 3.95%)</title><rect x="3.1207%" y="549" width="3.9528%" height="15" fill="rgb(213,28,5)" fg:x="45" fg:w="57"/><text x="3.2379%" y="559.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (57 samples, 3.95%)</title><rect x="3.1207%" y="533" width="3.9528%" height="15" fill="rgb(215,77,49)" fg:x="45" fg:w="57"/><text x="3.2379%" y="543.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (57 samples, 3.95%)</title><rect x="3.1207%" y="517" width="3.9528%" height="15" fill="rgb(248,100,22)" fg:x="45" fg:w="57"/><text x="3.2379%" y="527.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (55 samples, 3.81%)</title><rect x="3.2594%" y="501" width="3.8141%" height="15" fill="rgb(208,67,9)" fg:x="47" fg:w="55"/><text x="3.3765%" y="511.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (14 samples, 0.97%)</title><rect x="6.1026%" y="485" width="0.9709%" height="15" fill="rgb(219,133,21)" fg:x="88" fg:w="14"/><text x="6.2198%" y="495.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.97%)</title><rect x="6.1026%" y="469" width="0.9709%" height="15" fill="rgb(246,46,29)" fg:x="88" fg:w="14"/><text x="6.2198%" y="479.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.97%)</title><rect x="6.1026%" y="453" width="0.9709%" height="15" fill="rgb(246,185,52)" fg:x="88" fg:w="14"/><text x="6.2198%" y="463.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (14 samples, 0.97%)</title><rect x="6.1026%" y="437" width="0.9709%" height="15" fill="rgb(252,136,11)" fg:x="88" fg:w="14"/><text x="6.2198%" y="447.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.97%)</title><rect x="6.1026%" y="421" width="0.9709%" height="15" fill="rgb(219,138,53)" fg:x="88" fg:w="14"/><text x="6.2198%" y="431.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.97%)</title><rect x="6.1026%" y="405" width="0.9709%" height="15" fill="rgb(211,51,23)" fg:x="88" fg:w="14"/><text x="6.2198%" y="415.50">a..</text></g><g><title>alloc::alloc::alloc (14 samples, 0.97%)</title><rect x="6.1026%" y="389" width="0.9709%" height="15" fill="rgb(247,221,28)" fg:x="88" fg:w="14"/><text x="6.2198%" y="399.50">a..</text></g><g><title>__GI___libc_malloc (14 samples, 0.97%)</title><rect x="6.1026%" y="373" width="0.9709%" height="15" fill="rgb(251,222,45)" fg:x="88" fg:w="14"/><text x="6.2198%" y="383.50">_..</text></g><g><title>tcache_get (1 samples, 0.07%)</title><rect x="7.0042%" y="357" width="0.0693%" height="15" fill="rgb(217,162,53)" fg:x="101" fg:w="1"/><text x="7.1213%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1 samples, 0.07%)</title><rect x="7.0735%" y="549" width="0.0693%" height="15" fill="rgb(229,93,14)" fg:x="102" fg:w="1"/><text x="7.1907%" y="559.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (1 samples, 0.07%)</title><rect x="7.0735%" y="533" width="0.0693%" height="15" fill="rgb(209,67,49)" fg:x="102" fg:w="1"/><text x="7.1907%" y="543.50"></text></g><g><title>&lt;fringe_vs_astar::map::GridMap as fringe_vs_astar::map::Map&gt;::get_cell (2 samples, 0.14%)</title><rect x="7.3509%" y="517" width="0.1387%" height="15" fill="rgb(213,87,29)" fg:x="106" fg:w="2"/><text x="7.4681%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.14%)</title><rect x="7.3509%" y="501" width="0.1387%" height="15" fill="rgb(205,151,52)" fg:x="106" fg:w="2"/><text x="7.4681%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.14%)</title><rect x="7.3509%" y="485" width="0.1387%" height="15" fill="rgb(253,215,39)" fg:x="106" fg:w="2"/><text x="7.4681%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.14%)</title><rect x="7.3509%" y="469" width="0.1387%" height="15" fill="rgb(221,220,41)" fg:x="106" fg:w="2"/><text x="7.4681%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6 samples, 0.42%)</title><rect x="7.1429%" y="549" width="0.4161%" height="15" fill="rgb(218,133,21)" fg:x="103" fg:w="6"/><text x="7.2600%" y="559.50"></text></g><g><title>fringe_vs_astar::graph::generate_neighbors::_{{closure}} (6 samples, 0.42%)</title><rect x="7.1429%" y="533" width="0.4161%" height="15" fill="rgb(221,193,43)" fg:x="103" fg:w="6"/><text x="7.2600%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.07%)</title><rect x="7.4896%" y="517" width="0.0693%" height="15" fill="rgb(240,128,52)" fg:x="108" fg:w="1"/><text x="7.6068%" y="527.50"></text></g><g><title>fringe_vs_astar::graph::generate_neighbors::_{{closure}}::_{{closure}} (1 samples, 0.07%)</title><rect x="7.4896%" y="501" width="0.0693%" height="15" fill="rgb(253,114,12)" fg:x="108" fg:w="1"/><text x="7.6068%" y="511.50"></text></g><g><title>&lt;fringe_vs_astar::map::GridMap as fringe_vs_astar::map::Map&gt;::get_cell (1 samples, 0.07%)</title><rect x="7.4896%" y="485" width="0.0693%" height="15" fill="rgb(215,223,47)" fg:x="108" fg:w="1"/><text x="7.6068%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.07%)</title><rect x="7.4896%" y="469" width="0.0693%" height="15" fill="rgb(248,225,23)" fg:x="108" fg:w="1"/><text x="7.6068%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.07%)</title><rect x="7.4896%" y="453" width="0.0693%" height="15" fill="rgb(250,108,0)" fg:x="108" fg:w="1"/><text x="7.6068%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.07%)</title><rect x="7.4896%" y="437" width="0.0693%" height="15" fill="rgb(228,208,7)" fg:x="108" fg:w="1"/><text x="7.6068%" y="447.50"></text></g><g><title>__GI___libc_free (2 samples, 0.14%)</title><rect x="7.5589%" y="469" width="0.1387%" height="15" fill="rgb(244,45,10)" fg:x="109" fg:w="2"/><text x="7.6761%" y="479.50"></text></g><g><title>&lt;fringe_vs_astar::graph::AdjacencyGridGraph as fringe_vs_astar::graph::Graph&gt;::new (94 samples, 6.52%)</title><rect x="1.2483%" y="581" width="6.5187%" height="15" fill="rgb(207,125,25)" fg:x="18" fg:w="94"/><text x="1.3655%" y="591.50">&lt;fringe_vs_astar::gra..</text></g><g><title>fringe_vs_astar::graph::generate_neighbors (77 samples, 5.34%)</title><rect x="2.4272%" y="565" width="5.3398%" height="15" fill="rgb(210,195,18)" fg:x="35" fg:w="77"/><text x="2.5444%" y="575.50">fringe_vs_astar::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt; (3 samples, 0.21%)</title><rect x="7.5589%" y="549" width="0.2080%" height="15" fill="rgb(249,80,12)" fg:x="109" fg:w="3"/><text x="7.6761%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;(core::option::Option&lt;bool&gt;,(usize,usize))&gt;&gt;&gt; (3 samples, 0.21%)</title><rect x="7.5589%" y="533" width="0.2080%" height="15" fill="rgb(221,65,9)" fg:x="109" fg:w="3"/><text x="7.6761%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.21%)</title><rect x="7.5589%" y="517" width="0.2080%" height="15" fill="rgb(235,49,36)" fg:x="109" fg:w="3"/><text x="7.6761%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.21%)</title><rect x="7.5589%" y="501" width="0.2080%" height="15" fill="rgb(225,32,20)" fg:x="109" fg:w="3"/><text x="7.6761%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.21%)</title><rect x="7.5589%" y="485" width="0.2080%" height="15" fill="rgb(215,141,46)" fg:x="109" fg:w="3"/><text x="7.6761%" y="495.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.07%)</title><rect x="7.6976%" y="469" width="0.0693%" height="15" fill="rgb(250,160,47)" fg:x="111" fg:w="1"/><text x="7.8148%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.07%)</title><rect x="7.7670%" y="581" width="0.0693%" height="15" fill="rgb(216,222,40)" fg:x="112" fg:w="1"/><text x="7.8842%" y="591.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="7.7670%" y="565" width="0.0693%" height="15" fill="rgb(234,217,39)" fg:x="112" fg:w="1"/><text x="7.8842%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.07%)</title><rect x="7.7670%" y="549" width="0.0693%" height="15" fill="rgb(207,178,40)" fg:x="112" fg:w="1"/><text x="7.8842%" y="559.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.07%)</title><rect x="7.7670%" y="533" width="0.0693%" height="15" fill="rgb(221,136,13)" fg:x="112" fg:w="1"/><text x="7.8842%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.07%)</title><rect x="7.7670%" y="517" width="0.0693%" height="15" fill="rgb(249,199,10)" fg:x="112" fg:w="1"/><text x="7.8842%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.07%)</title><rect x="7.7670%" y="501" width="0.0693%" height="15" fill="rgb(249,222,13)" fg:x="112" fg:w="1"/><text x="7.8842%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="7.7670%" y="485" width="0.0693%" height="15" fill="rgb(244,185,38)" fg:x="112" fg:w="1"/><text x="7.8842%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.07%)</title><rect x="7.7670%" y="469" width="0.0693%" height="15" fill="rgb(236,202,9)" fg:x="112" fg:w="1"/><text x="7.8842%" y="479.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.07%)</title><rect x="7.7670%" y="453" width="0.0693%" height="15" fill="rgb(250,229,37)" fg:x="112" fg:w="1"/><text x="7.8842%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.07%)</title><rect x="7.7670%" y="437" width="0.0693%" height="15" fill="rgb(206,174,23)" fg:x="112" fg:w="1"/><text x="7.8842%" y="447.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.07%)</title><rect x="7.7670%" y="421" width="0.0693%" height="15" fill="rgb(211,33,43)" fg:x="112" fg:w="1"/><text x="7.8842%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.07%)</title><rect x="7.7670%" y="405" width="0.0693%" height="15" fill="rgb(245,58,50)" fg:x="112" fg:w="1"/><text x="7.8842%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.07%)</title><rect x="7.7670%" y="389" width="0.0693%" height="15" fill="rgb(244,68,36)" fg:x="112" fg:w="1"/><text x="7.8842%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.07%)</title><rect x="7.7670%" y="373" width="0.0693%" height="15" fill="rgb(232,229,15)" fg:x="112" fg:w="1"/><text x="7.8842%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.07%)</title><rect x="7.7670%" y="357" width="0.0693%" height="15" fill="rgb(254,30,23)" fg:x="112" fg:w="1"/><text x="7.8842%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (1 samples, 0.07%)</title><rect x="7.7670%" y="341" width="0.0693%" height="15" fill="rgb(235,160,14)" fg:x="112" fg:w="1"/><text x="7.8842%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.07%)</title><rect x="7.7670%" y="325" width="0.0693%" height="15" fill="rgb(212,155,44)" fg:x="112" fg:w="1"/><text x="7.8842%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.07%)</title><rect x="7.7670%" y="309" width="0.0693%" height="15" fill="rgb(226,2,50)" fg:x="112" fg:w="1"/><text x="7.8842%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.07%)</title><rect x="7.7670%" y="293" width="0.0693%" height="15" fill="rgb(234,177,6)" fg:x="112" fg:w="1"/><text x="7.8842%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.07%)</title><rect x="7.7670%" y="277" width="0.0693%" height="15" fill="rgb(217,24,9)" fg:x="112" fg:w="1"/><text x="7.8842%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.07%)</title><rect x="7.7670%" y="261" width="0.0693%" height="15" fill="rgb(220,13,46)" fg:x="112" fg:w="1"/><text x="7.8842%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.07%)</title><rect x="7.7670%" y="245" width="0.0693%" height="15" fill="rgb(239,221,27)" fg:x="112" fg:w="1"/><text x="7.8842%" y="255.50"></text></g><g><title>fringe_vs_astar::map::map_builder (1 samples, 0.07%)</title><rect x="7.8363%" y="581" width="0.0693%" height="15" fill="rgb(222,198,25)" fg:x="113" fg:w="1"/><text x="7.9535%" y="591.50"></text></g><g><title>fringe_vs_astar::map::read_map (1 samples, 0.07%)</title><rect x="7.8363%" y="565" width="0.0693%" height="15" fill="rgb(211,99,13)" fg:x="113" fg:w="1"/><text x="7.9535%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.07%)</title><rect x="7.8363%" y="549" width="0.0693%" height="15" fill="rgb(232,111,31)" fg:x="113" fg:w="1"/><text x="7.9535%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="7.8363%" y="533" width="0.0693%" height="15" fill="rgb(245,82,37)" fg:x="113" fg:w="1"/><text x="7.9535%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="7.8363%" y="517" width="0.0693%" height="15" fill="rgb(227,149,46)" fg:x="113" fg:w="1"/><text x="7.9535%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="7.8363%" y="501" width="0.0693%" height="15" fill="rgb(218,36,50)" fg:x="113" fg:w="1"/><text x="7.9535%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.07%)</title><rect x="7.8363%" y="485" width="0.0693%" height="15" fill="rgb(226,80,48)" fg:x="113" fg:w="1"/><text x="7.9535%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.07%)</title><rect x="7.8363%" y="469" width="0.0693%" height="15" fill="rgb(238,224,15)" fg:x="113" fg:w="1"/><text x="7.9535%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="7.8363%" y="453" width="0.0693%" height="15" fill="rgb(241,136,10)" fg:x="113" fg:w="1"/><text x="7.9535%" y="463.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="7.8363%" y="437" width="0.0693%" height="15" fill="rgb(208,32,45)" fg:x="113" fg:w="1"/><text x="7.9535%" y="447.50"></text></g><g><title>std::io::BufRead::read_line (1 samples, 0.07%)</title><rect x="7.8363%" y="421" width="0.0693%" height="15" fill="rgb(207,135,9)" fg:x="113" fg:w="1"/><text x="7.9535%" y="431.50"></text></g><g><title>std::io::append_to_string (1 samples, 0.07%)</title><rect x="7.8363%" y="405" width="0.0693%" height="15" fill="rgb(206,86,44)" fg:x="113" fg:w="1"/><text x="7.9535%" y="415.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.07%)</title><rect x="7.8363%" y="389" width="0.0693%" height="15" fill="rgb(245,177,15)" fg:x="113" fg:w="1"/><text x="7.9535%" y="399.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.07%)</title><rect x="7.8363%" y="373" width="0.0693%" height="15" fill="rgb(206,64,50)" fg:x="113" fg:w="1"/><text x="7.9535%" y="383.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.14%)</title><rect x="8.1137%" y="293" width="0.1387%" height="15" fill="rgb(234,36,40)" fg:x="117" fg:w="2"/><text x="8.2309%" y="303.50"></text></g><g><title>charge_memcg (2 samples, 0.14%)</title><rect x="8.1137%" y="277" width="0.1387%" height="15" fill="rgb(213,64,8)" fg:x="117" fg:w="2"/><text x="8.2309%" y="287.50"></text></g><g><title>try_charge_memcg (1 samples, 0.07%)</title><rect x="8.1831%" y="261" width="0.0693%" height="15" fill="rgb(210,75,36)" fg:x="118" fg:w="1"/><text x="8.3003%" y="271.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.07%)</title><rect x="8.2524%" y="293" width="0.0693%" height="15" fill="rgb(229,88,21)" fg:x="119" fg:w="1"/><text x="8.3696%" y="303.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.07%)</title><rect x="8.3218%" y="293" width="0.0693%" height="15" fill="rgb(252,204,47)" fg:x="120" fg:w="1"/><text x="8.4390%" y="303.50"></text></g><g><title>folio_add_lru (1 samples, 0.07%)</title><rect x="8.3218%" y="277" width="0.0693%" height="15" fill="rgb(208,77,27)" fg:x="120" fg:w="1"/><text x="8.4390%" y="287.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.07%)</title><rect x="8.3218%" y="261" width="0.0693%" height="15" fill="rgb(221,76,26)" fg:x="120" fg:w="1"/><text x="8.4390%" y="271.50"></text></g><g><title>lru_add_fn (1 samples, 0.07%)</title><rect x="8.3218%" y="245" width="0.0693%" height="15" fill="rgb(225,139,18)" fg:x="120" fg:w="1"/><text x="8.4390%" y="255.50"></text></g><g><title>clear_page_erms (1 samples, 0.07%)</title><rect x="8.3911%" y="229" width="0.0693%" height="15" fill="rgb(230,137,11)" fg:x="121" fg:w="1"/><text x="8.5083%" y="239.50"></text></g><g><title>__memcpy_evex_unaligned_erms (6 samples, 0.42%)</title><rect x="8.1137%" y="421" width="0.4161%" height="15" fill="rgb(212,28,1)" fg:x="117" fg:w="6"/><text x="8.2309%" y="431.50"></text></g><g><title>asm_exc_page_fault (6 samples, 0.42%)</title><rect x="8.1137%" y="405" width="0.4161%" height="15" fill="rgb(248,164,17)" fg:x="117" fg:w="6"/><text x="8.2309%" y="415.50"></text></g><g><title>exc_page_fault (6 samples, 0.42%)</title><rect x="8.1137%" y="389" width="0.4161%" height="15" fill="rgb(222,171,42)" fg:x="117" fg:w="6"/><text x="8.2309%" y="399.50"></text></g><g><title>do_user_addr_fault (6 samples, 0.42%)</title><rect x="8.1137%" y="373" width="0.4161%" height="15" fill="rgb(243,84,45)" fg:x="117" fg:w="6"/><text x="8.2309%" y="383.50"></text></g><g><title>handle_mm_fault (6 samples, 0.42%)</title><rect x="8.1137%" y="357" width="0.4161%" height="15" fill="rgb(252,49,23)" fg:x="117" fg:w="6"/><text x="8.2309%" y="367.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.42%)</title><rect x="8.1137%" y="341" width="0.4161%" height="15" fill="rgb(215,19,7)" fg:x="117" fg:w="6"/><text x="8.2309%" y="351.50"></text></g><g><title>handle_pte_fault (6 samples, 0.42%)</title><rect x="8.1137%" y="325" width="0.4161%" height="15" fill="rgb(238,81,41)" fg:x="117" fg:w="6"/><text x="8.2309%" y="335.50"></text></g><g><title>do_anonymous_page (6 samples, 0.42%)</title><rect x="8.1137%" y="309" width="0.4161%" height="15" fill="rgb(210,199,37)" fg:x="117" fg:w="6"/><text x="8.2309%" y="319.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.14%)</title><rect x="8.3911%" y="293" width="0.1387%" height="15" fill="rgb(244,192,49)" fg:x="121" fg:w="2"/><text x="8.5083%" y="303.50"></text></g><g><title>__folio_alloc (2 samples, 0.14%)</title><rect x="8.3911%" y="277" width="0.1387%" height="15" fill="rgb(226,211,11)" fg:x="121" fg:w="2"/><text x="8.5083%" y="287.50"></text></g><g><title>__alloc_pages (2 samples, 0.14%)</title><rect x="8.3911%" y="261" width="0.1387%" height="15" fill="rgb(236,162,54)" fg:x="121" fg:w="2"/><text x="8.5083%" y="271.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.14%)</title><rect x="8.3911%" y="245" width="0.1387%" height="15" fill="rgb(220,229,9)" fg:x="121" fg:w="2"/><text x="8.5083%" y="255.50"></text></g><g><title>rmqueue (1 samples, 0.07%)</title><rect x="8.4605%" y="229" width="0.0693%" height="15" fill="rgb(250,87,22)" fg:x="122" fg:w="1"/><text x="8.5777%" y="239.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.07%)</title><rect x="8.4605%" y="213" width="0.0693%" height="15" fill="rgb(239,43,17)" fg:x="122" fg:w="1"/><text x="8.5777%" y="223.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.07%)</title><rect x="8.4605%" y="197" width="0.0693%" height="15" fill="rgb(231,177,25)" fg:x="122" fg:w="1"/><text x="8.5777%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.55%)</title><rect x="8.1137%" y="549" width="0.5548%" height="15" fill="rgb(219,179,1)" fg:x="117" fg:w="8"/><text x="8.2309%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.55%)</title><rect x="8.1137%" y="533" width="0.5548%" height="15" fill="rgb(238,219,53)" fg:x="117" fg:w="8"/><text x="8.2309%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.55%)</title><rect x="8.1137%" y="517" width="0.5548%" height="15" fill="rgb(232,167,36)" fg:x="117" fg:w="8"/><text x="8.2309%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.55%)</title><rect x="8.1137%" y="501" width="0.5548%" height="15" fill="rgb(244,19,51)" fg:x="117" fg:w="8"/><text x="8.2309%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 0.55%)</title><rect x="8.1137%" y="485" width="0.5548%" height="15" fill="rgb(224,6,22)" fg:x="117" fg:w="8"/><text x="8.2309%" y="495.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 0.55%)</title><rect x="8.1137%" y="469" width="0.5548%" height="15" fill="rgb(224,145,5)" fg:x="117" fg:w="8"/><text x="8.2309%" y="479.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.55%)</title><rect x="8.1137%" y="453" width="0.5548%" height="15" fill="rgb(234,130,49)" fg:x="117" fg:w="8"/><text x="8.2309%" y="463.50"></text></g><g><title>_int_realloc (8 samples, 0.55%)</title><rect x="8.1137%" y="437" width="0.5548%" height="15" fill="rgb(254,6,2)" fg:x="117" fg:w="8"/><text x="8.2309%" y="447.50"></text></g><g><title>_int_malloc (2 samples, 0.14%)</title><rect x="8.5298%" y="421" width="0.1387%" height="15" fill="rgb(208,96,46)" fg:x="123" fg:w="2"/><text x="8.6470%" y="431.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.07%)</title><rect x="8.5992%" y="405" width="0.0693%" height="15" fill="rgb(239,3,39)" fg:x="124" fg:w="1"/><text x="8.7164%" y="415.50"></text></g><g><title>exc_page_fault (1 samples, 0.07%)</title><rect x="8.5992%" y="389" width="0.0693%" height="15" fill="rgb(233,210,1)" fg:x="124" fg:w="1"/><text x="8.7164%" y="399.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.07%)</title><rect x="8.5992%" y="373" width="0.0693%" height="15" fill="rgb(244,137,37)" fg:x="124" fg:w="1"/><text x="8.7164%" y="383.50"></text></g><g><title>handle_mm_fault (1 samples, 0.07%)</title><rect x="8.5992%" y="357" width="0.0693%" height="15" fill="rgb(240,136,2)" fg:x="124" fg:w="1"/><text x="8.7164%" y="367.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.07%)</title><rect x="8.5992%" y="341" width="0.0693%" height="15" fill="rgb(239,18,37)" fg:x="124" fg:w="1"/><text x="8.7164%" y="351.50"></text></g><g><title>handle_pte_fault (1 samples, 0.07%)</title><rect x="8.5992%" y="325" width="0.0693%" height="15" fill="rgb(218,185,22)" fg:x="124" fg:w="1"/><text x="8.7164%" y="335.50"></text></g><g><title>do_anonymous_page (1 samples, 0.07%)</title><rect x="8.5992%" y="309" width="0.0693%" height="15" fill="rgb(225,218,4)" fg:x="124" fg:w="1"/><text x="8.7164%" y="319.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.07%)</title><rect x="8.5992%" y="293" width="0.0693%" height="15" fill="rgb(230,182,32)" fg:x="124" fg:w="1"/><text x="8.7164%" y="303.50"></text></g><g><title>folio_add_lru (1 samples, 0.07%)</title><rect x="8.5992%" y="277" width="0.0693%" height="15" fill="rgb(242,56,43)" fg:x="124" fg:w="1"/><text x="8.7164%" y="287.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.07%)</title><rect x="8.5992%" y="261" width="0.0693%" height="15" fill="rgb(233,99,24)" fg:x="124" fg:w="1"/><text x="8.7164%" y="271.50"></text></g><g><title>lru_add_fn (1 samples, 0.07%)</title><rect x="8.5992%" y="245" width="0.0693%" height="15" fill="rgb(234,209,42)" fg:x="124" fg:w="1"/><text x="8.7164%" y="255.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.07%)</title><rect x="8.5992%" y="229" width="0.0693%" height="15" fill="rgb(227,7,12)" fg:x="124" fg:w="1"/><text x="8.7164%" y="239.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="8.5992%" y="213" width="0.0693%" height="15" fill="rgb(245,203,43)" fg:x="124" fg:w="1"/><text x="8.7164%" y="223.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.07%)</title><rect x="8.5992%" y="197" width="0.0693%" height="15" fill="rgb(238,205,33)" fg:x="124" fg:w="1"/><text x="8.7164%" y="207.50"></text></g><g><title>fringe_vs_astar::pathfinder::AStar&lt;G&gt;::new (16 samples, 1.11%)</title><rect x="7.9057%" y="581" width="1.1096%" height="15" fill="rgb(231,56,7)" fg:x="114" fg:w="16"/><text x="8.0229%" y="591.50">fr..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 1.11%)</title><rect x="7.9057%" y="565" width="1.1096%" height="15" fill="rgb(244,186,29)" fg:x="114" fg:w="16"/><text x="8.0229%" y="575.50">al..</text></g><g><title>core::ptr::write (5 samples, 0.35%)</title><rect x="8.6685%" y="549" width="0.3467%" height="15" fill="rgb(234,111,31)" fg:x="125" fg:w="5"/><text x="8.7857%" y="559.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.14%)</title><rect x="8.8766%" y="533" width="0.1387%" height="15" fill="rgb(241,149,10)" fg:x="128" fg:w="2"/><text x="8.9937%" y="543.50"></text></g><g><title>exc_page_fault (2 samples, 0.14%)</title><rect x="8.8766%" y="517" width="0.1387%" height="15" fill="rgb(249,206,44)" fg:x="128" fg:w="2"/><text x="8.9937%" y="527.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.14%)</title><rect x="8.8766%" y="501" width="0.1387%" height="15" fill="rgb(251,153,30)" fg:x="128" fg:w="2"/><text x="8.9937%" y="511.50"></text></g><g><title>handle_mm_fault (1 samples, 0.07%)</title><rect x="8.9459%" y="485" width="0.0693%" height="15" fill="rgb(239,152,38)" fg:x="129" fg:w="1"/><text x="9.0631%" y="495.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.35%)</title><rect x="10.5409%" y="565" width="0.3467%" height="15" fill="rgb(249,139,47)" fg:x="152" fg:w="5"/><text x="10.6581%" y="575.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (4 samples, 0.28%)</title><rect x="11.0264%" y="501" width="0.2774%" height="15" fill="rgb(244,64,35)" fg:x="159" fg:w="4"/><text x="11.1435%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.28%)</title><rect x="11.0264%" y="485" width="0.2774%" height="15" fill="rgb(216,46,15)" fg:x="159" fg:w="4"/><text x="11.1435%" y="495.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (7 samples, 0.49%)</title><rect x="10.8877%" y="565" width="0.4854%" height="15" fill="rgb(250,74,19)" fg:x="157" fg:w="7"/><text x="11.0048%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.49%)</title><rect x="10.8877%" y="549" width="0.4854%" height="15" fill="rgb(249,42,33)" fg:x="157" fg:w="7"/><text x="11.0048%" y="559.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (7 samples, 0.49%)</title><rect x="10.8877%" y="533" width="0.4854%" height="15" fill="rgb(242,149,17)" fg:x="157" fg:w="7"/><text x="11.0048%" y="543.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (7 samples, 0.49%)</title><rect x="10.8877%" y="517" width="0.4854%" height="15" fill="rgb(244,29,21)" fg:x="157" fg:w="7"/><text x="11.0048%" y="527.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (1 samples, 0.07%)</title><rect x="11.3037%" y="501" width="0.0693%" height="15" fill="rgb(220,130,37)" fg:x="163" fg:w="1"/><text x="11.4209%" y="511.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (1 samples, 0.07%)</title><rect x="11.3731%" y="533" width="0.0693%" height="15" fill="rgb(211,67,2)" fg:x="164" fg:w="1"/><text x="11.4903%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.07%)</title><rect x="11.3731%" y="517" width="0.0693%" height="15" fill="rgb(235,68,52)" fg:x="164" fg:w="1"/><text x="11.4903%" y="527.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (3 samples, 0.21%)</title><rect x="11.3731%" y="549" width="0.2080%" height="15" fill="rgb(246,142,3)" fg:x="164" fg:w="3"/><text x="11.4903%" y="559.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (2 samples, 0.14%)</title><rect x="11.4424%" y="533" width="0.1387%" height="15" fill="rgb(241,25,7)" fg:x="165" fg:w="2"/><text x="11.5596%" y="543.50"></text></g><g><title>__memcpy_evex_unaligned_erms (17 samples, 1.18%)</title><rect x="11.6505%" y="405" width="1.1789%" height="15" fill="rgb(242,119,39)" fg:x="168" fg:w="17"/><text x="11.7677%" y="415.50">__..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (22 samples, 1.53%)</title><rect x="11.3731%" y="565" width="1.5257%" height="15" fill="rgb(241,98,45)" fg:x="164" fg:w="22"/><text x="11.4903%" y="575.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 1.32%)</title><rect x="11.5811%" y="549" width="1.3176%" height="15" fill="rgb(254,28,30)" fg:x="167" fg:w="19"/><text x="11.6983%" y="559.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 1.32%)</title><rect x="11.5811%" y="533" width="1.3176%" height="15" fill="rgb(241,142,54)" fg:x="167" fg:w="19"/><text x="11.6983%" y="543.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 1.32%)</title><rect x="11.5811%" y="517" width="1.3176%" height="15" fill="rgb(222,85,15)" fg:x="167" fg:w="19"/><text x="11.6983%" y="527.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 1.32%)</title><rect x="11.5811%" y="501" width="1.3176%" height="15" fill="rgb(210,85,47)" fg:x="167" fg:w="19"/><text x="11.6983%" y="511.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19 samples, 1.32%)</title><rect x="11.5811%" y="485" width="1.3176%" height="15" fill="rgb(224,206,25)" fg:x="167" fg:w="19"/><text x="11.6983%" y="495.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (19 samples, 1.32%)</title><rect x="11.5811%" y="469" width="1.3176%" height="15" fill="rgb(243,201,19)" fg:x="167" fg:w="19"/><text x="11.6983%" y="479.50">al..</text></g><g><title>alloc::alloc::realloc (19 samples, 1.32%)</title><rect x="11.5811%" y="453" width="1.3176%" height="15" fill="rgb(236,59,4)" fg:x="167" fg:w="19"/><text x="11.6983%" y="463.50">al..</text></g><g><title>__GI___libc_realloc (19 samples, 1.32%)</title><rect x="11.5811%" y="437" width="1.3176%" height="15" fill="rgb(254,179,45)" fg:x="167" fg:w="19"/><text x="11.6983%" y="447.50">__..</text></g><g><title>_int_realloc (18 samples, 1.25%)</title><rect x="11.6505%" y="421" width="1.2483%" height="15" fill="rgb(226,14,10)" fg:x="168" fg:w="18"/><text x="11.7677%" y="431.50">_i..</text></g><g><title>_int_malloc (1 samples, 0.07%)</title><rect x="12.8294%" y="405" width="0.0693%" height="15" fill="rgb(244,27,41)" fg:x="185" fg:w="1"/><text x="12.9466%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.07%)</title><rect x="12.8988%" y="565" width="0.0693%" height="15" fill="rgb(235,35,32)" fg:x="186" fg:w="1"/><text x="13.0159%" y="575.50"></text></g><g><title>_compound_head (1 samples, 0.07%)</title><rect x="12.9681%" y="133" width="0.0693%" height="15" fill="rgb(218,68,31)" fg:x="187" fg:w="1"/><text x="13.0853%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;(core::option::Option&lt;(usize,usize)&gt;,core::option::Option&lt;f64&gt;,core::option::Option&lt;f64&gt;)&gt;&gt;&gt; (2 samples, 0.14%)</title><rect x="12.9681%" y="549" width="0.1387%" height="15" fill="rgb(207,120,37)" fg:x="187" fg:w="2"/><text x="13.0853%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.14%)</title><rect x="12.9681%" y="533" width="0.1387%" height="15" fill="rgb(227,98,0)" fg:x="187" fg:w="2"/><text x="13.0853%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;(core::option::Option&lt;(usize,usize)&gt;,core::option::Option&lt;f64&gt;,core::option::Option&lt;f64&gt;)&gt;]&gt; (2 samples, 0.14%)</title><rect x="12.9681%" y="517" width="0.1387%" height="15" fill="rgb(207,7,3)" fg:x="187" fg:w="2"/><text x="13.0853%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(core::option::Option&lt;(usize,usize)&gt;,core::option::Option&lt;f64&gt;,core::option::Option&lt;f64&gt;)&gt;&gt; (2 samples, 0.14%)</title><rect x="12.9681%" y="501" width="0.1387%" height="15" fill="rgb(206,98,19)" fg:x="187" fg:w="2"/><text x="13.0853%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(core::option::Option&lt;(usize,usize)&gt;,core::option::Option&lt;f64&gt;,core::option::Option&lt;f64&gt;)&gt;&gt; (2 samples, 0.14%)</title><rect x="12.9681%" y="485" width="0.1387%" height="15" fill="rgb(217,5,26)" fg:x="187" fg:w="2"/><text x="13.0853%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.14%)</title><rect x="12.9681%" y="469" width="0.1387%" height="15" fill="rgb(235,190,38)" fg:x="187" fg:w="2"/><text x="13.0853%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.14%)</title><rect x="12.9681%" y="453" width="0.1387%" height="15" fill="rgb(247,86,24)" fg:x="187" fg:w="2"/><text x="13.0853%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.14%)</title><rect x="12.9681%" y="437" width="0.1387%" height="15" fill="rgb(205,101,16)" fg:x="187" fg:w="2"/><text x="13.0853%" y="447.50"></text></g><g><title>__GI___libc_free (2 samples, 0.14%)</title><rect x="12.9681%" y="421" width="0.1387%" height="15" fill="rgb(246,168,33)" fg:x="187" fg:w="2"/><text x="13.0853%" y="431.50"></text></g><g><title>_int_free (2 samples, 0.14%)</title><rect x="12.9681%" y="405" width="0.1387%" height="15" fill="rgb(231,114,1)" fg:x="187" fg:w="2"/><text x="13.0853%" y="415.50"></text></g><g><title>systrim (2 samples, 0.14%)</title><rect x="12.9681%" y="389" width="0.1387%" height="15" fill="rgb(207,184,53)" fg:x="187" fg:w="2"/><text x="13.0853%" y="399.50"></text></g><g><title>__glibc_morecore (2 samples, 0.14%)</title><rect x="12.9681%" y="373" width="0.1387%" height="15" fill="rgb(224,95,51)" fg:x="187" fg:w="2"/><text x="13.0853%" y="383.50"></text></g><g><title>__GI___sbrk (2 samples, 0.14%)</title><rect x="12.9681%" y="357" width="0.1387%" height="15" fill="rgb(212,188,45)" fg:x="187" fg:w="2"/><text x="13.0853%" y="367.50"></text></g><g><title>__GI___sbrk (2 samples, 0.14%)</title><rect x="12.9681%" y="341" width="0.1387%" height="15" fill="rgb(223,154,38)" fg:x="187" fg:w="2"/><text x="13.0853%" y="351.50"></text></g><g><title>__brk (2 samples, 0.14%)</title><rect x="12.9681%" y="325" width="0.1387%" height="15" fill="rgb(251,22,52)" fg:x="187" fg:w="2"/><text x="13.0853%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.14%)</title><rect x="12.9681%" y="309" width="0.1387%" height="15" fill="rgb(229,209,22)" fg:x="187" fg:w="2"/><text x="13.0853%" y="319.50"></text></g><g><title>do_syscall_64 (2 samples, 0.14%)</title><rect x="12.9681%" y="293" width="0.1387%" height="15" fill="rgb(234,138,34)" fg:x="187" fg:w="2"/><text x="13.0853%" y="303.50"></text></g><g><title>x64_sys_call (2 samples, 0.14%)</title><rect x="12.9681%" y="277" width="0.1387%" height="15" fill="rgb(212,95,11)" fg:x="187" fg:w="2"/><text x="13.0853%" y="287.50"></text></g><g><title>__x64_sys_brk (2 samples, 0.14%)</title><rect x="12.9681%" y="261" width="0.1387%" height="15" fill="rgb(240,179,47)" fg:x="187" fg:w="2"/><text x="13.0853%" y="271.50"></text></g><g><title>__do_sys_brk (2 samples, 0.14%)</title><rect x="12.9681%" y="245" width="0.1387%" height="15" fill="rgb(240,163,11)" fg:x="187" fg:w="2"/><text x="13.0853%" y="255.50"></text></g><g><title>do_vmi_align_munmap (2 samples, 0.14%)</title><rect x="12.9681%" y="229" width="0.1387%" height="15" fill="rgb(236,37,12)" fg:x="187" fg:w="2"/><text x="13.0853%" y="239.50"></text></g><g><title>unmap_region (2 samples, 0.14%)</title><rect x="12.9681%" y="213" width="0.1387%" height="15" fill="rgb(232,164,16)" fg:x="187" fg:w="2"/><text x="13.0853%" y="223.50"></text></g><g><title>unmap_vmas (2 samples, 0.14%)</title><rect x="12.9681%" y="197" width="0.1387%" height="15" fill="rgb(244,205,15)" fg:x="187" fg:w="2"/><text x="13.0853%" y="207.50"></text></g><g><title>unmap_single_vma (2 samples, 0.14%)</title><rect x="12.9681%" y="181" width="0.1387%" height="15" fill="rgb(223,117,47)" fg:x="187" fg:w="2"/><text x="13.0853%" y="191.50"></text></g><g><title>unmap_page_range (2 samples, 0.14%)</title><rect x="12.9681%" y="165" width="0.1387%" height="15" fill="rgb(244,107,35)" fg:x="187" fg:w="2"/><text x="13.0853%" y="175.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.14%)</title><rect x="12.9681%" y="149" width="0.1387%" height="15" fill="rgb(205,140,8)" fg:x="187" fg:w="2"/><text x="13.0853%" y="159.50"></text></g><g><title>zap_pte_range (1 samples, 0.07%)</title><rect x="13.0374%" y="133" width="0.0693%" height="15" fill="rgb(228,84,46)" fg:x="188" fg:w="1"/><text x="13.1546%" y="143.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.07%)</title><rect x="13.0374%" y="117" width="0.0693%" height="15" fill="rgb(254,188,9)" fg:x="188" fg:w="1"/><text x="13.1546%" y="127.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.07%)</title><rect x="13.0374%" y="101" width="0.0693%" height="15" fill="rgb(206,112,54)" fg:x="188" fg:w="1"/><text x="13.1546%" y="111.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.07%)</title><rect x="13.0374%" y="85" width="0.0693%" height="15" fill="rgb(216,84,49)" fg:x="188" fg:w="1"/><text x="13.1546%" y="95.50"></text></g><g><title>release_pages (1 samples, 0.07%)</title><rect x="13.0374%" y="69" width="0.0693%" height="15" fill="rgb(214,194,35)" fg:x="188" fg:w="1"/><text x="13.1546%" y="79.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.07%)</title><rect x="13.0374%" y="53" width="0.0693%" height="15" fill="rgb(249,28,3)" fg:x="188" fg:w="1"/><text x="13.1546%" y="63.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.07%)</title><rect x="13.0374%" y="37" width="0.0693%" height="15" fill="rgb(222,56,52)" fg:x="188" fg:w="1"/><text x="13.1546%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;fringe_vs_astar::pathfinder::AStar&lt;fringe_vs_astar::graph::AdjacencyGridGraph&gt;&gt; (23 samples, 1.60%)</title><rect x="12.9681%" y="565" width="1.5950%" height="15" fill="rgb(245,217,50)" fg:x="187" fg:w="23"/><text x="13.0853%" y="575.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;fringe_vs_astar::graph::AdjacencyGridGraph&gt; (21 samples, 1.46%)</title><rect x="13.1068%" y="549" width="1.4563%" height="15" fill="rgb(213,201,24)" fg:x="189" fg:w="21"/><text x="13.2240%" y="559.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;((usize,usize),f64)&gt;&gt;&gt;&gt; (21 samples, 1.46%)</title><rect x="13.1068%" y="533" width="1.4563%" height="15" fill="rgb(248,116,28)" fg:x="189" fg:w="21"/><text x="13.2240%" y="543.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.46%)</title><rect x="13.1068%" y="517" width="1.4563%" height="15" fill="rgb(219,72,43)" fg:x="189" fg:w="21"/><text x="13.2240%" y="527.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;((usize,usize),f64)&gt;&gt;]&gt; (21 samples, 1.46%)</title><rect x="13.1068%" y="501" width="1.4563%" height="15" fill="rgb(209,138,14)" fg:x="189" fg:w="21"/><text x="13.2240%" y="511.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;((usize,usize),f64)&gt;&gt;&gt; (21 samples, 1.46%)</title><rect x="13.1068%" y="485" width="1.4563%" height="15" fill="rgb(222,18,33)" fg:x="189" fg:w="21"/><text x="13.2240%" y="495.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.46%)</title><rect x="13.1068%" y="469" width="1.4563%" height="15" fill="rgb(213,199,7)" fg:x="189" fg:w="21"/><text x="13.2240%" y="479.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;((usize,usize),f64)&gt;]&gt; (21 samples, 1.46%)</title><rect x="13.1068%" y="453" width="1.4563%" height="15" fill="rgb(250,110,10)" fg:x="189" fg:w="21"/><text x="13.2240%" y="463.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;((usize,usize),f64)&gt;&gt; (21 samples, 1.46%)</title><rect x="13.1068%" y="437" width="1.4563%" height="15" fill="rgb(248,123,6)" fg:x="189" fg:w="21"/><text x="13.2240%" y="447.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;((usize,usize),f64)&gt;&gt; (21 samples, 1.46%)</title><rect x="13.1068%" y="421" width="1.4563%" height="15" fill="rgb(206,91,31)" fg:x="189" fg:w="21"/><text x="13.2240%" y="431.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.46%)</title><rect x="13.1068%" y="405" width="1.4563%" height="15" fill="rgb(211,154,13)" fg:x="189" fg:w="21"/><text x="13.2240%" y="415.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 1.32%)</title><rect x="13.2455%" y="389" width="1.3176%" height="15" fill="rgb(225,148,7)" fg:x="191" fg:w="19"/><text x="13.3627%" y="399.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (19 samples, 1.32%)</title><rect x="13.2455%" y="373" width="1.3176%" height="15" fill="rgb(220,160,43)" fg:x="191" fg:w="19"/><text x="13.3627%" y="383.50">al..</text></g><g><title>__GI___libc_free (19 samples, 1.32%)</title><rect x="13.2455%" y="357" width="1.3176%" height="15" fill="rgb(213,52,39)" fg:x="191" fg:w="19"/><text x="13.3627%" y="367.50">__..</text></g><g><title>_int_free (18 samples, 1.25%)</title><rect x="13.3148%" y="341" width="1.2483%" height="15" fill="rgb(243,137,7)" fg:x="192" fg:w="18"/><text x="13.4320%" y="351.50">_i..</text></g><g><title>unlink_chunk (1 samples, 0.07%)</title><rect x="14.4938%" y="325" width="0.0693%" height="15" fill="rgb(230,79,13)" fg:x="209" fg:w="1"/><text x="14.6109%" y="335.50"></text></g><g><title>fringe_vs_astar::pathfinder::AStar&lt;G&gt;::solve::_{{closure}} (1 samples, 0.07%)</title><rect x="14.5631%" y="565" width="0.0693%" height="15" fill="rgb(247,105,23)" fg:x="210" fg:w="1"/><text x="14.6803%" y="575.50"></text></g><g><title>fringe_vs_astar::pathfinder::heuristic (1 samples, 0.07%)</title><rect x="14.5631%" y="549" width="0.0693%" height="15" fill="rgb(223,179,41)" fg:x="210" fg:w="1"/><text x="14.6803%" y="559.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::drain (1 samples, 0.07%)</title><rect x="14.6325%" y="549" width="0.0693%" height="15" fill="rgb(218,9,34)" fg:x="211" fg:w="1"/><text x="14.7496%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (1 samples, 0.07%)</title><rect x="14.6325%" y="533" width="0.0693%" height="15" fill="rgb(222,106,8)" fg:x="211" fg:w="1"/><text x="14.7496%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.07%)</title><rect x="14.6325%" y="517" width="0.0693%" height="15" fill="rgb(211,220,0)" fg:x="211" fg:w="1"/><text x="14.7496%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.07%)</title><rect x="14.6325%" y="501" width="0.0693%" height="15" fill="rgb(229,52,16)" fg:x="211" fg:w="1"/><text x="14.7496%" y="511.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (42 samples, 2.91%)</title><rect x="21.4286%" y="453" width="2.9126%" height="15" fill="rgb(212,155,18)" fg:x="309" fg:w="42"/><text x="21.5458%" y="463.50">alloc::c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (42 samples, 2.91%)</title><rect x="21.4286%" y="437" width="2.9126%" height="15" fill="rgb(242,21,14)" fg:x="309" fg:w="42"/><text x="21.5458%" y="447.50">core::sl..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (42 samples, 2.91%)</title><rect x="21.4286%" y="421" width="2.9126%" height="15" fill="rgb(222,19,48)" fg:x="309" fg:w="42"/><text x="21.5458%" y="431.50">&lt;usize a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (42 samples, 2.91%)</title><rect x="21.4286%" y="405" width="2.9126%" height="15" fill="rgb(232,45,27)" fg:x="309" fg:w="42"/><text x="21.5458%" y="415.50">core::pt..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (31 samples, 2.15%)</title><rect x="24.3412%" y="453" width="2.1498%" height="15" fill="rgb(249,103,42)" fg:x="351" fg:w="31"/><text x="24.4584%" y="463.50">alloc..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (29 samples, 2.01%)</title><rect x="24.4799%" y="437" width="2.0111%" height="15" fill="rgb(246,81,33)" fg:x="353" fg:w="29"/><text x="24.5971%" y="447.50">core:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (29 samples, 2.01%)</title><rect x="24.4799%" y="421" width="2.0111%" height="15" fill="rgb(252,33,42)" fg:x="353" fg:w="29"/><text x="24.5971%" y="431.50">&lt;usiz..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (29 samples, 2.01%)</title><rect x="24.4799%" y="405" width="2.0111%" height="15" fill="rgb(209,212,41)" fg:x="353" fg:w="29"/><text x="24.5971%" y="415.50">core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (6 samples, 0.42%)</title><rect x="26.4910%" y="453" width="0.4161%" height="15" fill="rgb(207,154,6)" fg:x="382" fg:w="6"/><text x="26.6082%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::ge (6 samples, 0.42%)</title><rect x="26.4910%" y="437" width="0.4161%" height="15" fill="rgb(223,64,47)" fg:x="382" fg:w="6"/><text x="26.6082%" y="447.50"></text></g><g><title>&lt;fringe_vs_astar::pathfinder::WeightedCell as core::cmp::PartialOrd&gt;::partial_cmp (6 samples, 0.42%)</title><rect x="26.4910%" y="421" width="0.4161%" height="15" fill="rgb(211,161,38)" fg:x="382" fg:w="6"/><text x="26.6082%" y="431.50"></text></g><g><title>&lt;fringe_vs_astar::pathfinder::WeightedCell as core::cmp::Ord&gt;::cmp (6 samples, 0.42%)</title><rect x="26.4910%" y="405" width="0.4161%" height="15" fill="rgb(219,138,40)" fg:x="382" fg:w="6"/><text x="26.6082%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (104 samples, 7.21%)</title><rect x="26.9071%" y="453" width="7.2122%" height="15" fill="rgb(241,228,46)" fg:x="388" fg:w="104"/><text x="27.0243%" y="463.50">core::cmp::impls::&lt;impl ..</text></g><g><title>core::cmp::PartialOrd::le (62 samples, 4.30%)</title><rect x="29.8197%" y="437" width="4.2996%" height="15" fill="rgb(223,209,38)" fg:x="430" fg:w="62"/><text x="29.9369%" y="447.50">core::cmp::Pa..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_range (279 samples, 19.35%)</title><rect x="18.4466%" y="469" width="19.3481%" height="15" fill="rgb(236,164,45)" fg:x="266" fg:w="279"/><text x="18.5638%" y="479.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_range</text></g><g><title>fringe_vs_astar::pathfinder::modify_heap (53 samples, 3.68%)</title><rect x="34.1193%" y="453" width="3.6755%" height="15" fill="rgb(231,15,5)" fg:x="492" fg:w="53"/><text x="34.2365%" y="463.50">fringe_vs_a..</text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T,A&gt;&gt;&gt;::from (334 samples, 23.16%)</title><rect x="14.7018%" y="517" width="23.1623%" height="15" fill="rgb(252,35,15)" fg:x="212" fg:w="334"/><text x="14.8190%" y="527.50">&lt;alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt; as core::convert::From&lt;alloc::v..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::rebuild (332 samples, 23.02%)</title><rect x="14.8405%" y="501" width="23.0236%" height="15" fill="rgb(248,181,18)" fg:x="214" fg:w="332"/><text x="14.9577%" y="511.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::rebuild</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down (280 samples, 19.42%)</title><rect x="18.4466%" y="485" width="19.4175%" height="15" fill="rgb(233,39,42)" fg:x="266" fg:w="280"/><text x="18.5638%" y="495.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down</text></g><g><title>fringe_vs_astar::pathfinder::modify_heap (1 samples, 0.07%)</title><rect x="37.7947%" y="469" width="0.0693%" height="15" fill="rgb(238,110,33)" fg:x="545" fg:w="1"/><text x="37.9119%" y="479.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.07%)</title><rect x="37.8641%" y="485" width="0.0693%" height="15" fill="rgb(233,195,10)" fg:x="546" fg:w="1"/><text x="37.9813%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="38.0028%" y="437" width="0.0693%" height="15" fill="rgb(254,105,3)" fg:x="548" fg:w="1"/><text x="38.1200%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 6.31%)</title><rect x="46.2552%" y="373" width="6.3107%" height="15" fill="rgb(221,225,9)" fg:x="667" fg:w="91"/><text x="46.3724%" y="383.50">&lt;core::slice::iter::..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (91 samples, 6.31%)</title><rect x="46.2552%" y="357" width="6.3107%" height="15" fill="rgb(224,227,45)" fg:x="667" fg:w="91"/><text x="46.3724%" y="367.50">&lt;core::ptr::non_null..</text></g><g><title>&lt;alloc::collections::binary_heap::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (280 samples, 19.42%)</title><rect x="46.2552%" y="405" width="19.4175%" height="15" fill="rgb(229,198,43)" fg:x="667" fg:w="280"/><text x="46.3724%" y="415.50">&lt;alloc::collections::binary_heap::Drain&lt;T,A&gt; as core::iter::traits::..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (280 samples, 19.42%)</title><rect x="46.2552%" y="389" width="19.4175%" height="15" fill="rgb(206,209,35)" fg:x="667" fg:w="280"/><text x="46.3724%" y="399.50">&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iter..</text></g><g><title>core::option::Option&lt;T&gt;::map (189 samples, 13.11%)</title><rect x="52.5659%" y="373" width="13.1068%" height="15" fill="rgb(245,195,53)" fg:x="758" fg:w="189"/><text x="52.6831%" y="383.50">core::option::Option&lt;T&gt;::map</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="65.6727%" y="373" width="0.1387%" height="15" fill="rgb(240,92,26)" fg:x="947" fg:w="2"/><text x="65.7899%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (410 samples, 28.43%)</title><rect x="46.2552%" y="421" width="28.4327%" height="15" fill="rgb(207,40,23)" fg:x="667" fg:w="410"/><text x="46.3724%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (130 samples, 9.02%)</title><rect x="65.6727%" y="405" width="9.0153%" height="15" fill="rgb(223,111,35)" fg:x="947" fg:w="130"/><text x="65.7899%" y="415.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (130 samples, 9.02%)</title><rect x="65.6727%" y="389" width="9.0153%" height="15" fill="rgb(229,147,28)" fg:x="947" fg:w="130"/><text x="65.7899%" y="399.50">core::ops::function::impls::&lt;i..</text></g><g><title>fringe_vs_astar::pathfinder::modify_heap::_{{closure}} (128 samples, 8.88%)</title><rect x="65.8114%" y="373" width="8.8766%" height="15" fill="rgb(211,29,28)" fg:x="949" fg:w="128"/><text x="65.9286%" y="383.50">fringe_vs_astar::pathfinder::m..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (119 samples, 8.25%)</title><rect x="66.4355%" y="357" width="8.2524%" height="15" fill="rgb(228,72,33)" fg:x="958" fg:w="119"/><text x="66.5527%" y="367.50">core::tuple::&lt;impl core::cm..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (3 samples, 0.21%)</title><rect x="74.4799%" y="341" width="0.2080%" height="15" fill="rgb(205,214,31)" fg:x="1074" fg:w="3"/><text x="74.5971%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (65 samples, 4.51%)</title><rect x="74.6879%" y="421" width="4.5076%" height="15" fill="rgb(224,111,15)" fg:x="1077" fg:w="65"/><text x="74.8051%" y="431.50">alloc::vec::Ve..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;alloc::collections::binary_heap::Drain&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;,fringe_vs_astar::pathfinder::modify_heap::{{closure}}&gt;&gt; (2 samples, 0.14%)</title><rect x="79.1956%" y="421" width="0.1387%" height="15" fill="rgb(253,21,26)" fg:x="1142" fg:w="2"/><text x="79.3127%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Drain&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (2 samples, 0.14%)</title><rect x="79.1956%" y="405" width="0.1387%" height="15" fill="rgb(245,139,43)" fg:x="1142" fg:w="2"/><text x="79.3127%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (2 samples, 0.14%)</title><rect x="79.1956%" y="389" width="0.1387%" height="15" fill="rgb(252,170,7)" fg:x="1142" fg:w="2"/><text x="79.3127%" y="399.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.14%)</title><rect x="79.1956%" y="373" width="0.1387%" height="15" fill="rgb(231,118,14)" fg:x="1142" fg:w="2"/><text x="79.3127%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;fringe_vs_astar::pathfinder::WeightedCell,alloc::alloc::Global&gt;&gt; (2 samples, 0.14%)</title><rect x="79.1956%" y="357" width="0.1387%" height="15" fill="rgb(238,83,0)" fg:x="1142" fg:w="2"/><text x="79.3127%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.14%)</title><rect x="79.1956%" y="341" width="0.1387%" height="15" fill="rgb(221,39,39)" fg:x="1142" fg:w="2"/><text x="79.3127%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (845 samples, 58.60%)</title><rect x="38.0028%" y="453" width="58.5992%" height="15" fill="rgb(222,119,46)" fg:x="548" fg:w="845"/><text x="38.1200%" y="463.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (844 samples, 58.53%)</title><rect x="38.0721%" y="437" width="58.5298%" height="15" fill="rgb(222,165,49)" fg:x="549" fg:w="844"/><text x="38.1893%" y="447.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (249 samples, 17.27%)</title><rect x="79.3343%" y="421" width="17.2677%" height="15" fill="rgb(219,113,52)" fg:x="1144" fg:w="249"/><text x="79.4514%" y="431.50">core::ptr::write</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="96.5326%" y="405" width="0.0693%" height="15" fill="rgb(214,7,15)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="96.5326%" y="389" width="0.0693%" height="15" fill="rgb(235,32,4)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="399.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="96.5326%" y="373" width="0.0693%" height="15" fill="rgb(238,90,54)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="383.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.07%)</title><rect x="96.5326%" y="357" width="0.0693%" height="15" fill="rgb(213,208,19)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="367.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.07%)</title><rect x="96.5326%" y="341" width="0.0693%" height="15" fill="rgb(233,156,4)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="351.50"></text></g><g><title>tick_sched_timer (1 samples, 0.07%)</title><rect x="96.5326%" y="325" width="0.0693%" height="15" fill="rgb(207,194,5)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="335.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.07%)</title><rect x="96.5326%" y="309" width="0.0693%" height="15" fill="rgb(206,111,30)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="319.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.07%)</title><rect x="96.5326%" y="293" width="0.0693%" height="15" fill="rgb(243,70,54)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="303.50"></text></g><g><title>update_wall_time (1 samples, 0.07%)</title><rect x="96.5326%" y="277" width="0.0693%" height="15" fill="rgb(242,28,8)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="287.50"></text></g><g><title>timekeeping_advance (1 samples, 0.07%)</title><rect x="96.5326%" y="261" width="0.0693%" height="15" fill="rgb(219,106,18)" fg:x="1392" fg:w="1"/><text x="96.6498%" y="271.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="96.6019%" y="341" width="0.2080%" height="15" fill="rgb(244,222,10)" fg:x="1393" fg:w="3"/><text x="96.7191%" y="351.50"></text></g><g><title>_int_malloc (3 samples, 0.21%)</title><rect x="96.6019%" y="325" width="0.2080%" height="15" fill="rgb(236,179,52)" fg:x="1393" fg:w="3"/><text x="96.7191%" y="335.50"></text></g><g><title>unlink_chunk (2 samples, 0.14%)</title><rect x="96.6713%" y="309" width="0.1387%" height="15" fill="rgb(213,23,39)" fg:x="1394" fg:w="2"/><text x="96.7885%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,185 samples, 82.18%)</title><rect x="14.7018%" y="549" width="82.1775%" height="15" fill="rgb(238,48,10)" fg:x="212" fg:w="1185"/><text x="14.8190%" y="559.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,185 samples, 82.18%)</title><rect x="14.7018%" y="533" width="82.1775%" height="15" fill="rgb(251,196,23)" fg:x="212" fg:w="1185"/><text x="14.8190%" y="543.50">&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>core::iter::traits::iterator::Iterator::collect (851 samples, 59.02%)</title><rect x="37.8641%" y="517" width="59.0153%" height="15" fill="rgb(250,152,24)" fg:x="546" fg:w="851"/><text x="37.9813%" y="527.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (851 samples, 59.02%)</title><rect x="37.8641%" y="501" width="59.0153%" height="15" fill="rgb(209,150,17)" fg:x="546" fg:w="851"/><text x="37.9813%" y="511.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (850 samples, 58.95%)</title><rect x="37.9334%" y="485" width="58.9459%" height="15" fill="rgb(234,202,34)" fg:x="547" fg:w="850"/><text x="38.0506%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (850 samples, 58.95%)</title><rect x="37.9334%" y="469" width="58.9459%" height="15" fill="rgb(253,148,53)" fg:x="547" fg:w="850"/><text x="38.0506%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.28%)</title><rect x="96.6019%" y="453" width="0.2774%" height="15" fill="rgb(218,129,16)" fg:x="1393" fg:w="4"/><text x="96.7191%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.28%)</title><rect x="96.6019%" y="437" width="0.2774%" height="15" fill="rgb(216,85,19)" fg:x="1393" fg:w="4"/><text x="96.7191%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.28%)</title><rect x="96.6019%" y="421" width="0.2774%" height="15" fill="rgb(235,228,7)" fg:x="1393" fg:w="4"/><text x="96.7191%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.28%)</title><rect x="96.6019%" y="405" width="0.2774%" height="15" fill="rgb(245,175,0)" fg:x="1393" fg:w="4"/><text x="96.7191%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.28%)</title><rect x="96.6019%" y="389" width="0.2774%" height="15" fill="rgb(208,168,36)" fg:x="1393" fg:w="4"/><text x="96.7191%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.28%)</title><rect x="96.6019%" y="373" width="0.2774%" height="15" fill="rgb(246,171,24)" fg:x="1393" fg:w="4"/><text x="96.7191%" y="383.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.28%)</title><rect x="96.6019%" y="357" width="0.2774%" height="15" fill="rgb(215,142,24)" fg:x="1393" fg:w="4"/><text x="96.7191%" y="367.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.07%)</title><rect x="96.8100%" y="341" width="0.0693%" height="15" fill="rgb(250,187,7)" fg:x="1396" fg:w="1"/><text x="96.9272%" y="351.50"></text></g><g><title>fringe_vs_astar::pathfinder::AStar&lt;G&gt;::solve (1,272 samples, 88.21%)</title><rect x="9.0153%" y="581" width="88.2108%" height="15" fill="rgb(228,66,33)" fg:x="130" fg:w="1272"/><text x="9.1324%" y="591.50">fringe_vs_astar::pathfinder::AStar&lt;G&gt;::solve</text></g><g><title>fringe_vs_astar::pathfinder::modify_heap (1,191 samples, 82.59%)</title><rect x="14.6325%" y="565" width="82.5936%" height="15" fill="rgb(234,215,21)" fg:x="211" fg:w="1191"/><text x="14.7496%" y="575.50">fringe_vs_astar::pathfinder::modify_heap</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::BinaryHeap&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (5 samples, 0.35%)</title><rect x="96.8793%" y="549" width="0.3467%" height="15" fill="rgb(222,191,20)" fg:x="1397" fg:w="5"/><text x="96.9965%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (5 samples, 0.35%)</title><rect x="96.8793%" y="533" width="0.3467%" height="15" fill="rgb(245,79,54)" fg:x="1397" fg:w="5"/><text x="96.9965%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (5 samples, 0.35%)</title><rect x="96.8793%" y="517" width="0.3467%" height="15" fill="rgb(240,10,37)" fg:x="1397" fg:w="5"/><text x="96.9965%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.35%)</title><rect x="96.8793%" y="501" width="0.3467%" height="15" fill="rgb(214,192,32)" fg:x="1397" fg:w="5"/><text x="96.9965%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.35%)</title><rect x="96.8793%" y="485" width="0.3467%" height="15" fill="rgb(209,36,54)" fg:x="1397" fg:w="5"/><text x="96.9965%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.35%)</title><rect x="96.8793%" y="469" width="0.3467%" height="15" fill="rgb(220,10,11)" fg:x="1397" fg:w="5"/><text x="96.9965%" y="479.50"></text></g><g><title>__GI___libc_free (4 samples, 0.28%)</title><rect x="96.9487%" y="453" width="0.2774%" height="15" fill="rgb(221,106,17)" fg:x="1398" fg:w="4"/><text x="97.0659%" y="463.50"></text></g><g><title>_int_free (3 samples, 0.21%)</title><rect x="97.0180%" y="437" width="0.2080%" height="15" fill="rgb(251,142,44)" fg:x="1399" fg:w="3"/><text x="97.1352%" y="447.50"></text></g><g><title>process_echoes (1 samples, 0.07%)</title><rect x="97.2261%" y="229" width="0.0693%" height="15" fill="rgb(238,13,15)" fg:x="1402" fg:w="1"/><text x="97.3433%" y="239.50"></text></g><g><title>queue_work_on (1 samples, 0.07%)</title><rect x="97.5035%" y="181" width="0.0693%" height="15" fill="rgb(208,107,27)" fg:x="1406" fg:w="1"/><text x="97.6207%" y="191.50"></text></g><g><title>__queue_work (1 samples, 0.07%)</title><rect x="97.5035%" y="165" width="0.0693%" height="15" fill="rgb(205,136,37)" fg:x="1406" fg:w="1"/><text x="97.6207%" y="175.50"></text></g><g><title>wake_up_process (1 samples, 0.07%)</title><rect x="97.5035%" y="149" width="0.0693%" height="15" fill="rgb(250,205,27)" fg:x="1406" fg:w="1"/><text x="97.6207%" y="159.50"></text></g><g><title>try_to_wake_up (1 samples, 0.07%)</title><rect x="97.5035%" y="133" width="0.0693%" height="15" fill="rgb(210,80,43)" fg:x="1406" fg:w="1"/><text x="97.6207%" y="143.50"></text></g><g><title>select_task_rq_fair (1 samples, 0.07%)</title><rect x="97.5035%" y="117" width="0.0693%" height="15" fill="rgb(247,160,36)" fg:x="1406" fg:w="1"/><text x="97.6207%" y="127.50"></text></g><g><title>select_idle_sibling (1 samples, 0.07%)</title><rect x="97.5035%" y="101" width="0.0693%" height="15" fill="rgb(234,13,49)" fg:x="1406" fg:w="1"/><text x="97.6207%" y="111.50"></text></g><g><title>available_idle_cpu (1 samples, 0.07%)</title><rect x="97.5035%" y="85" width="0.0693%" height="15" fill="rgb(234,122,0)" fg:x="1406" fg:w="1"/><text x="97.6207%" y="95.50"></text></g><g><title>process_output_block (5 samples, 0.35%)</title><rect x="97.2954%" y="229" width="0.3467%" height="15" fill="rgb(207,146,38)" fg:x="1403" fg:w="5"/><text x="97.4126%" y="239.50"></text></g><g><title>pty_write (2 samples, 0.14%)</title><rect x="97.5035%" y="213" width="0.1387%" height="15" fill="rgb(207,177,25)" fg:x="1406" fg:w="2"/><text x="97.6207%" y="223.50"></text></g><g><title>tty_insert_flip_string_and_push_buffer (2 samples, 0.14%)</title><rect x="97.5035%" y="197" width="0.1387%" height="15" fill="rgb(211,178,42)" fg:x="1406" fg:w="2"/><text x="97.6207%" y="207.50"></text></g><g><title>tty_insert_flip_string_fixed_flag (1 samples, 0.07%)</title><rect x="97.5728%" y="181" width="0.0693%" height="15" fill="rgb(230,69,54)" fg:x="1407" fg:w="1"/><text x="97.6900%" y="191.50"></text></g><g><title>__tty_buffer_request_room (1 samples, 0.07%)</title><rect x="97.5728%" y="165" width="0.0693%" height="15" fill="rgb(214,135,41)" fg:x="1407" fg:w="1"/><text x="97.6900%" y="175.50"></text></g><g><title>__kmalloc (1 samples, 0.07%)</title><rect x="97.5728%" y="149" width="0.0693%" height="15" fill="rgb(237,67,25)" fg:x="1407" fg:w="1"/><text x="97.6900%" y="159.50"></text></g><g><title>memset_orig (1 samples, 0.07%)</title><rect x="97.5728%" y="133" width="0.0693%" height="15" fill="rgb(222,189,50)" fg:x="1407" fg:w="1"/><text x="97.6900%" y="143.50"></text></g><g><title>_start (1,400 samples, 97.09%)</title><rect x="1.2483%" y="725" width="97.0874%" height="15" fill="rgb(245,148,34)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="735.50">_start</text></g><g><title>__libc_start_main_impl (1,400 samples, 97.09%)</title><rect x="1.2483%" y="709" width="97.0874%" height="15" fill="rgb(222,29,6)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="719.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,400 samples, 97.09%)</title><rect x="1.2483%" y="693" width="97.0874%" height="15" fill="rgb(221,189,43)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="703.50">__libc_start_call_main</text></g><g><title>main (1,400 samples, 97.09%)</title><rect x="1.2483%" y="677" width="97.0874%" height="15" fill="rgb(207,36,27)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (1,400 samples, 97.09%)</title><rect x="1.2483%" y="661" width="97.0874%" height="15" fill="rgb(217,90,24)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (1,400 samples, 97.09%)</title><rect x="1.2483%" y="645" width="97.0874%" height="15" fill="rgb(224,66,35)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="655.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,400 samples, 97.09%)</title><rect x="1.2483%" y="629" width="97.0874%" height="15" fill="rgb(221,13,50)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,400 samples, 97.09%)</title><rect x="1.2483%" y="613" width="97.0874%" height="15" fill="rgb(236,68,49)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="623.50">core::ops::function::FnOnce::call_once</text></g><g><title>fringe_vs_astar::main (1,400 samples, 97.09%)</title><rect x="1.2483%" y="597" width="97.0874%" height="15" fill="rgb(229,146,28)" fg:x="18" fg:w="1400"/><text x="1.3655%" y="607.50">fringe_vs_astar::main</text></g><g><title>std::io::stdio::_print (16 samples, 1.11%)</title><rect x="97.2261%" y="581" width="1.1096%" height="15" fill="rgb(225,31,38)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="591.50">st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (16 samples, 1.11%)</title><rect x="97.2261%" y="565" width="1.1096%" height="15" fill="rgb(250,208,3)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="575.50">&lt;&amp;..</text></g><g><title>core::fmt::write (16 samples, 1.11%)</title><rect x="97.2261%" y="549" width="1.1096%" height="15" fill="rgb(246,54,23)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="559.50">co..</text></g><g><title>core::fmt::rt::Argument::fmt (16 samples, 1.11%)</title><rect x="97.2261%" y="533" width="1.1096%" height="15" fill="rgb(243,76,11)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="543.50">co..</text></g><g><title>&lt;fringe_vs_astar::map::GridMap as core::fmt::Display&gt;::fmt (16 samples, 1.11%)</title><rect x="97.2261%" y="517" width="1.1096%" height="15" fill="rgb(245,21,50)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="527.50">&lt;f..</text></g><g><title>core::fmt::Formatter::write_fmt (16 samples, 1.11%)</title><rect x="97.2261%" y="501" width="1.1096%" height="15" fill="rgb(228,9,43)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="511.50">co..</text></g><g><title>core::fmt::write (16 samples, 1.11%)</title><rect x="97.2261%" y="485" width="1.1096%" height="15" fill="rgb(208,100,47)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="495.50">co..</text></g><g><title>core::fmt::rt::Argument::fmt (16 samples, 1.11%)</title><rect x="97.2261%" y="469" width="1.1096%" height="15" fill="rgb(232,26,8)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="479.50">co..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (16 samples, 1.11%)</title><rect x="97.2261%" y="453" width="1.1096%" height="15" fill="rgb(216,166,38)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="463.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (16 samples, 1.11%)</title><rect x="97.2261%" y="437" width="1.1096%" height="15" fill="rgb(251,202,51)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="447.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (16 samples, 1.11%)</title><rect x="97.2261%" y="421" width="1.1096%" height="15" fill="rgb(254,216,34)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="431.50">&lt;s..</text></g><g><title>__GI___libc_write (16 samples, 1.11%)</title><rect x="97.2261%" y="405" width="1.1096%" height="15" fill="rgb(251,32,27)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="415.50">__..</text></g><g><title>entry_SYSCALL_64_after_hwframe (16 samples, 1.11%)</title><rect x="97.2261%" y="389" width="1.1096%" height="15" fill="rgb(208,127,28)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="399.50">en..</text></g><g><title>do_syscall_64 (16 samples, 1.11%)</title><rect x="97.2261%" y="373" width="1.1096%" height="15" fill="rgb(224,137,22)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="383.50">do..</text></g><g><title>x64_sys_call (16 samples, 1.11%)</title><rect x="97.2261%" y="357" width="1.1096%" height="15" fill="rgb(254,70,32)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="367.50">x6..</text></g><g><title>__x64_sys_write (16 samples, 1.11%)</title><rect x="97.2261%" y="341" width="1.1096%" height="15" fill="rgb(229,75,37)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="351.50">__..</text></g><g><title>ksys_write (16 samples, 1.11%)</title><rect x="97.2261%" y="325" width="1.1096%" height="15" fill="rgb(252,64,23)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="335.50">ks..</text></g><g><title>vfs_write (16 samples, 1.11%)</title><rect x="97.2261%" y="309" width="1.1096%" height="15" fill="rgb(232,162,48)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="319.50">vf..</text></g><g><title>tty_write (16 samples, 1.11%)</title><rect x="97.2261%" y="293" width="1.1096%" height="15" fill="rgb(246,160,12)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="303.50">tt..</text></g><g><title>file_tty_write.constprop.0 (16 samples, 1.11%)</title><rect x="97.2261%" y="277" width="1.1096%" height="15" fill="rgb(247,166,0)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="287.50">fi..</text></g><g><title>do_tty_write (16 samples, 1.11%)</title><rect x="97.2261%" y="261" width="1.1096%" height="15" fill="rgb(249,219,21)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="271.50">do..</text></g><g><title>n_tty_write (16 samples, 1.11%)</title><rect x="97.2261%" y="245" width="1.1096%" height="15" fill="rgb(205,209,3)" fg:x="1402" fg:w="16"/><text x="97.3433%" y="255.50">n_..</text></g><g><title>wait_woken (10 samples, 0.69%)</title><rect x="97.6422%" y="229" width="0.6935%" height="15" fill="rgb(243,44,1)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="239.50"></text></g><g><title>schedule_timeout (10 samples, 0.69%)</title><rect x="97.6422%" y="213" width="0.6935%" height="15" fill="rgb(206,159,16)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="223.50"></text></g><g><title>schedule (10 samples, 0.69%)</title><rect x="97.6422%" y="197" width="0.6935%" height="15" fill="rgb(244,77,30)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="207.50"></text></g><g><title>__schedule (10 samples, 0.69%)</title><rect x="97.6422%" y="181" width="0.6935%" height="15" fill="rgb(218,69,12)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="191.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.69%)</title><rect x="97.6422%" y="165" width="0.6935%" height="15" fill="rgb(212,87,7)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="175.50"></text></g><g><title>__perf_event_task_sched_in (10 samples, 0.69%)</title><rect x="97.6422%" y="149" width="0.6935%" height="15" fill="rgb(245,114,25)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="159.50"></text></g><g><title>perf_ctx_enable (10 samples, 0.69%)</title><rect x="97.6422%" y="133" width="0.6935%" height="15" fill="rgb(210,61,42)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="143.50"></text></g><g><title>x86_pmu_enable (10 samples, 0.69%)</title><rect x="97.6422%" y="117" width="0.6935%" height="15" fill="rgb(211,52,33)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="127.50"></text></g><g><title>intel_pmu_enable_all (10 samples, 0.69%)</title><rect x="97.6422%" y="101" width="0.6935%" height="15" fill="rgb(234,58,33)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="111.50"></text></g><g><title>native_write_msr (10 samples, 0.69%)</title><rect x="97.6422%" y="85" width="0.6935%" height="15" fill="rgb(220,115,36)" fg:x="1408" fg:w="10"/><text x="97.7594%" y="95.50"></text></g><g><title>asm_exc_page_fault (10 samples, 0.69%)</title><rect x="98.3356%" y="725" width="0.6935%" height="15" fill="rgb(243,153,54)" fg:x="1418" fg:w="10"/><text x="98.4528%" y="735.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.07%)</title><rect x="99.0291%" y="677" width="0.0693%" height="15" fill="rgb(251,47,18)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="687.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.07%)</title><rect x="99.0291%" y="661" width="0.0693%" height="15" fill="rgb(242,102,42)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="671.50"></text></g><g><title>bprm_execve (1 samples, 0.07%)</title><rect x="99.0291%" y="645" width="0.0693%" height="15" fill="rgb(234,31,38)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="655.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.07%)</title><rect x="99.0291%" y="629" width="0.0693%" height="15" fill="rgb(221,117,51)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="639.50"></text></g><g><title>exec_binprm (1 samples, 0.07%)</title><rect x="99.0291%" y="613" width="0.0693%" height="15" fill="rgb(212,20,18)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="623.50"></text></g><g><title>search_binary_handler (1 samples, 0.07%)</title><rect x="99.0291%" y="597" width="0.0693%" height="15" fill="rgb(245,133,36)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="607.50"></text></g><g><title>load_elf_binary (1 samples, 0.07%)</title><rect x="99.0291%" y="581" width="0.0693%" height="15" fill="rgb(212,6,19)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="591.50"></text></g><g><title>setup_arg_pages (1 samples, 0.07%)</title><rect x="99.0291%" y="565" width="0.0693%" height="15" fill="rgb(218,1,36)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="575.50"></text></g><g><title>shift_arg_pages (1 samples, 0.07%)</title><rect x="99.0291%" y="549" width="0.0693%" height="15" fill="rgb(246,84,54)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="559.50"></text></g><g><title>move_page_tables (1 samples, 0.07%)</title><rect x="99.0291%" y="533" width="0.0693%" height="15" fill="rgb(242,110,6)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="543.50"></text></g><g><title>__pte_alloc (1 samples, 0.07%)</title><rect x="99.0291%" y="517" width="0.0693%" height="15" fill="rgb(214,47,5)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="527.50"></text></g><g><title>pte_alloc_one (1 samples, 0.07%)</title><rect x="99.0291%" y="501" width="0.0693%" height="15" fill="rgb(218,159,25)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="511.50"></text></g><g><title>alloc_pages (1 samples, 0.07%)</title><rect x="99.0291%" y="485" width="0.0693%" height="15" fill="rgb(215,211,28)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="495.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="99.0291%" y="469" width="0.0693%" height="15" fill="rgb(238,59,32)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="479.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="99.0291%" y="453" width="0.0693%" height="15" fill="rgb(226,82,3)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="463.50"></text></g><g><title>rmqueue (1 samples, 0.07%)</title><rect x="99.0291%" y="437" width="0.0693%" height="15" fill="rgb(240,164,32)" fg:x="1428" fg:w="1"/><text x="99.1463%" y="447.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.07%)</title><rect x="99.0985%" y="565" width="0.0693%" height="15" fill="rgb(232,46,7)" fg:x="1429" fg:w="1"/><text x="99.2157%" y="575.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.07%)</title><rect x="99.0985%" y="549" width="0.0693%" height="15" fill="rgb(229,129,53)" fg:x="1429" fg:w="1"/><text x="99.2157%" y="559.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.07%)</title><rect x="99.0985%" y="533" width="0.0693%" height="15" fill="rgb(234,188,29)" fg:x="1429" fg:w="1"/><text x="99.2157%" y="543.50"></text></g><g><title>release_pages (1 samples, 0.07%)</title><rect x="99.0985%" y="517" width="0.0693%" height="15" fill="rgb(246,141,4)" fg:x="1429" fg:w="1"/><text x="99.2157%" y="527.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.07%)</title><rect x="99.0985%" y="501" width="0.0693%" height="15" fill="rgb(229,23,39)" fg:x="1429" fg:w="1"/><text x="99.2157%" y="511.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="99.0985%" y="485" width="0.0693%" height="15" fill="rgb(206,12,3)" fg:x="1429" fg:w="1"/><text x="99.2157%" y="495.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.07%)</title><rect x="99.0985%" y="469" width="0.0693%" height="15" fill="rgb(252,226,20)" fg:x="1429" fg:w="1"/><text x="99.2157%" y="479.50"></text></g><g><title>_compound_head (1 samples, 0.07%)</title><rect x="99.1678%" y="501" width="0.0693%" height="15" fill="rgb(216,123,35)" fg:x="1430" fg:w="1"/><text x="99.2850%" y="511.50"></text></g><g><title>page_remove_rmap (2 samples, 0.14%)</title><rect x="99.2372%" y="485" width="0.1387%" height="15" fill="rgb(212,68,40)" fg:x="1431" fg:w="2"/><text x="99.3544%" y="495.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.07%)</title><rect x="99.3065%" y="469" width="0.0693%" height="15" fill="rgb(254,125,32)" fg:x="1432" fg:w="1"/><text x="99.4237%" y="479.50"></text></g><g><title>free_pages_and_swap_cache (3 samples, 0.21%)</title><rect x="99.3759%" y="453" width="0.2080%" height="15" fill="rgb(253,97,22)" fg:x="1433" fg:w="3"/><text x="99.4931%" y="463.50"></text></g><g><title>release_pages (3 samples, 0.21%)</title><rect x="99.3759%" y="437" width="0.2080%" height="15" fill="rgb(241,101,14)" fg:x="1433" fg:w="3"/><text x="99.4931%" y="447.50"></text></g><g><title>free_unref_page_list (2 samples, 0.14%)</title><rect x="99.4452%" y="421" width="0.1387%" height="15" fill="rgb(238,103,29)" fg:x="1434" fg:w="2"/><text x="99.5624%" y="431.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.07%)</title><rect x="99.5146%" y="405" width="0.0693%" height="15" fill="rgb(233,195,47)" fg:x="1435" fg:w="1"/><text x="99.6318%" y="415.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.07%)</title><rect x="99.5146%" y="389" width="0.0693%" height="15" fill="rgb(246,218,30)" fg:x="1435" fg:w="1"/><text x="99.6318%" y="399.50"></text></g><g><title>__free_one_page (1 samples, 0.07%)</title><rect x="99.5146%" y="373" width="0.0693%" height="15" fill="rgb(219,145,47)" fg:x="1435" fg:w="1"/><text x="99.6318%" y="383.50"></text></g><g><title>fringe-vs-astar (1,437 samples, 99.65%)</title><rect x="0.0000%" y="741" width="99.6533%" height="15" fill="rgb(243,12,26)" fg:x="0" fg:w="1437"/><text x="0.1172%" y="751.50">fringe-vs-astar</text></g><g><title>entry_SYSCALL_64_after_hwframe (9 samples, 0.62%)</title><rect x="99.0291%" y="725" width="0.6241%" height="15" fill="rgb(214,87,16)" fg:x="1428" fg:w="9"/><text x="99.1463%" y="735.50"></text></g><g><title>do_syscall_64 (9 samples, 0.62%)</title><rect x="99.0291%" y="709" width="0.6241%" height="15" fill="rgb(208,99,42)" fg:x="1428" fg:w="9"/><text x="99.1463%" y="719.50"></text></g><g><title>x64_sys_call (9 samples, 0.62%)</title><rect x="99.0291%" y="693" width="0.6241%" height="15" fill="rgb(253,99,2)" fg:x="1428" fg:w="9"/><text x="99.1463%" y="703.50"></text></g><g><title>__x64_sys_exit_group (8 samples, 0.55%)</title><rect x="99.0985%" y="677" width="0.5548%" height="15" fill="rgb(220,168,23)" fg:x="1429" fg:w="8"/><text x="99.2157%" y="687.50"></text></g><g><title>do_group_exit (8 samples, 0.55%)</title><rect x="99.0985%" y="661" width="0.5548%" height="15" fill="rgb(242,38,24)" fg:x="1429" fg:w="8"/><text x="99.2157%" y="671.50"></text></g><g><title>do_exit (8 samples, 0.55%)</title><rect x="99.0985%" y="645" width="0.5548%" height="15" fill="rgb(225,182,9)" fg:x="1429" fg:w="8"/><text x="99.2157%" y="655.50"></text></g><g><title>exit_mm (8 samples, 0.55%)</title><rect x="99.0985%" y="629" width="0.5548%" height="15" fill="rgb(243,178,37)" fg:x="1429" fg:w="8"/><text x="99.2157%" y="639.50"></text></g><g><title>mmput (8 samples, 0.55%)</title><rect x="99.0985%" y="613" width="0.5548%" height="15" fill="rgb(232,139,19)" fg:x="1429" fg:w="8"/><text x="99.2157%" y="623.50"></text></g><g><title>__mmput (8 samples, 0.55%)</title><rect x="99.0985%" y="597" width="0.5548%" height="15" fill="rgb(225,201,24)" fg:x="1429" fg:w="8"/><text x="99.2157%" y="607.50"></text></g><g><title>exit_mmap (8 samples, 0.55%)</title><rect x="99.0985%" y="581" width="0.5548%" height="15" fill="rgb(221,47,46)" fg:x="1429" fg:w="8"/><text x="99.2157%" y="591.50"></text></g><g><title>unmap_vmas (7 samples, 0.49%)</title><rect x="99.1678%" y="565" width="0.4854%" height="15" fill="rgb(249,23,13)" fg:x="1430" fg:w="7"/><text x="99.2850%" y="575.50"></text></g><g><title>unmap_single_vma (7 samples, 0.49%)</title><rect x="99.1678%" y="549" width="0.4854%" height="15" fill="rgb(219,9,5)" fg:x="1430" fg:w="7"/><text x="99.2850%" y="559.50"></text></g><g><title>unmap_page_range (7 samples, 0.49%)</title><rect x="99.1678%" y="533" width="0.4854%" height="15" fill="rgb(254,171,16)" fg:x="1430" fg:w="7"/><text x="99.2850%" y="543.50"></text></g><g><title>zap_pmd_range.isra.0 (7 samples, 0.49%)</title><rect x="99.1678%" y="517" width="0.4854%" height="15" fill="rgb(230,171,20)" fg:x="1430" fg:w="7"/><text x="99.2850%" y="527.50"></text></g><g><title>zap_pte_range (6 samples, 0.42%)</title><rect x="99.2372%" y="501" width="0.4161%" height="15" fill="rgb(210,71,41)" fg:x="1431" fg:w="6"/><text x="99.3544%" y="511.50"></text></g><g><title>tlb_flush_mmu (4 samples, 0.28%)</title><rect x="99.3759%" y="485" width="0.2774%" height="15" fill="rgb(206,173,20)" fg:x="1433" fg:w="4"/><text x="99.4931%" y="495.50"></text></g><g><title>tlb_batch_pages_flush (4 samples, 0.28%)</title><rect x="99.3759%" y="469" width="0.2774%" height="15" fill="rgb(233,88,34)" fg:x="1433" fg:w="4"/><text x="99.4931%" y="479.50"></text></g><g><title>free_swap_cache (1 samples, 0.07%)</title><rect x="99.5839%" y="453" width="0.0693%" height="15" fill="rgb(223,209,46)" fg:x="1436" fg:w="1"/><text x="99.7011%" y="463.50"></text></g><g><title>all (1,442 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(250,43,18)" fg:x="0" fg:w="1442"/><text x="0.1172%" y="767.50"></text></g><g><title>perf-exec (5 samples, 0.35%)</title><rect x="99.6533%" y="741" width="0.3467%" height="15" fill="rgb(208,13,10)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.35%)</title><rect x="99.6533%" y="725" width="0.3467%" height="15" fill="rgb(212,200,36)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="735.50"></text></g><g><title>do_syscall_64 (5 samples, 0.35%)</title><rect x="99.6533%" y="709" width="0.3467%" height="15" fill="rgb(225,90,30)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="719.50"></text></g><g><title>x64_sys_call (5 samples, 0.35%)</title><rect x="99.6533%" y="693" width="0.3467%" height="15" fill="rgb(236,182,39)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="703.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.35%)</title><rect x="99.6533%" y="677" width="0.3467%" height="15" fill="rgb(212,144,35)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="687.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.35%)</title><rect x="99.6533%" y="661" width="0.3467%" height="15" fill="rgb(228,63,44)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="671.50"></text></g><g><title>bprm_execve (5 samples, 0.35%)</title><rect x="99.6533%" y="645" width="0.3467%" height="15" fill="rgb(228,109,6)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="655.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.35%)</title><rect x="99.6533%" y="629" width="0.3467%" height="15" fill="rgb(238,117,24)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="639.50"></text></g><g><title>exec_binprm (5 samples, 0.35%)</title><rect x="99.6533%" y="613" width="0.3467%" height="15" fill="rgb(242,26,26)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="623.50"></text></g><g><title>search_binary_handler (5 samples, 0.35%)</title><rect x="99.6533%" y="597" width="0.3467%" height="15" fill="rgb(221,92,48)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="607.50"></text></g><g><title>load_elf_binary (5 samples, 0.35%)</title><rect x="99.6533%" y="581" width="0.3467%" height="15" fill="rgb(209,209,32)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="591.50"></text></g><g><title>begin_new_exec (5 samples, 0.35%)</title><rect x="99.6533%" y="565" width="0.3467%" height="15" fill="rgb(221,70,22)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="575.50"></text></g><g><title>perf_event_exec (5 samples, 0.35%)</title><rect x="99.6533%" y="549" width="0.3467%" height="15" fill="rgb(248,145,5)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="559.50"></text></g><g><title>perf_event_enable_on_exec (5 samples, 0.35%)</title><rect x="99.6533%" y="533" width="0.3467%" height="15" fill="rgb(226,116,26)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="543.50"></text></g><g><title>ctx_resched (5 samples, 0.35%)</title><rect x="99.6533%" y="517" width="0.3467%" height="15" fill="rgb(244,5,17)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="527.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.35%)</title><rect x="99.6533%" y="501" width="0.3467%" height="15" fill="rgb(252,159,33)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="511.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.35%)</title><rect x="99.6533%" y="485" width="0.3467%" height="15" fill="rgb(206,71,0)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="495.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.35%)</title><rect x="99.6533%" y="469" width="0.3467%" height="15" fill="rgb(233,118,54)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="479.50"></text></g><g><title>native_write_msr (5 samples, 0.35%)</title><rect x="99.6533%" y="453" width="0.3467%" height="15" fill="rgb(234,83,48)" fg:x="1437" fg:w="5"/><text x="99.7704%" y="463.50"></text></g></svg></svg>