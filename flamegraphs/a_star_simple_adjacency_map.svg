<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2560" height="694" onload="init(evt)" viewBox="0 0 2560 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="677.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2550" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2550" y="677.00"> </text><svg id="frames" x="10" width="2540" total_samples="5978"><g><title>&lt;fringe_vs_astar::graph::AdjacencyMapGraph as fringe_vs_astar::graph::Graph&gt;::neighbors (19 samples, 0.32%)</title><rect x="0.0000%" y="597" width="0.3178%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="19"/><text x="0.1172%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7 samples, 0.12%)</title><rect x="0.2007%" y="581" width="0.1171%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="7"/><text x="0.3179%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7 samples, 0.12%)</title><rect x="0.2007%" y="565" width="0.1171%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="7"/><text x="0.3179%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.12%)</title><rect x="0.2007%" y="549" width="0.1171%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="7"/><text x="0.3179%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.12%)</title><rect x="0.2007%" y="533" width="0.1171%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="7"/><text x="0.3179%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (89 samples, 1.49%)</title><rect x="0.3178%" y="597" width="1.4888%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="89"/><text x="0.4350%" y="607.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (52 samples, 0.87%)</title><rect x="0.9368%" y="581" width="0.8699%" height="15" fill="rgb(207,160,47)" fg:x="56" fg:w="52"/><text x="1.0540%" y="591.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (52 samples, 0.87%)</title><rect x="0.9368%" y="565" width="0.8699%" height="15" fill="rgb(228,23,34)" fg:x="56" fg:w="52"/><text x="1.0540%" y="575.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (112 samples, 1.87%)</title><rect x="1.8066%" y="597" width="1.8735%" height="15" fill="rgb(218,30,26)" fg:x="108" fg:w="112"/><text x="1.9238%" y="607.50">core..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple::_{{closure}} (8 samples, 0.13%)</title><rect x="3.8307%" y="581" width="0.1338%" height="15" fill="rgb(220,122,19)" fg:x="229" fg:w="8"/><text x="3.9479%" y="591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (119 samples, 1.99%)</title><rect x="3.9645%" y="581" width="1.9906%" height="15" fill="rgb(250,228,42)" fg:x="237" fg:w="119"/><text x="4.0817%" y="591.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (119 samples, 1.99%)</title><rect x="3.9645%" y="565" width="1.9906%" height="15" fill="rgb(240,193,28)" fg:x="237" fg:w="119"/><text x="4.0817%" y="575.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (119 samples, 1.99%)</title><rect x="3.9645%" y="549" width="1.9906%" height="15" fill="rgb(216,20,37)" fg:x="237" fg:w="119"/><text x="4.0817%" y="559.50">hashb..</text></g><g><title>hashbrown::map::make_hash (119 samples, 1.99%)</title><rect x="3.9645%" y="533" width="1.9906%" height="15" fill="rgb(206,188,39)" fg:x="237" fg:w="119"/><text x="4.0817%" y="543.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (119 samples, 1.99%)</title><rect x="3.9645%" y="517" width="1.9906%" height="15" fill="rgb(217,207,13)" fg:x="237" fg:w="119"/><text x="4.0817%" y="527.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (119 samples, 1.99%)</title><rect x="3.9645%" y="501" width="1.9906%" height="15" fill="rgb(231,73,38)" fg:x="237" fg:w="119"/><text x="4.0817%" y="511.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (119 samples, 1.99%)</title><rect x="3.9645%" y="485" width="1.9906%" height="15" fill="rgb(225,20,46)" fg:x="237" fg:w="119"/><text x="4.0817%" y="495.50">core:..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (153 samples, 2.56%)</title><rect x="3.6802%" y="597" width="2.5594%" height="15" fill="rgb(210,31,41)" fg:x="220" fg:w="153"/><text x="3.7973%" y="607.50">fringe_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (17 samples, 0.28%)</title><rect x="5.9552%" y="581" width="0.2844%" height="15" fill="rgb(221,200,47)" fg:x="356" fg:w="17"/><text x="6.0724%" y="591.50"></text></g><g><title>fringe_vs_astar::pathfinder::heuristic (6 samples, 0.10%)</title><rect x="6.2395%" y="597" width="0.1004%" height="15" fill="rgb(226,26,5)" fg:x="373" fg:w="6"/><text x="6.3567%" y="607.50"></text></g><g><title>[unknown] (442 samples, 7.39%)</title><rect x="0.0000%" y="613" width="7.3938%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="442"/><text x="0.1172%" y="623.50">[unknown]</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (63 samples, 1.05%)</title><rect x="6.3399%" y="597" width="1.0539%" height="15" fill="rgb(235,183,28)" fg:x="379" fg:w="63"/><text x="6.4571%" y="607.50">h..</text></g><g><title>hashbrown::map::make_hash (13 samples, 0.22%)</title><rect x="7.1763%" y="581" width="0.2175%" height="15" fill="rgb(221,5,38)" fg:x="429" fg:w="13"/><text x="7.2935%" y="591.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (2 samples, 0.03%)</title><rect x="8.7822%" y="437" width="0.0335%" height="15" fill="rgb(247,18,42)" fg:x="525" fg:w="2"/><text x="8.8994%" y="447.50"></text></g><g><title>&lt;&amp;f32 as core::ops::arith::Add&lt;&amp;f32&gt;&gt;::add (10 samples, 0.17%)</title><rect x="8.7822%" y="453" width="0.1673%" height="15" fill="rgb(241,131,45)" fg:x="525" fg:w="10"/><text x="8.8994%" y="463.50"></text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (8 samples, 0.13%)</title><rect x="8.8157%" y="437" width="0.1338%" height="15" fill="rgb(249,31,29)" fg:x="527" fg:w="8"/><text x="8.9328%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.20%)</title><rect x="8.9495%" y="453" width="0.2007%" height="15" fill="rgb(225,111,53)" fg:x="535" fg:w="12"/><text x="9.0667%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.15%)</title><rect x="8.9997%" y="437" width="0.1506%" height="15" fill="rgb(238,160,17)" fg:x="538" fg:w="9"/><text x="9.1169%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.13%)</title><rect x="9.7859%" y="293" width="0.1338%" height="15" fill="rgb(214,148,48)" fg:x="585" fg:w="8"/><text x="9.9031%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (16 samples, 0.27%)</title><rect x="9.6688%" y="309" width="0.2676%" height="15" fill="rgb(232,36,49)" fg:x="578" fg:w="16"/><text x="9.7860%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="9.9197%" y="293" width="0.0167%" height="15" fill="rgb(209,103,24)" fg:x="593" fg:w="1"/><text x="10.0369%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.20%)</title><rect x="10.0703%" y="293" width="0.2007%" height="15" fill="rgb(229,88,8)" fg:x="602" fg:w="12"/><text x="10.1874%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (64 samples, 1.07%)</title><rect x="9.4513%" y="357" width="1.0706%" height="15" fill="rgb(213,181,19)" fg:x="565" fg:w="64"/><text x="9.5685%" y="367.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (64 samples, 1.07%)</title><rect x="9.4513%" y="341" width="1.0706%" height="15" fill="rgb(254,191,54)" fg:x="565" fg:w="64"/><text x="9.5685%" y="351.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (64 samples, 1.07%)</title><rect x="9.4513%" y="325" width="1.0706%" height="15" fill="rgb(241,83,37)" fg:x="565" fg:w="64"/><text x="9.5685%" y="335.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (35 samples, 0.59%)</title><rect x="9.9364%" y="309" width="0.5855%" height="15" fill="rgb(233,36,39)" fg:x="594" fg:w="35"/><text x="10.0536%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15 samples, 0.25%)</title><rect x="10.2710%" y="293" width="0.2509%" height="15" fill="rgb(226,3,54)" fg:x="614" fg:w="15"/><text x="10.3882%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.08%)</title><rect x="10.5219%" y="357" width="0.0836%" height="15" fill="rgb(245,192,40)" fg:x="629" fg:w="5"/><text x="10.6391%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.05%)</title><rect x="10.5554%" y="341" width="0.0502%" height="15" fill="rgb(238,167,29)" fg:x="631" fg:w="3"/><text x="10.6726%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.05%)</title><rect x="10.5554%" y="325" width="0.0502%" height="15" fill="rgb(232,182,51)" fg:x="631" fg:w="3"/><text x="10.6726%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.05%)</title><rect x="10.5554%" y="309" width="0.0502%" height="15" fill="rgb(231,60,39)" fg:x="631" fg:w="3"/><text x="10.6726%" y="319.50"></text></g><g><title>_ZN4core4hash5impls52_$LT$impl$u20$core..hash..Hash$u20$for$u20$usize$GT$4hash17h315cd8ddf287e98cE.llvm.1035163806602154227 (6 samples, 0.10%)</title><rect x="10.6390%" y="325" width="0.1004%" height="15" fill="rgb(208,69,12)" fg:x="636" fg:w="6"/><text x="10.7562%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.23%)</title><rect x="11.5089%" y="229" width="0.2342%" height="15" fill="rgb(235,93,37)" fg:x="688" fg:w="14"/><text x="11.6261%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (40 samples, 0.67%)</title><rect x="11.1910%" y="245" width="0.6691%" height="15" fill="rgb(213,116,39)" fg:x="669" fg:w="40"/><text x="11.3082%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.12%)</title><rect x="11.7431%" y="229" width="0.1171%" height="15" fill="rgb(222,207,29)" fg:x="702" fg:w="7"/><text x="11.8602%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (91 samples, 1.52%)</title><rect x="10.7394%" y="261" width="1.5222%" height="15" fill="rgb(206,96,30)" fg:x="642" fg:w="91"/><text x="10.8566%" y="271.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (24 samples, 0.40%)</title><rect x="11.8602%" y="245" width="0.4015%" height="15" fill="rgb(218,138,4)" fg:x="709" fg:w="24"/><text x="11.9773%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (100 samples, 1.67%)</title><rect x="10.7394%" y="293" width="1.6728%" height="15" fill="rgb(250,191,14)" fg:x="642" fg:w="100"/><text x="10.8566%" y="303.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (100 samples, 1.67%)</title><rect x="10.7394%" y="277" width="1.6728%" height="15" fill="rgb(239,60,40)" fg:x="642" fg:w="100"/><text x="10.8566%" y="287.50">&lt;cor..</text></g><g><title>_ZN4core4hash5impls52_$LT$impl$u20$core..hash..Hash$u20$for$u20$usize$GT$4hash17h315cd8ddf287e98cE.llvm.1035163806602154227 (9 samples, 0.15%)</title><rect x="12.2616%" y="261" width="0.1506%" height="15" fill="rgb(206,27,48)" fg:x="733" fg:w="9"/><text x="12.3788%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (185 samples, 3.09%)</title><rect x="9.4346%" y="389" width="3.0947%" height="15" fill="rgb(225,35,8)" fg:x="564" fg:w="185"/><text x="9.5518%" y="399.50">hashbrown..</text></g><g><title>core::hash::BuildHasher::hash_one (184 samples, 3.08%)</title><rect x="9.4513%" y="373" width="3.0780%" height="15" fill="rgb(250,213,24)" fg:x="565" fg:w="184"/><text x="9.5685%" y="383.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (115 samples, 1.92%)</title><rect x="10.6056%" y="357" width="1.9237%" height="15" fill="rgb(247,123,22)" fg:x="634" fg:w="115"/><text x="10.7227%" y="367.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (113 samples, 1.89%)</title><rect x="10.6390%" y="341" width="1.8903%" height="15" fill="rgb(231,138,38)" fg:x="636" fg:w="113"/><text x="10.7562%" y="351.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (107 samples, 1.79%)</title><rect x="10.7394%" y="325" width="1.7899%" height="15" fill="rgb(231,145,46)" fg:x="642" fg:w="107"/><text x="10.8566%" y="335.50">core..</text></g><g><title>core::hash::Hasher::write_usize (107 samples, 1.79%)</title><rect x="10.7394%" y="309" width="1.7899%" height="15" fill="rgb(251,118,11)" fg:x="642" fg:w="107"/><text x="10.8566%" y="319.50">core..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (7 samples, 0.12%)</title><rect x="12.4122%" y="293" width="0.1171%" height="15" fill="rgb(217,147,25)" fg:x="742" fg:w="7"/><text x="12.5294%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.05%)</title><rect x="12.6798%" y="325" width="0.0502%" height="15" fill="rgb(247,81,37)" fg:x="758" fg:w="3"/><text x="12.7970%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (3 samples, 0.05%)</title><rect x="12.6798%" y="309" width="0.0502%" height="15" fill="rgb(209,12,38)" fg:x="758" fg:w="3"/><text x="12.7970%" y="319.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (3 samples, 0.05%)</title><rect x="12.6798%" y="293" width="0.0502%" height="15" fill="rgb(227,1,9)" fg:x="758" fg:w="3"/><text x="12.7970%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="12.6798%" y="341" width="0.0669%" height="15" fill="rgb(248,47,43)" fg:x="758" fg:w="4"/><text x="12.7970%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.02%)</title><rect x="12.7300%" y="325" width="0.0167%" height="15" fill="rgb(221,10,30)" fg:x="761" fg:w="1"/><text x="12.8472%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (9 samples, 0.15%)</title><rect x="12.7467%" y="325" width="0.1506%" height="15" fill="rgb(210,229,1)" fg:x="762" fg:w="9"/><text x="12.8639%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (9 samples, 0.15%)</title><rect x="12.7467%" y="309" width="0.1506%" height="15" fill="rgb(222,148,37)" fg:x="762" fg:w="9"/><text x="12.8639%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.15%)</title><rect x="12.7467%" y="293" width="0.1506%" height="15" fill="rgb(234,67,33)" fg:x="762" fg:w="9"/><text x="12.8639%" y="303.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (9 samples, 0.15%)</title><rect x="12.7467%" y="277" width="0.1506%" height="15" fill="rgb(247,98,35)" fg:x="762" fg:w="9"/><text x="12.8639%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (9 samples, 0.15%)</title><rect x="12.7467%" y="261" width="0.1506%" height="15" fill="rgb(247,138,52)" fg:x="762" fg:w="9"/><text x="12.8639%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (11 samples, 0.18%)</title><rect x="12.7467%" y="341" width="0.1840%" height="15" fill="rgb(213,79,30)" fg:x="762" fg:w="11"/><text x="12.8639%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.03%)</title><rect x="12.8973%" y="325" width="0.0335%" height="15" fill="rgb(246,177,23)" fg:x="771" fg:w="2"/><text x="13.0145%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.03%)</title><rect x="12.8973%" y="309" width="0.0335%" height="15" fill="rgb(230,62,27)" fg:x="771" fg:w="2"/><text x="13.0145%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.03%)</title><rect x="12.8973%" y="293" width="0.0335%" height="15" fill="rgb(216,154,8)" fg:x="771" fg:w="2"/><text x="13.0145%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.03%)</title><rect x="12.8973%" y="277" width="0.0335%" height="15" fill="rgb(244,35,45)" fg:x="771" fg:w="2"/><text x="13.0145%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (20 samples, 0.33%)</title><rect x="12.9307%" y="341" width="0.3346%" height="15" fill="rgb(251,115,12)" fg:x="773" fg:w="20"/><text x="13.0479%" y="351.50"></text></g><g><title>&lt;fringe_vs_astar::graph::AdjacencyMapGraph as fringe_vs_astar::graph::Graph&gt;::neighbors (249 samples, 4.17%)</title><rect x="9.1502%" y="453" width="4.1653%" height="15" fill="rgb(240,54,50)" fg:x="547" fg:w="249"/><text x="9.2674%" y="463.50">&lt;fringe_vs_as..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (249 samples, 4.17%)</title><rect x="9.1502%" y="437" width="4.1653%" height="15" fill="rgb(233,84,52)" fg:x="547" fg:w="249"/><text x="9.2674%" y="447.50">std::collecti..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (249 samples, 4.17%)</title><rect x="9.1502%" y="421" width="4.1653%" height="15" fill="rgb(207,117,47)" fg:x="547" fg:w="249"/><text x="9.2674%" y="431.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (242 samples, 4.05%)</title><rect x="9.2673%" y="405" width="4.0482%" height="15" fill="rgb(249,43,39)" fg:x="554" fg:w="242"/><text x="9.3845%" y="415.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (47 samples, 0.79%)</title><rect x="12.5293%" y="389" width="0.7862%" height="15" fill="rgb(209,38,44)" fg:x="749" fg:w="47"/><text x="12.6465%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (44 samples, 0.74%)</title><rect x="12.5795%" y="373" width="0.7360%" height="15" fill="rgb(236,212,23)" fg:x="752" fg:w="44"/><text x="12.6966%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (44 samples, 0.74%)</title><rect x="12.5795%" y="357" width="0.7360%" height="15" fill="rgb(242,79,21)" fg:x="752" fg:w="44"/><text x="12.6966%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.05%)</title><rect x="13.2653%" y="341" width="0.0502%" height="15" fill="rgb(211,96,35)" fg:x="793" fg:w="3"/><text x="13.3825%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.05%)</title><rect x="13.2653%" y="325" width="0.0502%" height="15" fill="rgb(253,215,40)" fg:x="793" fg:w="3"/><text x="13.3825%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (17 samples, 0.28%)</title><rect x="13.3155%" y="437" width="0.2844%" height="15" fill="rgb(211,81,21)" fg:x="796" fg:w="17"/><text x="13.4327%" y="447.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (7 samples, 0.12%)</title><rect x="16.0254%" y="373" width="0.1171%" height="15" fill="rgb(208,190,38)" fg:x="958" fg:w="7"/><text x="16.1426%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (7 samples, 0.12%)</title><rect x="16.0254%" y="357" width="0.1171%" height="15" fill="rgb(235,213,38)" fg:x="958" fg:w="7"/><text x="16.1426%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (7 samples, 0.12%)</title><rect x="16.0254%" y="341" width="0.1171%" height="15" fill="rgb(237,122,38)" fg:x="958" fg:w="7"/><text x="16.1426%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (7 samples, 0.12%)</title><rect x="16.0254%" y="325" width="0.1171%" height="15" fill="rgb(244,218,35)" fg:x="958" fg:w="7"/><text x="16.1426%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (5 samples, 0.08%)</title><rect x="16.1425%" y="373" width="0.0836%" height="15" fill="rgb(240,68,47)" fg:x="965" fg:w="5"/><text x="16.2597%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.08%)</title><rect x="16.1425%" y="357" width="0.0836%" height="15" fill="rgb(210,16,53)" fg:x="965" fg:w="5"/><text x="16.2597%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (4 samples, 0.07%)</title><rect x="16.2262%" y="373" width="0.0669%" height="15" fill="rgb(235,124,12)" fg:x="970" fg:w="4"/><text x="16.3434%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (6 samples, 0.10%)</title><rect x="16.2931%" y="373" width="0.1004%" height="15" fill="rgb(224,169,11)" fg:x="974" fg:w="6"/><text x="16.4103%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::le (4 samples, 0.07%)</title><rect x="16.3265%" y="357" width="0.0669%" height="15" fill="rgb(250,166,2)" fg:x="976" fg:w="4"/><text x="16.4437%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.17%)</title><rect x="16.3934%" y="341" width="0.1673%" height="15" fill="rgb(242,216,29)" fg:x="980" fg:w="10"/><text x="16.5106%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (48 samples, 0.80%)</title><rect x="15.7745%" y="389" width="0.8029%" height="15" fill="rgb(230,116,27)" fg:x="943" fg:w="48"/><text x="15.8917%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (11 samples, 0.18%)</title><rect x="16.3934%" y="373" width="0.1840%" height="15" fill="rgb(228,99,48)" fg:x="980" fg:w="11"/><text x="16.5106%" y="383.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.18%)</title><rect x="16.3934%" y="357" width="0.1840%" height="15" fill="rgb(253,11,6)" fg:x="980" fg:w="11"/><text x="16.5106%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="16.5607%" y="341" width="0.0167%" height="15" fill="rgb(247,143,39)" fg:x="990" fg:w="1"/><text x="16.6779%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="16.5607%" y="325" width="0.0167%" height="15" fill="rgb(236,97,10)" fg:x="990" fg:w="1"/><text x="16.6779%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="16.5607%" y="309" width="0.0167%" height="15" fill="rgb(233,208,19)" fg:x="990" fg:w="1"/><text x="16.6779%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (537 samples, 8.98%)</title><rect x="16.5775%" y="373" width="8.9829%" height="15" fill="rgb(216,164,2)" fg:x="991" fg:w="537"/><text x="16.6946%" y="383.50">core::intrinsics::copy_nonover..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="25.5437%" y="357" width="0.0167%" height="15" fill="rgb(220,129,5)" fg:x="1527" fg:w="1"/><text x="25.6608%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="25.5437%" y="341" width="0.0167%" height="15" fill="rgb(242,17,10)" fg:x="1527" fg:w="1"/><text x="25.6608%" y="351.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="25.5437%" y="325" width="0.0167%" height="15" fill="rgb(242,107,0)" fg:x="1527" fg:w="1"/><text x="25.6608%" y="335.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.02%)</title><rect x="25.5437%" y="309" width="0.0167%" height="15" fill="rgb(251,28,31)" fg:x="1527" fg:w="1"/><text x="25.6608%" y="319.50"></text></g><g><title>tick_program_event (1 samples, 0.02%)</title><rect x="25.5437%" y="293" width="0.0167%" height="15" fill="rgb(233,223,10)" fg:x="1527" fg:w="1"/><text x="25.6608%" y="303.50"></text></g><g><title>lapic_next_deadline (1 samples, 0.02%)</title><rect x="25.5437%" y="277" width="0.0167%" height="15" fill="rgb(215,21,27)" fg:x="1527" fg:w="1"/><text x="25.6608%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (37 samples, 0.62%)</title><rect x="25.5604%" y="373" width="0.6189%" height="15" fill="rgb(232,23,21)" fg:x="1528" fg:w="37"/><text x="25.6776%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (575 samples, 9.62%)</title><rect x="16.5775%" y="389" width="9.6186%" height="15" fill="rgb(244,5,23)" fg:x="991" fg:w="575"/><text x="16.6946%" y="399.50">alloc::collections::binary_heap:..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (1 samples, 0.02%)</title><rect x="26.1793%" y="373" width="0.0167%" height="15" fill="rgb(226,81,46)" fg:x="1565" fg:w="1"/><text x="26.2965%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (4 samples, 0.07%)</title><rect x="26.1961%" y="389" width="0.0669%" height="15" fill="rgb(247,70,30)" fg:x="1566" fg:w="4"/><text x="26.3132%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="28.4041%" y="373" width="0.0167%" height="15" fill="rgb(212,68,19)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="28.4041%" y="357" width="0.0167%" height="15" fill="rgb(240,187,13)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="367.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="28.4041%" y="341" width="0.0167%" height="15" fill="rgb(223,113,26)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="351.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.02%)</title><rect x="28.4041%" y="325" width="0.0167%" height="15" fill="rgb(206,192,2)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="335.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.02%)</title><rect x="28.4041%" y="309" width="0.0167%" height="15" fill="rgb(241,108,4)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="319.50"></text></g><g><title>tick_sched_timer (1 samples, 0.02%)</title><rect x="28.4041%" y="293" width="0.0167%" height="15" fill="rgb(247,173,49)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="303.50"></text></g><g><title>tick_sched_handle (1 samples, 0.02%)</title><rect x="28.4041%" y="277" width="0.0167%" height="15" fill="rgb(224,114,35)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="287.50"></text></g><g><title>update_process_times (1 samples, 0.02%)</title><rect x="28.4041%" y="261" width="0.0167%" height="15" fill="rgb(245,159,27)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="271.50"></text></g><g><title>scheduler_tick (1 samples, 0.02%)</title><rect x="28.4041%" y="245" width="0.0167%" height="15" fill="rgb(245,172,44)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="255.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.02%)</title><rect x="28.4041%" y="229" width="0.0167%" height="15" fill="rgb(236,23,11)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="239.50"></text></g><g><title>x86_pmu_disable (1 samples, 0.02%)</title><rect x="28.4041%" y="213" width="0.0167%" height="15" fill="rgb(205,117,38)" fg:x="1698" fg:w="1"/><text x="28.5213%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (320 samples, 5.35%)</title><rect x="26.2630%" y="389" width="5.3530%" height="15" fill="rgb(237,72,25)" fg:x="1570" fg:w="320"/><text x="26.3802%" y="399.50">core::cmp::impls:..</text></g><g><title>core::cmp::PartialOrd::le (191 samples, 3.20%)</title><rect x="28.4209%" y="373" width="3.1950%" height="15" fill="rgb(244,70,9)" fg:x="1699" fg:w="191"/><text x="28.5381%" y="383.50">core::cmp..</text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.59%)</title><rect x="31.6159%" y="341" width="0.5855%" height="15" fill="rgb(217,125,39)" fg:x="1890" fg:w="35"/><text x="31.7331%" y="351.50"></text></g><g><title>core::mem::drop (36 samples, 0.60%)</title><rect x="31.6159%" y="389" width="0.6022%" height="15" fill="rgb(235,36,10)" fg:x="1890" fg:w="36"/><text x="31.7331%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (36 samples, 0.60%)</title><rect x="31.6159%" y="373" width="0.6022%" height="15" fill="rgb(251,123,47)" fg:x="1890" fg:w="36"/><text x="31.7331%" y="383.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.60%)</title><rect x="31.6159%" y="357" width="0.6022%" height="15" fill="rgb(221,13,13)" fg:x="1890" fg:w="36"/><text x="31.7331%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="32.2014%" y="341" width="0.0167%" height="15" fill="rgb(238,131,9)" fg:x="1925" fg:w="1"/><text x="32.3186%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="32.2014%" y="325" width="0.0167%" height="15" fill="rgb(211,50,8)" fg:x="1925" fg:w="1"/><text x="32.3186%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="32.2014%" y="309" width="0.0167%" height="15" fill="rgb(245,182,24)" fg:x="1925" fg:w="1"/><text x="32.3186%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (1,131 samples, 18.92%)</title><rect x="13.5999%" y="405" width="18.9194%" height="15" fill="rgb(242,14,37)" fg:x="813" fg:w="1131"/><text x="13.7171%" y="415.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bot..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (18 samples, 0.30%)</title><rect x="32.2181%" y="389" width="0.3011%" height="15" fill="rgb(246,228,12)" fg:x="1926" fg:w="18"/><text x="32.3353%" y="399.50"></text></g><g><title>core::ptr::read (2 samples, 0.03%)</title><rect x="32.5192%" y="341" width="0.0335%" height="15" fill="rgb(213,55,15)" fg:x="1944" fg:w="2"/><text x="32.6364%" y="351.50"></text></g><g><title>core::mem::swap (6 samples, 0.10%)</title><rect x="32.5192%" y="405" width="0.1004%" height="15" fill="rgb(209,9,3)" fg:x="1944" fg:w="6"/><text x="32.6364%" y="415.50"></text></g><g><title>core::ptr::swap_nonoverlapping (6 samples, 0.10%)</title><rect x="32.5192%" y="389" width="0.1004%" height="15" fill="rgb(230,59,30)" fg:x="1944" fg:w="6"/><text x="32.6364%" y="399.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (6 samples, 0.10%)</title><rect x="32.5192%" y="373" width="0.1004%" height="15" fill="rgb(209,121,21)" fg:x="1944" fg:w="6"/><text x="32.6364%" y="383.50"></text></g><g><title>core::mem::swap_simple (6 samples, 0.10%)</title><rect x="32.5192%" y="357" width="0.1004%" height="15" fill="rgb(220,109,13)" fg:x="1944" fg:w="6"/><text x="32.6364%" y="367.50"></text></g><g><title>core::ptr::write (4 samples, 0.07%)</title><rect x="32.5527%" y="341" width="0.0669%" height="15" fill="rgb(232,18,1)" fg:x="1946" fg:w="4"/><text x="32.6699%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (1,205 samples, 20.16%)</title><rect x="13.3155%" y="453" width="20.1572%" height="15" fill="rgb(215,41,42)" fg:x="796" fg:w="1205"/><text x="13.4327%" y="463.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop</text></g><g><title>core::option::Option&lt;T&gt;::map (1,188 samples, 19.87%)</title><rect x="13.5999%" y="437" width="19.8729%" height="15" fill="rgb(224,123,36)" fg:x="813" fg:w="1188"/><text x="13.7171%" y="447.50">core::option::Option&lt;T&gt;::map</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (1,188 samples, 19.87%)</title><rect x="13.5999%" y="421" width="19.8729%" height="15" fill="rgb(240,125,3)" fg:x="813" fg:w="1188"/><text x="13.7171%" y="431.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}}</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (51 samples, 0.85%)</title><rect x="32.6196%" y="405" width="0.8531%" height="15" fill="rgb(205,98,50)" fg:x="1950" fg:w="51"/><text x="32.7368%" y="415.50">f..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::len (6 samples, 0.10%)</title><rect x="33.4727%" y="437" width="0.1004%" height="15" fill="rgb(205,185,37)" fg:x="2001" fg:w="6"/><text x="33.5899%" y="447.50"></text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (6 samples, 0.10%)</title><rect x="33.4727%" y="421" width="0.1004%" height="15" fill="rgb(238,207,15)" fg:x="2001" fg:w="6"/><text x="33.5899%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (31 samples, 0.52%)</title><rect x="34.2422%" y="421" width="0.5186%" height="15" fill="rgb(213,199,42)" fg:x="2047" fg:w="31"/><text x="34.3594%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (31 samples, 0.52%)</title><rect x="34.2422%" y="405" width="0.5186%" height="15" fill="rgb(235,201,11)" fg:x="2047" fg:w="31"/><text x="34.3594%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (31 samples, 0.52%)</title><rect x="34.2422%" y="389" width="0.5186%" height="15" fill="rgb(207,46,11)" fg:x="2047" fg:w="31"/><text x="34.3594%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (31 samples, 0.52%)</title><rect x="34.2422%" y="373" width="0.5186%" height="15" fill="rgb(241,35,35)" fg:x="2047" fg:w="31"/><text x="34.3594%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (39 samples, 0.65%)</title><rect x="34.7608%" y="421" width="0.6524%" height="15" fill="rgb(243,32,47)" fg:x="2078" fg:w="39"/><text x="34.8780%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.65%)</title><rect x="34.7608%" y="405" width="0.6524%" height="15" fill="rgb(247,202,23)" fg:x="2078" fg:w="39"/><text x="34.8780%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (130 samples, 2.17%)</title><rect x="35.4132%" y="421" width="2.1746%" height="15" fill="rgb(219,102,11)" fg:x="2117" fg:w="130"/><text x="35.5304%" y="431.50">alloc..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3 samples, 0.05%)</title><rect x="37.5376%" y="405" width="0.0502%" height="15" fill="rgb(243,110,44)" fg:x="2244" fg:w="3"/><text x="37.6548%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.05%)</title><rect x="37.5376%" y="389" width="0.0502%" height="15" fill="rgb(222,74,54)" fg:x="2244" fg:w="3"/><text x="37.6548%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.05%)</title><rect x="37.5376%" y="373" width="0.0502%" height="15" fill="rgb(216,99,12)" fg:x="2244" fg:w="3"/><text x="37.6548%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (17 samples, 0.28%)</title><rect x="37.5878%" y="421" width="0.2844%" height="15" fill="rgb(226,22,26)" fg:x="2247" fg:w="17"/><text x="37.7050%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::le (5 samples, 0.08%)</title><rect x="37.7886%" y="405" width="0.0836%" height="15" fill="rgb(217,163,10)" fg:x="2259" fg:w="5"/><text x="37.9057%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (275 samples, 4.60%)</title><rect x="33.5731%" y="437" width="4.6002%" height="15" fill="rgb(213,25,53)" fg:x="2007" fg:w="275"/><text x="33.6903%" y="447.50">alloc::collect..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (18 samples, 0.30%)</title><rect x="37.8722%" y="421" width="0.3011%" height="15" fill="rgb(252,105,26)" fg:x="2264" fg:w="18"/><text x="37.9894%" y="431.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.30%)</title><rect x="37.8722%" y="405" width="0.3011%" height="15" fill="rgb(220,39,43)" fg:x="2264" fg:w="18"/><text x="37.9894%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.30%)</title><rect x="37.8722%" y="389" width="0.3011%" height="15" fill="rgb(229,68,48)" fg:x="2264" fg:w="18"/><text x="37.9894%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.03%)</title><rect x="38.3071%" y="421" width="0.0335%" height="15" fill="rgb(252,8,32)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.03%)</title><rect x="38.3071%" y="405" width="0.0335%" height="15" fill="rgb(223,20,43)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="38.3071%" y="389" width="0.0335%" height="15" fill="rgb(229,81,49)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.03%)</title><rect x="38.3071%" y="373" width="0.0335%" height="15" fill="rgb(236,28,36)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.03%)</title><rect x="38.3071%" y="357" width="0.0335%" height="15" fill="rgb(249,185,26)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="367.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.03%)</title><rect x="38.3071%" y="341" width="0.0335%" height="15" fill="rgb(249,174,33)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="351.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.03%)</title><rect x="38.3071%" y="325" width="0.0335%" height="15" fill="rgb(233,201,37)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="335.50"></text></g><g><title>mremap_chunk (2 samples, 0.03%)</title><rect x="38.3071%" y="309" width="0.0335%" height="15" fill="rgb(221,78,26)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="319.50"></text></g><g><title>__GI___mremap (2 samples, 0.03%)</title><rect x="38.3071%" y="293" width="0.0335%" height="15" fill="rgb(250,127,30)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="38.3071%" y="277" width="0.0335%" height="15" fill="rgb(230,49,44)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="287.50"></text></g><g><title>do_syscall_64 (2 samples, 0.03%)</title><rect x="38.3071%" y="261" width="0.0335%" height="15" fill="rgb(229,67,23)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="271.50"></text></g><g><title>x64_sys_call (2 samples, 0.03%)</title><rect x="38.3071%" y="245" width="0.0335%" height="15" fill="rgb(249,83,47)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="255.50"></text></g><g><title>__x64_sys_mremap (2 samples, 0.03%)</title><rect x="38.3071%" y="229" width="0.0335%" height="15" fill="rgb(215,43,3)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="239.50"></text></g><g><title>__do_sys_mremap (2 samples, 0.03%)</title><rect x="38.3071%" y="213" width="0.0335%" height="15" fill="rgb(238,154,13)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="223.50"></text></g><g><title>move_vma (2 samples, 0.03%)</title><rect x="38.3071%" y="197" width="0.0335%" height="15" fill="rgb(219,56,2)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="207.50"></text></g><g><title>move_page_tables (2 samples, 0.03%)</title><rect x="38.3071%" y="181" width="0.0335%" height="15" fill="rgb(233,0,4)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="191.50"></text></g><g><title>move_ptes.constprop.0 (2 samples, 0.03%)</title><rect x="38.3071%" y="165" width="0.0335%" height="15" fill="rgb(235,30,7)" fg:x="2290" fg:w="2"/><text x="38.4243%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.05%)</title><rect x="38.3406%" y="421" width="0.0502%" height="15" fill="rgb(250,79,13)" fg:x="2292" fg:w="3"/><text x="38.4578%" y="431.50"></text></g><g><title>down_read_trylock (1 samples, 0.02%)</title><rect x="38.5748%" y="357" width="0.0167%" height="15" fill="rgb(211,146,34)" fg:x="2306" fg:w="1"/><text x="38.6920%" y="367.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.02%)</title><rect x="38.6417%" y="309" width="0.0167%" height="15" fill="rgb(228,22,38)" fg:x="2310" fg:w="1"/><text x="38.7589%" y="319.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.02%)</title><rect x="38.6751%" y="277" width="0.0167%" height="15" fill="rgb(235,168,5)" fg:x="2312" fg:w="1"/><text x="38.7923%" y="287.50"></text></g><g><title>__folio_throttle_swaprate (2 samples, 0.03%)</title><rect x="38.6751%" y="293" width="0.0335%" height="15" fill="rgb(221,155,16)" fg:x="2312" fg:w="2"/><text x="38.7923%" y="303.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.02%)</title><rect x="38.6919%" y="277" width="0.0167%" height="15" fill="rgb(215,215,53)" fg:x="2313" fg:w="1"/><text x="38.8091%" y="287.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.02%)</title><rect x="38.7253%" y="277" width="0.0167%" height="15" fill="rgb(223,4,10)" fg:x="2315" fg:w="1"/><text x="38.8425%" y="287.50"></text></g><g><title>__count_memcg_events (2 samples, 0.03%)</title><rect x="38.7755%" y="261" width="0.0335%" height="15" fill="rgb(234,103,6)" fg:x="2318" fg:w="2"/><text x="38.8927%" y="271.50"></text></g><g><title>charge_memcg (7 samples, 0.12%)</title><rect x="38.7421%" y="277" width="0.1171%" height="15" fill="rgb(227,97,0)" fg:x="2316" fg:w="7"/><text x="38.8592%" y="287.50"></text></g><g><title>try_charge_memcg (3 samples, 0.05%)</title><rect x="38.8090%" y="261" width="0.0502%" height="15" fill="rgb(234,150,53)" fg:x="2320" fg:w="3"/><text x="38.9262%" y="271.50"></text></g><g><title>consume_stock (2 samples, 0.03%)</title><rect x="38.8257%" y="245" width="0.0335%" height="15" fill="rgb(228,201,54)" fg:x="2321" fg:w="2"/><text x="38.9429%" y="255.50"></text></g><g><title>__mem_cgroup_charge (17 samples, 0.28%)</title><rect x="38.7086%" y="293" width="0.2844%" height="15" fill="rgb(222,22,37)" fg:x="2314" fg:w="17"/><text x="38.8258%" y="303.50"></text></g><g><title>get_mem_cgroup_from_mm (8 samples, 0.13%)</title><rect x="38.8592%" y="277" width="0.1338%" height="15" fill="rgb(237,53,32)" fg:x="2323" fg:w="8"/><text x="38.9763%" y="287.50"></text></g><g><title>folio_batch_move_lru (4 samples, 0.07%)</title><rect x="39.0097%" y="261" width="0.0669%" height="15" fill="rgb(233,25,53)" fg:x="2332" fg:w="4"/><text x="39.1269%" y="271.50"></text></g><g><title>lru_add_fn (2 samples, 0.03%)</title><rect x="39.0432%" y="245" width="0.0335%" height="15" fill="rgb(210,40,34)" fg:x="2334" fg:w="2"/><text x="39.1603%" y="255.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.03%)</title><rect x="39.0432%" y="229" width="0.0335%" height="15" fill="rgb(241,220,44)" fg:x="2334" fg:w="2"/><text x="39.1603%" y="239.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.03%)</title><rect x="39.0432%" y="213" width="0.0335%" height="15" fill="rgb(235,28,35)" fg:x="2334" fg:w="2"/><text x="39.1603%" y="223.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.02%)</title><rect x="39.0599%" y="197" width="0.0167%" height="15" fill="rgb(210,56,17)" fg:x="2335" fg:w="1"/><text x="39.1771%" y="207.50"></text></g><g><title>folio_add_lru_vma (6 samples, 0.10%)</title><rect x="38.9930%" y="293" width="0.1004%" height="15" fill="rgb(224,130,29)" fg:x="2331" fg:w="6"/><text x="39.1102%" y="303.50"></text></g><g><title>folio_add_lru (6 samples, 0.10%)</title><rect x="38.9930%" y="277" width="0.1004%" height="15" fill="rgb(235,212,8)" fg:x="2331" fg:w="6"/><text x="39.1102%" y="287.50"></text></g><g><title>folio_lruvec_lock_irqsave (1 samples, 0.02%)</title><rect x="39.0766%" y="261" width="0.0167%" height="15" fill="rgb(223,33,50)" fg:x="2336" fg:w="1"/><text x="39.1938%" y="271.50"></text></g><g><title>folio_add_new_anon_rmap (3 samples, 0.05%)</title><rect x="39.0933%" y="293" width="0.0502%" height="15" fill="rgb(219,149,13)" fg:x="2337" fg:w="3"/><text x="39.2105%" y="303.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.03%)</title><rect x="39.1101%" y="277" width="0.0335%" height="15" fill="rgb(250,156,29)" fg:x="2338" fg:w="2"/><text x="39.2273%" y="287.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.02%)</title><rect x="39.1268%" y="261" width="0.0167%" height="15" fill="rgb(216,193,19)" fg:x="2339" fg:w="1"/><text x="39.2440%" y="271.50"></text></g><g><title>inc_mm_counter (2 samples, 0.03%)</title><rect x="39.1435%" y="293" width="0.0335%" height="15" fill="rgb(216,135,14)" fg:x="2340" fg:w="2"/><text x="39.2607%" y="303.50"></text></g><g><title>percpu_counter_add_batch (2 samples, 0.03%)</title><rect x="39.1435%" y="277" width="0.0335%" height="15" fill="rgb(241,47,5)" fg:x="2340" fg:w="2"/><text x="39.2607%" y="287.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.03%)</title><rect x="39.1770%" y="245" width="0.0335%" height="15" fill="rgb(233,42,35)" fg:x="2342" fg:w="2"/><text x="39.2942%" y="255.50"></text></g><g><title>_raw_spin_trylock (1 samples, 0.02%)</title><rect x="39.2272%" y="229" width="0.0167%" height="15" fill="rgb(231,13,6)" fg:x="2345" fg:w="1"/><text x="39.3444%" y="239.50"></text></g><g><title>clear_page_erms (4 samples, 0.07%)</title><rect x="39.2439%" y="229" width="0.0669%" height="15" fill="rgb(207,181,40)" fg:x="2346" fg:w="4"/><text x="39.3611%" y="239.50"></text></g><g><title>__alloc_pages (9 samples, 0.15%)</title><rect x="39.1770%" y="261" width="0.1506%" height="15" fill="rgb(254,173,49)" fg:x="2342" fg:w="9"/><text x="39.2942%" y="271.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.12%)</title><rect x="39.2104%" y="245" width="0.1171%" height="15" fill="rgb(221,1,38)" fg:x="2344" fg:w="7"/><text x="39.3276%" y="255.50"></text></g><g><title>rmqueue (1 samples, 0.02%)</title><rect x="39.3108%" y="229" width="0.0167%" height="15" fill="rgb(206,124,46)" fg:x="2350" fg:w="1"/><text x="39.4280%" y="239.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.02%)</title><rect x="39.3108%" y="213" width="0.0167%" height="15" fill="rgb(249,21,11)" fg:x="2350" fg:w="1"/><text x="39.4280%" y="223.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.02%)</title><rect x="39.3108%" y="197" width="0.0167%" height="15" fill="rgb(222,201,40)" fg:x="2350" fg:w="1"/><text x="39.4280%" y="207.50"></text></g><g><title>do_anonymous_page (41 samples, 0.69%)</title><rect x="38.6584%" y="309" width="0.6858%" height="15" fill="rgb(235,61,29)" fg:x="2311" fg:w="41"/><text x="38.7756%" y="319.50"></text></g><g><title>vma_alloc_folio (10 samples, 0.17%)</title><rect x="39.1770%" y="293" width="0.1673%" height="15" fill="rgb(219,207,3)" fg:x="2342" fg:w="10"/><text x="39.2942%" y="303.50"></text></g><g><title>__folio_alloc (10 samples, 0.17%)</title><rect x="39.1770%" y="277" width="0.1673%" height="15" fill="rgb(222,56,46)" fg:x="2342" fg:w="10"/><text x="39.2942%" y="287.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.02%)</title><rect x="39.3275%" y="261" width="0.0167%" height="15" fill="rgb(239,76,54)" fg:x="2351" fg:w="1"/><text x="39.4447%" y="271.50"></text></g><g><title>__handle_mm_fault (43 samples, 0.72%)</title><rect x="38.6417%" y="341" width="0.7193%" height="15" fill="rgb(231,124,27)" fg:x="2310" fg:w="43"/><text x="38.7589%" y="351.50"></text></g><g><title>handle_pte_fault (43 samples, 0.72%)</title><rect x="38.6417%" y="325" width="0.7193%" height="15" fill="rgb(249,195,6)" fg:x="2310" fg:w="43"/><text x="38.7589%" y="335.50"></text></g><g><title>inc_mm_counter (1 samples, 0.02%)</title><rect x="39.3443%" y="309" width="0.0167%" height="15" fill="rgb(237,174,47)" fg:x="2352" fg:w="1"/><text x="39.4614%" y="319.50"></text></g><g><title>handle_mm_fault (47 samples, 0.79%)</title><rect x="38.5915%" y="357" width="0.7862%" height="15" fill="rgb(206,201,31)" fg:x="2307" fg:w="47"/><text x="38.7087%" y="367.50"></text></g><g><title>count_memcg_events.constprop.0 (1 samples, 0.02%)</title><rect x="39.3610%" y="341" width="0.0167%" height="15" fill="rgb(231,57,52)" fg:x="2353" fg:w="1"/><text x="39.4782%" y="351.50"></text></g><g><title>__count_memcg_events (1 samples, 0.02%)</title><rect x="39.3610%" y="325" width="0.0167%" height="15" fill="rgb(248,177,22)" fg:x="2353" fg:w="1"/><text x="39.4782%" y="335.50"></text></g><g><title>asm_exc_page_fault (51 samples, 0.85%)</title><rect x="38.5580%" y="405" width="0.8531%" height="15" fill="rgb(215,211,37)" fg:x="2305" fg:w="51"/><text x="38.6752%" y="415.50">a..</text></g><g><title>exc_page_fault (51 samples, 0.85%)</title><rect x="38.5580%" y="389" width="0.8531%" height="15" fill="rgb(241,128,51)" fg:x="2305" fg:w="51"/><text x="38.6752%" y="399.50">e..</text></g><g><title>do_user_addr_fault (51 samples, 0.85%)</title><rect x="38.5580%" y="373" width="0.8531%" height="15" fill="rgb(227,165,31)" fg:x="2305" fg:w="51"/><text x="38.6752%" y="383.50">d..</text></g><g><title>lock_vma_under_rcu (2 samples, 0.03%)</title><rect x="39.3777%" y="357" width="0.0335%" height="15" fill="rgb(228,167,24)" fg:x="2354" fg:w="2"/><text x="39.4949%" y="367.50"></text></g><g><title>error_entry (1 samples, 0.02%)</title><rect x="39.4112%" y="405" width="0.0167%" height="15" fill="rgb(228,143,12)" fg:x="2356" fg:w="1"/><text x="39.5284%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (84 samples, 1.41%)</title><rect x="38.1733%" y="437" width="1.4052%" height="15" fill="rgb(249,149,8)" fg:x="2282" fg:w="84"/><text x="38.2905%" y="447.50">all..</text></g><g><title>core::ptr::write (71 samples, 1.19%)</title><rect x="38.3908%" y="421" width="1.1877%" height="15" fill="rgb(243,35,44)" fg:x="2295" fg:w="71"/><text x="38.5080%" y="431.50">co..</text></g><g><title>sync_regs (9 samples, 0.15%)</title><rect x="39.4279%" y="405" width="0.1506%" height="15" fill="rgb(246,89,9)" fg:x="2357" fg:w="9"/><text x="39.5451%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (392 samples, 6.56%)</title><rect x="33.4727%" y="453" width="6.5574%" height="15" fill="rgb(233,213,13)" fg:x="2001" fg:w="392"/><text x="33.5899%" y="463.50">alloc::collections::b..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (27 samples, 0.45%)</title><rect x="39.5785%" y="437" width="0.4517%" height="15" fill="rgb(233,141,41)" fg:x="2366" fg:w="27"/><text x="39.6956%" y="447.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.02%)</title><rect x="40.0301%" y="101" width="0.0167%" height="15" fill="rgb(239,167,4)" fg:x="2393" fg:w="1"/><text x="40.1473%" y="111.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.02%)</title><rect x="40.0301%" y="85" width="0.0167%" height="15" fill="rgb(209,217,16)" fg:x="2393" fg:w="1"/><text x="40.1473%" y="95.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.02%)</title><rect x="40.0301%" y="69" width="0.0167%" height="15" fill="rgb(219,88,35)" fg:x="2393" fg:w="1"/><text x="40.1473%" y="79.50"></text></g><g><title>page_remove_rmap (2 samples, 0.03%)</title><rect x="40.0301%" y="117" width="0.0335%" height="15" fill="rgb(220,193,23)" fg:x="2393" fg:w="2"/><text x="40.1473%" y="127.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.02%)</title><rect x="40.0468%" y="101" width="0.0167%" height="15" fill="rgb(230,90,52)" fg:x="2394" fg:w="1"/><text x="40.1640%" y="111.50"></text></g><g><title>free_unref_page_list (1 samples, 0.02%)</title><rect x="40.0970%" y="53" width="0.0167%" height="15" fill="rgb(252,106,19)" fg:x="2397" fg:w="1"/><text x="40.2142%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::BinaryHeap&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (7 samples, 0.12%)</title><rect x="40.0301%" y="453" width="0.1171%" height="15" fill="rgb(206,74,20)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (7 samples, 0.12%)</title><rect x="40.0301%" y="437" width="0.1171%" height="15" fill="rgb(230,138,44)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fringe_vs_astar::pathfinder::WeightedCell&gt;&gt; (7 samples, 0.12%)</title><rect x="40.0301%" y="421" width="0.1171%" height="15" fill="rgb(235,182,43)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.12%)</title><rect x="40.0301%" y="405" width="0.1171%" height="15" fill="rgb(242,16,51)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.12%)</title><rect x="40.0301%" y="389" width="0.1171%" height="15" fill="rgb(248,9,4)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.12%)</title><rect x="40.0301%" y="373" width="0.1171%" height="15" fill="rgb(210,31,22)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="383.50"></text></g><g><title>__GI___libc_free (7 samples, 0.12%)</title><rect x="40.0301%" y="357" width="0.1171%" height="15" fill="rgb(239,54,39)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="367.50"></text></g><g><title>__GI___munmap (7 samples, 0.12%)</title><rect x="40.0301%" y="341" width="0.1171%" height="15" fill="rgb(230,99,41)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.12%)</title><rect x="40.0301%" y="325" width="0.1171%" height="15" fill="rgb(253,106,12)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="335.50"></text></g><g><title>do_syscall_64 (7 samples, 0.12%)</title><rect x="40.0301%" y="309" width="0.1171%" height="15" fill="rgb(213,46,41)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="319.50"></text></g><g><title>x64_sys_call (7 samples, 0.12%)</title><rect x="40.0301%" y="293" width="0.1171%" height="15" fill="rgb(215,133,35)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="303.50"></text></g><g><title>__x64_sys_munmap (7 samples, 0.12%)</title><rect x="40.0301%" y="277" width="0.1171%" height="15" fill="rgb(213,28,5)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="287.50"></text></g><g><title>__vm_munmap (7 samples, 0.12%)</title><rect x="40.0301%" y="261" width="0.1171%" height="15" fill="rgb(215,77,49)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="271.50"></text></g><g><title>do_vmi_munmap (7 samples, 0.12%)</title><rect x="40.0301%" y="245" width="0.1171%" height="15" fill="rgb(248,100,22)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="255.50"></text></g><g><title>do_vmi_align_munmap (7 samples, 0.12%)</title><rect x="40.0301%" y="229" width="0.1171%" height="15" fill="rgb(208,67,9)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="239.50"></text></g><g><title>unmap_region (7 samples, 0.12%)</title><rect x="40.0301%" y="213" width="0.1171%" height="15" fill="rgb(219,133,21)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="223.50"></text></g><g><title>unmap_vmas (7 samples, 0.12%)</title><rect x="40.0301%" y="197" width="0.1171%" height="15" fill="rgb(246,46,29)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="207.50"></text></g><g><title>unmap_single_vma (7 samples, 0.12%)</title><rect x="40.0301%" y="181" width="0.1171%" height="15" fill="rgb(246,185,52)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="191.50"></text></g><g><title>unmap_page_range (7 samples, 0.12%)</title><rect x="40.0301%" y="165" width="0.1171%" height="15" fill="rgb(252,136,11)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="175.50"></text></g><g><title>zap_pmd_range.isra.0 (7 samples, 0.12%)</title><rect x="40.0301%" y="149" width="0.1171%" height="15" fill="rgb(219,138,53)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="159.50"></text></g><g><title>zap_pte_range (7 samples, 0.12%)</title><rect x="40.0301%" y="133" width="0.1171%" height="15" fill="rgb(211,51,23)" fg:x="2393" fg:w="7"/><text x="40.1473%" y="143.50"></text></g><g><title>tlb_flush_mmu (5 samples, 0.08%)</title><rect x="40.0636%" y="117" width="0.0836%" height="15" fill="rgb(247,221,28)" fg:x="2395" fg:w="5"/><text x="40.1808%" y="127.50"></text></g><g><title>tlb_batch_pages_flush (5 samples, 0.08%)</title><rect x="40.0636%" y="101" width="0.0836%" height="15" fill="rgb(251,222,45)" fg:x="2395" fg:w="5"/><text x="40.1808%" y="111.50"></text></g><g><title>free_pages_and_swap_cache (5 samples, 0.08%)</title><rect x="40.0636%" y="85" width="0.0836%" height="15" fill="rgb(217,162,53)" fg:x="2395" fg:w="5"/><text x="40.1808%" y="95.50"></text></g><g><title>release_pages (4 samples, 0.07%)</title><rect x="40.0803%" y="69" width="0.0669%" height="15" fill="rgb(229,93,14)" fg:x="2396" fg:w="4"/><text x="40.1975%" y="79.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (2 samples, 0.03%)</title><rect x="40.1138%" y="53" width="0.0335%" height="15" fill="rgb(209,67,49)" fg:x="2398" fg:w="2"/><text x="40.2309%" y="63.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.02%)</title><rect x="40.1305%" y="37" width="0.0167%" height="15" fill="rgb(213,87,29)" fg:x="2399" fg:w="1"/><text x="40.2477%" y="47.50"></text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple::_{{closure}} (54 samples, 0.90%)</title><rect x="40.1472%" y="453" width="0.9033%" height="15" fill="rgb(205,151,52)" fg:x="2400" fg:w="54"/><text x="40.2644%" y="463.50">f..</text></g><g><title>fringe_vs_astar::pathfinder::heuristic (53 samples, 0.89%)</title><rect x="40.1639%" y="437" width="0.8866%" height="15" fill="rgb(253,215,39)" fg:x="2401" fg:w="53"/><text x="40.2811%" y="447.50">f..</text></g><g><title>fringe_vs_astar::pathfinder::reconstruct_path (1 samples, 0.02%)</title><rect x="41.0505%" y="453" width="0.0167%" height="15" fill="rgb(221,220,41)" fg:x="2454" fg:w="1"/><text x="41.1677%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="41.0505%" y="437" width="0.0167%" height="15" fill="rgb(218,133,21)" fg:x="2454" fg:w="1"/><text x="41.1677%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="41.0505%" y="421" width="0.0167%" height="15" fill="rgb(221,193,43)" fg:x="2454" fg:w="1"/><text x="41.1677%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="41.0505%" y="405" width="0.0167%" height="15" fill="rgb(240,128,52)" fg:x="2454" fg:w="1"/><text x="41.1677%" y="415.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h030f5c5a0d744980E.llvm.9810247859802991312 (1 samples, 0.02%)</title><rect x="41.0505%" y="389" width="0.0167%" height="15" fill="rgb(253,114,12)" fg:x="2454" fg:w="1"/><text x="41.1677%" y="399.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.08%)</title><rect x="44.4128%" y="309" width="0.0836%" height="15" fill="rgb(215,223,47)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="319.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.08%)</title><rect x="44.4128%" y="293" width="0.0836%" height="15" fill="rgb(248,225,23)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="303.50"></text></g><g><title>irqentry_exit (5 samples, 0.08%)</title><rect x="44.4128%" y="277" width="0.0836%" height="15" fill="rgb(250,108,0)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="287.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.08%)</title><rect x="44.4128%" y="261" width="0.0836%" height="15" fill="rgb(228,208,7)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="271.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.08%)</title><rect x="44.4128%" y="245" width="0.0836%" height="15" fill="rgb(244,45,10)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="255.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.08%)</title><rect x="44.4128%" y="229" width="0.0836%" height="15" fill="rgb(207,125,25)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="239.50"></text></g><g><title>schedule (5 samples, 0.08%)</title><rect x="44.4128%" y="213" width="0.0836%" height="15" fill="rgb(210,195,18)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="223.50"></text></g><g><title>__schedule (5 samples, 0.08%)</title><rect x="44.4128%" y="197" width="0.0836%" height="15" fill="rgb(249,80,12)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="207.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.08%)</title><rect x="44.4128%" y="181" width="0.0836%" height="15" fill="rgb(221,65,9)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="191.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.08%)</title><rect x="44.4128%" y="165" width="0.0836%" height="15" fill="rgb(235,49,36)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="175.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.08%)</title><rect x="44.4128%" y="149" width="0.0836%" height="15" fill="rgb(225,32,20)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="159.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.08%)</title><rect x="44.4128%" y="133" width="0.0836%" height="15" fill="rgb(215,141,46)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="143.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.08%)</title><rect x="44.4128%" y="117" width="0.0836%" height="15" fill="rgb(250,160,47)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="127.50"></text></g><g><title>native_write_msr (5 samples, 0.08%)</title><rect x="44.4128%" y="101" width="0.0836%" height="15" fill="rgb(216,222,40)" fg:x="2655" fg:w="5"/><text x="44.5300%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (63 samples, 1.05%)</title><rect x="44.4965%" y="309" width="1.0539%" height="15" fill="rgb(234,217,39)" fg:x="2660" fg:w="63"/><text x="44.6137%" y="319.50">c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (158 samples, 2.64%)</title><rect x="43.5764%" y="325" width="2.6430%" height="15" fill="rgb(207,178,40)" fg:x="2605" fg:w="158"/><text x="43.6936%" y="335.50">&lt;core::..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (40 samples, 0.67%)</title><rect x="45.5504%" y="309" width="0.6691%" height="15" fill="rgb(221,136,13)" fg:x="2723" fg:w="40"/><text x="45.6675%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="48.4108%" y="309" width="0.0167%" height="15" fill="rgb(249,199,10)" fg:x="2894" fg:w="1"/><text x="48.5280%" y="319.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="48.4108%" y="293" width="0.0167%" height="15" fill="rgb(249,222,13)" fg:x="2894" fg:w="1"/><text x="48.5280%" y="303.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="48.4108%" y="277" width="0.0167%" height="15" fill="rgb(244,185,38)" fg:x="2894" fg:w="1"/><text x="48.5280%" y="287.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.02%)</title><rect x="48.4108%" y="261" width="0.0167%" height="15" fill="rgb(236,202,9)" fg:x="2894" fg:w="1"/><text x="48.5280%" y="271.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.02%)</title><rect x="48.4108%" y="245" width="0.0167%" height="15" fill="rgb(250,229,37)" fg:x="2894" fg:w="1"/><text x="48.5280%" y="255.50"></text></g><g><title>enqueue_hrtimer (1 samples, 0.02%)</title><rect x="48.4108%" y="229" width="0.0167%" height="15" fill="rgb(206,174,23)" fg:x="2894" fg:w="1"/><text x="48.5280%" y="239.50"></text></g><g><title>timerqueue_add (1 samples, 0.02%)</title><rect x="48.4108%" y="213" width="0.0167%" height="15" fill="rgb(211,33,43)" fg:x="2894" fg:w="1"/><text x="48.5280%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (222 samples, 3.71%)</title><rect x="48.4276%" y="309" width="3.7136%" height="15" fill="rgb(245,58,50)" fg:x="2895" fg:w="222"/><text x="48.5448%" y="319.50">core::num::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (723 samples, 12.09%)</title><rect x="41.4185%" y="341" width="12.0943%" height="15" fill="rgb(244,68,36)" fg:x="2476" fg:w="723"/><text x="41.5357%" y="351.50">&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (436 samples, 7.29%)</title><rect x="46.2195%" y="325" width="7.2934%" height="15" fill="rgb(232,229,15)" fg:x="2763" fg:w="436"/><text x="46.3367%" y="335.50">&lt;core::hash::sip::Sip13R..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (82 samples, 1.37%)</title><rect x="52.1412%" y="309" width="1.3717%" height="15" fill="rgb(254,30,23)" fg:x="3117" fg:w="82"/><text x="52.2584%" y="319.50">co..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (760 samples, 12.71%)</title><rect x="41.4185%" y="373" width="12.7133%" height="15" fill="rgb(235,160,14)" fg:x="2476" fg:w="760"/><text x="41.5357%" y="383.50">&lt;std::hash::random::DefaultHasher as core::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (760 samples, 12.71%)</title><rect x="41.4185%" y="357" width="12.7133%" height="15" fill="rgb(212,155,44)" fg:x="2476" fg:w="760"/><text x="41.5357%" y="367.50">&lt;core::hash::sip::SipHasher13 as core::hash..</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (37 samples, 0.62%)</title><rect x="53.5129%" y="341" width="0.6189%" height="15" fill="rgb(226,2,50)" fg:x="3199" fg:w="37"/><text x="53.6301%" y="351.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (221 samples, 3.70%)</title><rect x="54.1318%" y="373" width="3.6969%" height="15" fill="rgb(234,177,6)" fg:x="3236" fg:w="221"/><text x="54.2490%" y="383.50">&lt;std::hash:..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (59 samples, 0.99%)</title><rect x="56.8418%" y="357" width="0.9870%" height="15" fill="rgb(217,24,9)" fg:x="3398" fg:w="59"/><text x="56.9589%" y="367.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (59 samples, 0.99%)</title><rect x="56.8418%" y="341" width="0.9870%" height="15" fill="rgb(220,13,46)" fg:x="3398" fg:w="59"/><text x="56.9589%" y="351.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (59 samples, 0.99%)</title><rect x="56.8418%" y="325" width="0.9870%" height="15" fill="rgb(239,221,27)" fg:x="3398" fg:w="59"/><text x="56.9589%" y="335.50">c..</text></g><g><title>_ZN4core4hash5impls52_$LT$impl$u20$core..hash..Hash$u20$for$u20$usize$GT$4hash17h63554ef787a8249bE.llvm.13702892793563944828 (84 samples, 1.41%)</title><rect x="58.1967%" y="341" width="1.4052%" height="15" fill="rgb(222,198,25)" fg:x="3479" fg:w="84"/><text x="58.3139%" y="351.50">_ZN..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (149 samples, 2.49%)</title><rect x="66.7949%" y="245" width="2.4925%" height="15" fill="rgb(211,99,13)" fg:x="3993" fg:w="149"/><text x="66.9121%" y="255.50">core::n..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (405 samples, 6.77%)</title><rect x="64.1017%" y="261" width="6.7748%" height="15" fill="rgb(232,111,31)" fg:x="3832" fg:w="405"/><text x="64.2189%" y="271.50">&lt;core::hash::sip::Sip1..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (95 samples, 1.59%)</title><rect x="69.2874%" y="245" width="1.5892%" height="15" fill="rgb(245,82,37)" fg:x="4142" fg:w="95"/><text x="69.4046%" y="255.50">cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (933 samples, 15.61%)</title><rect x="59.6019%" y="277" width="15.6072%" height="15" fill="rgb(227,149,46)" fg:x="3563" fg:w="933"/><text x="59.7191%" y="287.50">&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::wr..</text></g><g><title>core::hash::sip::u8to64_le (259 samples, 4.33%)</title><rect x="70.8765%" y="261" width="4.3326%" height="15" fill="rgb(218,36,50)" fg:x="4237" fg:w="259"/><text x="70.9937%" y="271.50">core::hash::s..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="75.1924%" y="245" width="0.0167%" height="15" fill="rgb(226,80,48)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="75.1924%" y="229" width="0.0167%" height="15" fill="rgb(238,224,15)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="239.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="75.1924%" y="213" width="0.0167%" height="15" fill="rgb(241,136,10)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="223.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.02%)</title><rect x="75.1924%" y="197" width="0.0167%" height="15" fill="rgb(208,32,45)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="207.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.02%)</title><rect x="75.1924%" y="181" width="0.0167%" height="15" fill="rgb(207,135,9)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="191.50"></text></g><g><title>tick_sched_timer (1 samples, 0.02%)</title><rect x="75.1924%" y="165" width="0.0167%" height="15" fill="rgb(206,86,44)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="175.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.02%)</title><rect x="75.1924%" y="149" width="0.0167%" height="15" fill="rgb(245,177,15)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="159.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.02%)</title><rect x="75.1924%" y="133" width="0.0167%" height="15" fill="rgb(206,64,50)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="143.50"></text></g><g><title>update_wall_time (1 samples, 0.02%)</title><rect x="75.1924%" y="117" width="0.0167%" height="15" fill="rgb(234,36,40)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="127.50"></text></g><g><title>timekeeping_advance (1 samples, 0.02%)</title><rect x="75.1924%" y="101" width="0.0167%" height="15" fill="rgb(213,64,8)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="111.50"></text></g><g><title>timekeeping_update (1 samples, 0.02%)</title><rect x="75.1924%" y="85" width="0.0167%" height="15" fill="rgb(210,75,36)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="95.50"></text></g><g><title>raw_notifier_call_chain (1 samples, 0.02%)</title><rect x="75.1924%" y="69" width="0.0167%" height="15" fill="rgb(229,88,21)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="79.50"></text></g><g><title>pvclock_gtod_notify (1 samples, 0.02%)</title><rect x="75.1924%" y="53" width="0.0167%" height="15" fill="rgb(252,204,47)" fg:x="4495" fg:w="1"/><text x="75.3096%" y="63.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,014 samples, 16.96%)</title><rect x="59.6019%" y="309" width="16.9622%" height="15" fill="rgb(208,77,27)" fg:x="3563" fg:w="1014"/><text x="59.7191%" y="319.50">&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::w..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,014 samples, 16.96%)</title><rect x="59.6019%" y="293" width="16.9622%" height="15" fill="rgb(221,76,26)" fg:x="3563" fg:w="1014"/><text x="59.7191%" y="303.50">&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write</text></g><g><title>_ZN4core4hash5impls52_$LT$impl$u20$core..hash..Hash$u20$for$u20$usize$GT$4hash17h63554ef787a8249bE.llvm.13702892793563944828 (81 samples, 1.35%)</title><rect x="75.2091%" y="277" width="1.3550%" height="15" fill="rgb(225,139,18)" fg:x="4496" fg:w="81"/><text x="75.3263%" y="287.50">_Z..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (1,191 samples, 19.92%)</title><rect x="57.8287%" y="357" width="19.9231%" height="15" fill="rgb(230,137,11)" fg:x="3457" fg:w="1191"/><text x="57.9459%" y="367.50">core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1,085 samples, 18.15%)</title><rect x="59.6019%" y="341" width="18.1499%" height="15" fill="rgb(212,28,1)" fg:x="3563" fg:w="1085"/><text x="59.7191%" y="351.50">core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash</text></g><g><title>core::hash::Hasher::write_usize (1,085 samples, 18.15%)</title><rect x="59.6019%" y="325" width="18.1499%" height="15" fill="rgb(248,164,17)" fg:x="3563" fg:w="1085"/><text x="59.7191%" y="335.50">core::hash::Hasher::write_usize</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (71 samples, 1.19%)</title><rect x="76.5641%" y="309" width="1.1877%" height="15" fill="rgb(222,171,42)" fg:x="4577" fg:w="71"/><text x="76.6813%" y="319.50">co..</text></g><g><title>hashbrown::map::make_hash (2,190 samples, 36.63%)</title><rect x="41.2011%" y="405" width="36.6343%" height="15" fill="rgb(243,84,45)" fg:x="2463" fg:w="2190"/><text x="41.3183%" y="415.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (2,190 samples, 36.63%)</title><rect x="41.2011%" y="389" width="36.6343%" height="15" fill="rgb(252,49,23)" fg:x="2463" fg:w="2190"/><text x="41.3183%" y="399.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,196 samples, 20.01%)</title><rect x="57.8287%" y="373" width="20.0067%" height="15" fill="rgb(215,19,7)" fg:x="3457" fg:w="1196"/><text x="57.9459%" y="383.50">core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (5 samples, 0.08%)</title><rect x="77.7518%" y="357" width="0.0836%" height="15" fill="rgb(238,81,41)" fg:x="4648" fg:w="5"/><text x="77.8689%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (31 samples, 0.52%)</title><rect x="78.6718%" y="341" width="0.5186%" height="15" fill="rgb(210,199,37)" fg:x="4703" fg:w="31"/><text x="78.7890%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (14 samples, 0.23%)</title><rect x="78.9562%" y="325" width="0.2342%" height="15" fill="rgb(244,192,49)" fg:x="4720" fg:w="14"/><text x="79.0734%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (14 samples, 0.23%)</title><rect x="78.9562%" y="309" width="0.2342%" height="15" fill="rgb(226,211,11)" fg:x="4720" fg:w="14"/><text x="79.0734%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.89%)</title><rect x="78.6718%" y="357" width="0.8866%" height="15" fill="rgb(236,162,54)" fg:x="4703" fg:w="53"/><text x="78.7890%" y="367.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (22 samples, 0.37%)</title><rect x="79.1904%" y="341" width="0.3680%" height="15" fill="rgb(220,229,9)" fg:x="4734" fg:w="22"/><text x="79.3076%" y="351.50"></text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (20 samples, 0.33%)</title><rect x="79.5584%" y="357" width="0.3346%" height="15" fill="rgb(250,87,22)" fg:x="4756" fg:w="20"/><text x="79.6756%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (32 samples, 0.54%)</title><rect x="79.8929%" y="341" width="0.5353%" height="15" fill="rgb(239,43,17)" fg:x="4776" fg:w="32"/><text x="80.0101%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (32 samples, 0.54%)</title><rect x="79.8929%" y="325" width="0.5353%" height="15" fill="rgb(231,177,25)" fg:x="4776" fg:w="32"/><text x="80.0101%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.54%)</title><rect x="79.8929%" y="309" width="0.5353%" height="15" fill="rgb(219,179,1)" fg:x="4776" fg:w="32"/><text x="80.0101%" y="319.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (32 samples, 0.54%)</title><rect x="79.8929%" y="293" width="0.5353%" height="15" fill="rgb(238,219,53)" fg:x="4776" fg:w="32"/><text x="80.0101%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (32 samples, 0.54%)</title><rect x="79.8929%" y="277" width="0.5353%" height="15" fill="rgb(232,167,36)" fg:x="4776" fg:w="32"/><text x="80.0101%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (17 samples, 0.28%)</title><rect x="80.4282%" y="341" width="0.2844%" height="15" fill="rgb(244,19,51)" fg:x="4808" fg:w="17"/><text x="80.5454%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (17 samples, 0.28%)</title><rect x="80.4282%" y="325" width="0.2844%" height="15" fill="rgb(224,6,22)" fg:x="4808" fg:w="17"/><text x="80.5454%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (17 samples, 0.28%)</title><rect x="80.4282%" y="309" width="0.2844%" height="15" fill="rgb(224,145,5)" fg:x="4808" fg:w="17"/><text x="80.5454%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (17 samples, 0.28%)</title><rect x="80.4282%" y="293" width="0.2844%" height="15" fill="rgb(234,130,49)" fg:x="4808" fg:w="17"/><text x="80.5454%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (50 samples, 0.84%)</title><rect x="79.8929%" y="357" width="0.8364%" height="15" fill="rgb(254,6,2)" fg:x="4776" fg:w="50"/><text x="80.0101%" y="367.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.02%)</title><rect x="80.7126%" y="341" width="0.0167%" height="15" fill="rgb(208,96,46)" fg:x="4825" fg:w="1"/><text x="80.8298%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.02%)</title><rect x="80.7126%" y="325" width="0.0167%" height="15" fill="rgb(239,3,39)" fg:x="4825" fg:w="1"/><text x="80.8298%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="80.7126%" y="309" width="0.0167%" height="15" fill="rgb(233,210,1)" fg:x="4825" fg:w="1"/><text x="80.8298%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (87 samples, 1.46%)</title><rect x="80.7293%" y="357" width="1.4553%" height="15" fill="rgb(244,137,37)" fg:x="4826" fg:w="87"/><text x="80.8465%" y="367.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::load (22 samples, 0.37%)</title><rect x="82.1847%" y="357" width="0.3680%" height="15" fill="rgb(240,136,2)" fg:x="4913" fg:w="22"/><text x="82.3019%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (22 samples, 0.37%)</title><rect x="82.1847%" y="341" width="0.3680%" height="15" fill="rgb(239,18,37)" fg:x="4913" fg:w="22"/><text x="82.3019%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.37%)</title><rect x="82.1847%" y="325" width="0.3680%" height="15" fill="rgb(218,185,22)" fg:x="4913" fg:w="22"/><text x="82.3019%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,494 samples, 41.72%)</title><rect x="41.0672%" y="453" width="41.7196%" height="15" fill="rgb(225,218,4)" fg:x="2455" fg:w="2494"/><text x="41.1844%" y="463.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,494 samples, 41.72%)</title><rect x="41.0672%" y="437" width="41.7196%" height="15" fill="rgb(230,182,32)" fg:x="2455" fg:w="2494"/><text x="41.1844%" y="447.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,494 samples, 41.72%)</title><rect x="41.0672%" y="421" width="41.7196%" height="15" fill="rgb(242,56,43)" fg:x="2455" fg:w="2494"/><text x="41.1844%" y="431.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (296 samples, 4.95%)</title><rect x="77.8354%" y="405" width="4.9515%" height="15" fill="rgb(233,99,24)" fg:x="4653" fg:w="296"/><text x="77.9526%" y="415.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (296 samples, 4.95%)</title><rect x="77.8354%" y="389" width="4.9515%" height="15" fill="rgb(234,209,42)" fg:x="4653" fg:w="296"/><text x="77.9526%" y="399.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (296 samples, 4.95%)</title><rect x="77.8354%" y="373" width="4.9515%" height="15" fill="rgb(227,7,12)" fg:x="4653" fg:w="296"/><text x="77.9526%" y="383.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (14 samples, 0.23%)</title><rect x="82.5527%" y="357" width="0.2342%" height="15" fill="rgb(245,203,43)" fg:x="4935" fg:w="14"/><text x="82.6699%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.23%)</title><rect x="82.5527%" y="341" width="0.2342%" height="15" fill="rgb(238,205,33)" fg:x="4935" fg:w="14"/><text x="82.6699%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="82.7702%" y="325" width="0.0167%" height="15" fill="rgb(231,56,7)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="82.7702%" y="309" width="0.0167%" height="15" fill="rgb(244,186,29)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="82.7702%" y="293" width="0.0167%" height="15" fill="rgb(234,111,31)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="303.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.02%)</title><rect x="82.7702%" y="277" width="0.0167%" height="15" fill="rgb(241,149,10)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="287.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.02%)</title><rect x="82.7702%" y="261" width="0.0167%" height="15" fill="rgb(249,206,44)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="271.50"></text></g><g><title>tick_sched_timer (1 samples, 0.02%)</title><rect x="82.7702%" y="245" width="0.0167%" height="15" fill="rgb(251,153,30)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="255.50"></text></g><g><title>tick_sched_handle (1 samples, 0.02%)</title><rect x="82.7702%" y="229" width="0.0167%" height="15" fill="rgb(239,152,38)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="239.50"></text></g><g><title>update_process_times (1 samples, 0.02%)</title><rect x="82.7702%" y="213" width="0.0167%" height="15" fill="rgb(249,139,47)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="223.50"></text></g><g><title>scheduler_tick (1 samples, 0.02%)</title><rect x="82.7702%" y="197" width="0.0167%" height="15" fill="rgb(244,64,35)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="207.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.02%)</title><rect x="82.7702%" y="181" width="0.0167%" height="15" fill="rgb(216,46,15)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="191.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.02%)</title><rect x="82.7702%" y="165" width="0.0167%" height="15" fill="rgb(250,74,19)" fg:x="4948" fg:w="1"/><text x="82.8873%" y="175.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="83.4393%" y="405" width="0.0167%" height="15" fill="rgb(249,42,33)" fg:x="4988" fg:w="1"/><text x="83.5565%" y="415.50"></text></g><g><title>core::ptr::write (28 samples, 0.47%)</title><rect x="83.4560%" y="405" width="0.4684%" height="15" fill="rgb(242,149,17)" fg:x="4989" fg:w="28"/><text x="83.5732%" y="415.50"></text></g><g><title>core::mem::replace (30 samples, 0.50%)</title><rect x="83.4393%" y="421" width="0.5018%" height="15" fill="rgb(244,29,21)" fg:x="4988" fg:w="30"/><text x="83.5565%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="83.9244%" y="405" width="0.0167%" height="15" fill="rgb(220,130,37)" fg:x="5017" fg:w="1"/><text x="84.0416%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (37 samples, 0.62%)</title><rect x="84.8779%" y="325" width="0.6189%" height="15" fill="rgb(211,67,2)" fg:x="5074" fg:w="37"/><text x="84.9951%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (58 samples, 0.97%)</title><rect x="84.6939%" y="341" width="0.9702%" height="15" fill="rgb(235,68,52)" fg:x="5063" fg:w="58"/><text x="84.8111%" y="351.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 0.17%)</title><rect x="85.4968%" y="325" width="0.1673%" height="15" fill="rgb(246,142,3)" fg:x="5111" fg:w="10"/><text x="85.6140%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (96 samples, 1.61%)</title><rect x="86.2663%" y="325" width="1.6059%" height="15" fill="rgb(241,25,7)" fg:x="5157" fg:w="96"/><text x="86.3835%" y="335.50">cor..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (265 samples, 4.43%)</title><rect x="84.0415%" y="389" width="4.4329%" height="15" fill="rgb(242,119,39)" fg:x="5024" fg:w="265"/><text x="84.1587%" y="399.50">&lt;std::hash::ra..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (265 samples, 4.43%)</title><rect x="84.0415%" y="373" width="4.4329%" height="15" fill="rgb(241,98,45)" fg:x="5024" fg:w="265"/><text x="84.1587%" y="383.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (265 samples, 4.43%)</title><rect x="84.0415%" y="357" width="4.4329%" height="15" fill="rgb(254,28,30)" fg:x="5024" fg:w="265"/><text x="84.1587%" y="367.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (168 samples, 2.81%)</title><rect x="85.6641%" y="341" width="2.8103%" height="15" fill="rgb(241,142,54)" fg:x="5121" fg:w="168"/><text x="85.7813%" y="351.50">&lt;core::h..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (36 samples, 0.60%)</title><rect x="87.8722%" y="325" width="0.6022%" height="15" fill="rgb(222,85,15)" fg:x="5253" fg:w="36"/><text x="87.9894%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (45 samples, 0.75%)</title><rect x="88.4744%" y="389" width="0.7528%" height="15" fill="rgb(210,85,47)" fg:x="5289" fg:w="45"/><text x="88.5916%" y="399.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (33 samples, 0.55%)</title><rect x="88.6751%" y="373" width="0.5520%" height="15" fill="rgb(224,206,25)" fg:x="5301" fg:w="33"/><text x="88.7923%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (33 samples, 0.55%)</title><rect x="88.6751%" y="357" width="0.5520%" height="15" fill="rgb(243,201,19)" fg:x="5301" fg:w="33"/><text x="88.7923%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (33 samples, 0.55%)</title><rect x="88.6751%" y="341" width="0.5520%" height="15" fill="rgb(236,59,4)" fg:x="5301" fg:w="33"/><text x="88.7923%" y="351.50"></text></g><g><title>_ZN4core4hash5impls52_$LT$impl$u20$core..hash..Hash$u20$for$u20$usize$GT$4hash17h63554ef787a8249bE.llvm.13702892793563944828 (33 samples, 0.55%)</title><rect x="89.6286%" y="357" width="0.5520%" height="15" fill="rgb(254,179,45)" fg:x="5358" fg:w="33"/><text x="89.7458%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (53 samples, 0.89%)</title><rect x="92.9073%" y="261" width="0.8866%" height="15" fill="rgb(226,14,10)" fg:x="5554" fg:w="53"/><text x="93.0245%" y="271.50">c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (141 samples, 2.36%)</title><rect x="91.8367%" y="277" width="2.3586%" height="15" fill="rgb(244,27,41)" fg:x="5490" fg:w="141"/><text x="91.9539%" y="287.50">&lt;core:..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 0.40%)</title><rect x="93.7939%" y="261" width="0.4015%" height="15" fill="rgb(235,35,32)" fg:x="5607" fg:w="24"/><text x="93.9111%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (305 samples, 5.10%)</title><rect x="90.1807%" y="293" width="5.1020%" height="15" fill="rgb(218,68,31)" fg:x="5391" fg:w="305"/><text x="90.2978%" y="303.50">&lt;core::hash::sip..</text></g><g><title>core::hash::sip::u8to64_le (65 samples, 1.09%)</title><rect x="94.1954%" y="277" width="1.0873%" height="15" fill="rgb(207,120,37)" fg:x="5631" fg:w="65"/><text x="94.3126%" y="287.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (342 samples, 5.72%)</title><rect x="90.1807%" y="325" width="5.7210%" height="15" fill="rgb(227,98,0)" fg:x="5391" fg:w="342"/><text x="90.2978%" y="335.50">&lt;std::hash::random..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (342 samples, 5.72%)</title><rect x="90.1807%" y="309" width="5.7210%" height="15" fill="rgb(207,7,3)" fg:x="5391" fg:w="342"/><text x="90.2978%" y="319.50">&lt;core::hash::sip::..</text></g><g><title>_ZN4core4hash5impls52_$LT$impl$u20$core..hash..Hash$u20$for$u20$usize$GT$4hash17h63554ef787a8249bE.llvm.13702892793563944828 (37 samples, 0.62%)</title><rect x="95.2827%" y="293" width="0.6189%" height="15" fill="rgb(206,98,19)" fg:x="5696" fg:w="37"/><text x="95.3999%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (738 samples, 12.35%)</title><rect x="83.9411%" y="421" width="12.3453%" height="15" fill="rgb(217,5,26)" fg:x="5018" fg:w="738"/><text x="84.0583%" y="431.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (732 samples, 12.24%)</title><rect x="84.0415%" y="405" width="12.2449%" height="15" fill="rgb(235,190,38)" fg:x="5024" fg:w="732"/><text x="84.1587%" y="415.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (422 samples, 7.06%)</title><rect x="89.2272%" y="389" width="7.0592%" height="15" fill="rgb(247,86,24)" fg:x="5334" fg:w="422"/><text x="89.3444%" y="399.50">core::hash::impls::&lt;imp..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (400 samples, 6.69%)</title><rect x="89.5952%" y="373" width="6.6912%" height="15" fill="rgb(205,101,16)" fg:x="5356" fg:w="400"/><text x="89.7124%" y="383.50">core::hash::impls::&lt;im..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (365 samples, 6.11%)</title><rect x="90.1807%" y="357" width="6.1057%" height="15" fill="rgb(246,168,33)" fg:x="5391" fg:w="365"/><text x="90.2978%" y="367.50">core::hash::impls::&lt;..</text></g><g><title>core::hash::Hasher::write_usize (365 samples, 6.11%)</title><rect x="90.1807%" y="341" width="6.1057%" height="15" fill="rgb(231,114,1)" fg:x="5391" fg:w="365"/><text x="90.2978%" y="351.50">core::hash::Hasher::..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (23 samples, 0.38%)</title><rect x="95.9016%" y="325" width="0.3847%" height="15" fill="rgb(207,184,53)" fg:x="5733" fg:w="23"/><text x="96.0188%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (16 samples, 0.27%)</title><rect x="96.2864%" y="421" width="0.2676%" height="15" fill="rgb(224,95,51)" fg:x="5756" fg:w="16"/><text x="96.4036%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (16 samples, 0.27%)</title><rect x="96.2864%" y="405" width="0.2676%" height="15" fill="rgb(212,188,45)" fg:x="5756" fg:w="16"/><text x="96.4036%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16 samples, 0.27%)</title><rect x="96.2864%" y="389" width="0.2676%" height="15" fill="rgb(223,154,38)" fg:x="5756" fg:w="16"/><text x="96.4036%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16 samples, 0.27%)</title><rect x="96.2864%" y="373" width="0.2676%" height="15" fill="rgb(251,22,52)" fg:x="5756" fg:w="16"/><text x="96.4036%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="96.8050%" y="405" width="0.0167%" height="15" fill="rgb(229,209,22)" fg:x="5787" fg:w="1"/><text x="96.9221%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (19 samples, 0.32%)</title><rect x="97.2733%" y="373" width="0.3178%" height="15" fill="rgb(234,138,34)" fg:x="5815" fg:w="19"/><text x="97.3905%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (13 samples, 0.22%)</title><rect x="97.3737%" y="357" width="0.2175%" height="15" fill="rgb(212,95,11)" fg:x="5821" fg:w="13"/><text x="97.4909%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (13 samples, 0.22%)</title><rect x="97.3737%" y="341" width="0.2175%" height="15" fill="rgb(240,179,47)" fg:x="5821" fg:w="13"/><text x="97.4909%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.42%)</title><rect x="97.2733%" y="389" width="0.4182%" height="15" fill="rgb(240,163,11)" fg:x="5815" fg:w="25"/><text x="97.3905%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (6 samples, 0.10%)</title><rect x="97.5912%" y="373" width="0.1004%" height="15" fill="rgb(236,37,12)" fg:x="5834" fg:w="6"/><text x="97.7084%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (26 samples, 0.43%)</title><rect x="97.6915%" y="373" width="0.4349%" height="15" fill="rgb(232,164,16)" fg:x="5840" fg:w="26"/><text x="97.8087%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (26 samples, 0.43%)</title><rect x="97.6915%" y="357" width="0.4349%" height="15" fill="rgb(244,205,15)" fg:x="5840" fg:w="26"/><text x="97.8087%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (26 samples, 0.43%)</title><rect x="97.6915%" y="341" width="0.4349%" height="15" fill="rgb(223,117,47)" fg:x="5840" fg:w="26"/><text x="97.8087%" y="351.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (26 samples, 0.43%)</title><rect x="97.6915%" y="325" width="0.4349%" height="15" fill="rgb(244,107,35)" fg:x="5840" fg:w="26"/><text x="97.8087%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (26 samples, 0.43%)</title><rect x="97.6915%" y="309" width="0.4349%" height="15" fill="rgb(205,140,8)" fg:x="5840" fg:w="26"/><text x="97.8087%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (45 samples, 0.75%)</title><rect x="97.6915%" y="389" width="0.7528%" height="15" fill="rgb(228,84,46)" fg:x="5840" fg:w="45"/><text x="97.8087%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (19 samples, 0.32%)</title><rect x="98.1265%" y="373" width="0.3178%" height="15" fill="rgb(254,188,9)" fg:x="5866" fg:w="19"/><text x="98.2437%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (19 samples, 0.32%)</title><rect x="98.1265%" y="357" width="0.3178%" height="15" fill="rgb(206,112,54)" fg:x="5866" fg:w="19"/><text x="98.2437%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (19 samples, 0.32%)</title><rect x="98.1265%" y="341" width="0.3178%" height="15" fill="rgb(216,84,49)" fg:x="5866" fg:w="19"/><text x="98.2437%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (18 samples, 0.30%)</title><rect x="98.1432%" y="325" width="0.3011%" height="15" fill="rgb(214,194,35)" fg:x="5867" fg:w="18"/><text x="98.2604%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.03%)</title><rect x="98.4443%" y="389" width="0.0335%" height="15" fill="rgb(249,28,3)" fg:x="5885" fg:w="2"/><text x="98.5615%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="98.4610%" y="373" width="0.0167%" height="15" fill="rgb(222,56,52)" fg:x="5886" fg:w="1"/><text x="98.5782%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (37 samples, 0.62%)</title><rect x="98.4778%" y="389" width="0.6189%" height="15" fill="rgb(245,217,50)" fg:x="5887" fg:w="37"/><text x="98.5949%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (7 samples, 0.12%)</title><rect x="99.0967%" y="389" width="0.1171%" height="15" fill="rgb(213,201,24)" fg:x="5924" fg:w="7"/><text x="99.2139%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.12%)</title><rect x="99.0967%" y="373" width="0.1171%" height="15" fill="rgb(248,116,28)" fg:x="5924" fg:w="7"/><text x="99.2139%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.12%)</title><rect x="99.0967%" y="357" width="0.1171%" height="15" fill="rgb(219,72,43)" fg:x="5924" fg:w="7"/><text x="99.2139%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (14 samples, 0.23%)</title><rect x="99.2138%" y="389" width="0.2342%" height="15" fill="rgb(209,138,14)" fg:x="5931" fg:w="14"/><text x="99.3310%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.23%)</title><rect x="99.2138%" y="373" width="0.2342%" height="15" fill="rgb(222,18,33)" fg:x="5931" fg:w="14"/><text x="99.3310%" y="383.50"></text></g><g><title>_start (5,504 samples, 92.07%)</title><rect x="7.3938%" y="613" width="92.0709%" height="15" fill="rgb(213,199,7)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="623.50">_start</text></g><g><title>__libc_start_main_impl (5,504 samples, 92.07%)</title><rect x="7.3938%" y="597" width="92.0709%" height="15" fill="rgb(250,110,10)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="607.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (5,504 samples, 92.07%)</title><rect x="7.3938%" y="581" width="92.0709%" height="15" fill="rgb(248,123,6)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="591.50">__libc_start_call_main</text></g><g><title>main (5,504 samples, 92.07%)</title><rect x="7.3938%" y="565" width="92.0709%" height="15" fill="rgb(206,91,31)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (5,504 samples, 92.07%)</title><rect x="7.3938%" y="549" width="92.0709%" height="15" fill="rgb(211,154,13)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (5,504 samples, 92.07%)</title><rect x="7.3938%" y="533" width="92.0709%" height="15" fill="rgb(225,148,7)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="543.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,504 samples, 92.07%)</title><rect x="7.3938%" y="517" width="92.0709%" height="15" fill="rgb(220,160,43)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,504 samples, 92.07%)</title><rect x="7.3938%" y="501" width="92.0709%" height="15" fill="rgb(213,52,39)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>fringe_vs_astar::main (5,504 samples, 92.07%)</title><rect x="7.3938%" y="485" width="92.0709%" height="15" fill="rgb(243,137,7)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="495.50">fringe_vs_astar::main</text></g><g><title>fringe_vs_astar::pathfinder::a_star_simple (5,504 samples, 92.07%)</title><rect x="7.3938%" y="469" width="92.0709%" height="15" fill="rgb(230,79,13)" fg:x="442" fg:w="5504"/><text x="7.5110%" y="479.50">fringe_vs_astar::pathfinder::a_star_simple</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (997 samples, 16.68%)</title><rect x="82.7869%" y="453" width="16.6778%" height="15" fill="rgb(247,105,23)" fg:x="4949" fg:w="997"/><text x="82.9041%" y="463.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (984 samples, 16.46%)</title><rect x="83.0043%" y="437" width="16.4604%" height="15" fill="rgb(223,179,41)" fg:x="4962" fg:w="984"/><text x="83.1215%" y="447.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (174 samples, 2.91%)</title><rect x="96.5540%" y="421" width="2.9107%" height="15" fill="rgb(218,9,34)" fg:x="5772" fg:w="174"/><text x="96.6712%" y="431.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (158 samples, 2.64%)</title><rect x="96.8217%" y="405" width="2.6430%" height="15" fill="rgb(222,106,8)" fg:x="5788" fg:w="158"/><text x="96.9389%" y="415.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.02%)</title><rect x="99.4480%" y="389" width="0.0167%" height="15" fill="rgb(211,220,0)" fg:x="5945" fg:w="1"/><text x="99.5652%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="99.4480%" y="373" width="0.0167%" height="15" fill="rgb(229,52,16)" fg:x="5945" fg:w="1"/><text x="99.5652%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="99.4480%" y="357" width="0.0167%" height="15" fill="rgb(212,155,18)" fg:x="5945" fg:w="1"/><text x="99.5652%" y="367.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.13%)</title><rect x="99.4647%" y="613" width="0.1338%" height="15" fill="rgb(242,21,14)" fg:x="5946" fg:w="8"/><text x="99.5819%" y="623.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="99.5985%" y="613" width="0.0167%" height="15" fill="rgb(222,19,48)" fg:x="5954" fg:w="1"/><text x="99.7157%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.20%)</title><rect x="99.6153%" y="613" width="0.2007%" height="15" fill="rgb(232,45,27)" fg:x="5955" fg:w="12"/><text x="99.7324%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.12%)</title><rect x="99.6989%" y="597" width="0.1171%" height="15" fill="rgb(249,103,42)" fg:x="5960" fg:w="7"/><text x="99.8161%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (7 samples, 0.12%)</title><rect x="99.6989%" y="581" width="0.1171%" height="15" fill="rgb(246,81,33)" fg:x="5960" fg:w="7"/><text x="99.8161%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="99.8160%" y="613" width="0.0167%" height="15" fill="rgb(252,33,42)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="623.50"></text></g><g><title>do_syscall_64 (1 samples, 0.02%)</title><rect x="99.8160%" y="597" width="0.0167%" height="15" fill="rgb(209,212,41)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="607.50"></text></g><g><title>x64_sys_call (1 samples, 0.02%)</title><rect x="99.8160%" y="581" width="0.0167%" height="15" fill="rgb(207,154,6)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="591.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.02%)</title><rect x="99.8160%" y="565" width="0.0167%" height="15" fill="rgb(223,64,47)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="575.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.02%)</title><rect x="99.8160%" y="549" width="0.0167%" height="15" fill="rgb(211,161,38)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="559.50"></text></g><g><title>bprm_execve (1 samples, 0.02%)</title><rect x="99.8160%" y="533" width="0.0167%" height="15" fill="rgb(219,138,40)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="543.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.02%)</title><rect x="99.8160%" y="517" width="0.0167%" height="15" fill="rgb(241,228,46)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="527.50"></text></g><g><title>exec_binprm (1 samples, 0.02%)</title><rect x="99.8160%" y="501" width="0.0167%" height="15" fill="rgb(223,209,38)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="511.50"></text></g><g><title>search_binary_handler (1 samples, 0.02%)</title><rect x="99.8160%" y="485" width="0.0167%" height="15" fill="rgb(236,164,45)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="495.50"></text></g><g><title>load_elf_binary (1 samples, 0.02%)</title><rect x="99.8160%" y="469" width="0.0167%" height="15" fill="rgb(231,15,5)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="479.50"></text></g><g><title>setup_arg_pages (1 samples, 0.02%)</title><rect x="99.8160%" y="453" width="0.0167%" height="15" fill="rgb(252,35,15)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="463.50"></text></g><g><title>shift_arg_pages (1 samples, 0.02%)</title><rect x="99.8160%" y="437" width="0.0167%" height="15" fill="rgb(248,181,18)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="447.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.02%)</title><rect x="99.8160%" y="421" width="0.0167%" height="15" fill="rgb(233,39,42)" fg:x="5967" fg:w="1"/><text x="99.9332%" y="431.50"></text></g><g><title>fringe-vs-astar (5,973 samples, 99.92%)</title><rect x="0.0000%" y="629" width="99.9164%" height="15" fill="rgb(238,110,33)" fg:x="0" fg:w="5973"/><text x="0.1172%" y="639.50">fringe-vs-astar</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.08%)</title><rect x="99.8327%" y="613" width="0.0836%" height="15" fill="rgb(233,195,10)" fg:x="5968" fg:w="5"/><text x="99.9499%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.03%)</title><rect x="99.8829%" y="597" width="0.0335%" height="15" fill="rgb(254,105,3)" fg:x="5971" fg:w="2"/><text x="100.0001%" y="607.50"></text></g><g><title>all (5,978 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(221,225,9)" fg:x="0" fg:w="5978"/><text x="0.1172%" y="655.50"></text></g><g><title>perf-exec (5 samples, 0.08%)</title><rect x="99.9164%" y="629" width="0.0836%" height="15" fill="rgb(224,227,45)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.08%)</title><rect x="99.9164%" y="613" width="0.0836%" height="15" fill="rgb(229,198,43)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="623.50"></text></g><g><title>do_syscall_64 (5 samples, 0.08%)</title><rect x="99.9164%" y="597" width="0.0836%" height="15" fill="rgb(206,209,35)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="607.50"></text></g><g><title>x64_sys_call (5 samples, 0.08%)</title><rect x="99.9164%" y="581" width="0.0836%" height="15" fill="rgb(245,195,53)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="591.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.08%)</title><rect x="99.9164%" y="565" width="0.0836%" height="15" fill="rgb(240,92,26)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="575.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.08%)</title><rect x="99.9164%" y="549" width="0.0836%" height="15" fill="rgb(207,40,23)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="559.50"></text></g><g><title>bprm_execve (5 samples, 0.08%)</title><rect x="99.9164%" y="533" width="0.0836%" height="15" fill="rgb(223,111,35)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="543.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.08%)</title><rect x="99.9164%" y="517" width="0.0836%" height="15" fill="rgb(229,147,28)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="527.50"></text></g><g><title>exec_binprm (5 samples, 0.08%)</title><rect x="99.9164%" y="501" width="0.0836%" height="15" fill="rgb(211,29,28)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="511.50"></text></g><g><title>search_binary_handler (5 samples, 0.08%)</title><rect x="99.9164%" y="485" width="0.0836%" height="15" fill="rgb(228,72,33)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="495.50"></text></g><g><title>load_elf_binary (5 samples, 0.08%)</title><rect x="99.9164%" y="469" width="0.0836%" height="15" fill="rgb(205,214,31)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="479.50"></text></g><g><title>begin_new_exec (5 samples, 0.08%)</title><rect x="99.9164%" y="453" width="0.0836%" height="15" fill="rgb(224,111,15)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="463.50"></text></g><g><title>perf_event_exec (5 samples, 0.08%)</title><rect x="99.9164%" y="437" width="0.0836%" height="15" fill="rgb(253,21,26)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="447.50"></text></g><g><title>perf_event_enable_on_exec (5 samples, 0.08%)</title><rect x="99.9164%" y="421" width="0.0836%" height="15" fill="rgb(245,139,43)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="431.50"></text></g><g><title>ctx_resched (5 samples, 0.08%)</title><rect x="99.9164%" y="405" width="0.0836%" height="15" fill="rgb(252,170,7)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="415.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.08%)</title><rect x="99.9164%" y="389" width="0.0836%" height="15" fill="rgb(231,118,14)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="399.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.08%)</title><rect x="99.9164%" y="373" width="0.0836%" height="15" fill="rgb(238,83,0)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="383.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.08%)</title><rect x="99.9164%" y="357" width="0.0836%" height="15" fill="rgb(221,39,39)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="367.50"></text></g><g><title>native_write_msr (5 samples, 0.08%)</title><rect x="99.9164%" y="341" width="0.0836%" height="15" fill="rgb(222,119,46)" fg:x="5973" fg:w="5"/><text x="100.0335%" y="351.50"></text></g></svg></svg>